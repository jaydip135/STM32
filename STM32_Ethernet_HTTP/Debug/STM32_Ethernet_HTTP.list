
STM32_Ethernet_HTTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6c0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030b0  0800e8a4  0800e8a4  0000f8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011954  08011954  0001306c  2**0
                  CONTENTS
  4 .ARM          00000008  08011954  08011954  00012954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801195c  0801195c  0001306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801195c  0801195c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011960  08011960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08011964  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008544  2000006c  080119d0  0001306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200085b0  080119d0  000135b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e77  00000000  00000000  00013095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046e6  00000000  00000000  00027f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0002c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bef  00000000  00000000  0002d560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a86c  00000000  00000000  0002e14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fed0  00000000  00000000  000589bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c76d5  00000000  00000000  0007888b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ff60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004258  00000000  00000000  0013ffa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001441fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e88c 	.word	0x0800e88c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000070 	.word	0x20000070
 8000220:	0800e88c 	.word	0x0800e88c

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b968 	b.w	8000530 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	460c      	mov	r4, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14e      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000284:	4694      	mov	ip, r2
 8000286:	458c      	cmp	ip, r1
 8000288:	4686      	mov	lr, r0
 800028a:	fab2 f282 	clz	r2, r2
 800028e:	d962      	bls.n	8000356 <__udivmoddi4+0xde>
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0320 	rsb	r3, r2, #32
 8000296:	4091      	lsls	r1, r2
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a0:	4319      	orrs	r1, r3
 80002a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	fa1f f68c 	uxth.w	r6, ip
 80002b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb04 f106 	mul.w	r1, r4, r6
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ce:	f080 8110 	bcs.w	80004f2 <__udivmoddi4+0x27a>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 810d 	bls.w	80004f2 <__udivmoddi4+0x27a>
 80002d8:	3c02      	subs	r4, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a59      	subs	r1, r3, r1
 80002de:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e2:	fb07 1110 	mls	r1, r7, r0, r1
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	fa1f f38e 	uxth.w	r3, lr
 80002ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f2:	429e      	cmp	r6, r3
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x94>
 80002f6:	eb1c 0303 	adds.w	r3, ip, r3
 80002fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80002fe:	f080 80fa 	bcs.w	80004f6 <__udivmoddi4+0x27e>
 8000302:	429e      	cmp	r6, r3
 8000304:	f240 80f7 	bls.w	80004f6 <__udivmoddi4+0x27e>
 8000308:	4463      	add	r3, ip
 800030a:	3802      	subs	r0, #2
 800030c:	2100      	movs	r1, #0
 800030e:	1b9b      	subs	r3, r3, r6
 8000310:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000314:	b11d      	cbz	r5, 800031e <__udivmoddi4+0xa6>
 8000316:	40d3      	lsrs	r3, r2
 8000318:	2200      	movs	r2, #0
 800031a:	e9c5 3200 	strd	r3, r2, [r5]
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d905      	bls.n	8000332 <__udivmoddi4+0xba>
 8000326:	b10d      	cbz	r5, 800032c <__udivmoddi4+0xb4>
 8000328:	e9c5 0100 	strd	r0, r1, [r5]
 800032c:	2100      	movs	r1, #0
 800032e:	4608      	mov	r0, r1
 8000330:	e7f5      	b.n	800031e <__udivmoddi4+0xa6>
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d146      	bne.n	80003c8 <__udivmoddi4+0x150>
 800033a:	42a3      	cmp	r3, r4
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xcc>
 800033e:	4290      	cmp	r0, r2
 8000340:	f0c0 80ee 	bcc.w	8000520 <__udivmoddi4+0x2a8>
 8000344:	1a86      	subs	r6, r0, r2
 8000346:	eb64 0303 	sbc.w	r3, r4, r3
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d0e6      	beq.n	800031e <__udivmoddi4+0xa6>
 8000350:	e9c5 6300 	strd	r6, r3, [r5]
 8000354:	e7e3      	b.n	800031e <__udivmoddi4+0xa6>
 8000356:	2a00      	cmp	r2, #0
 8000358:	f040 808f 	bne.w	800047a <__udivmoddi4+0x202>
 800035c:	eba1 040c 	sub.w	r4, r1, ip
 8000360:	2101      	movs	r1, #1
 8000362:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000366:	fa1f f78c 	uxth.w	r7, ip
 800036a:	fbb4 f6f8 	udiv	r6, r4, r8
 800036e:	fb08 4416 	mls	r4, r8, r6, r4
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	4298      	cmp	r0, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x11c>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 34ff 	add.w	r4, r6, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x11a>
 800038c:	4298      	cmp	r0, r3
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 8000392:	4626      	mov	r6, r4
 8000394:	1a1c      	subs	r4, r3, r0
 8000396:	fbb4 f0f8 	udiv	r0, r4, r8
 800039a:	fb08 4410 	mls	r4, r8, r0, r4
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003aa:	429f      	cmp	r7, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x148>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x146>
 80003b8:	429f      	cmp	r7, r3
 80003ba:	f200 80ae 	bhi.w	800051a <__udivmoddi4+0x2a2>
 80003be:	4620      	mov	r0, r4
 80003c0:	1bdb      	subs	r3, r3, r7
 80003c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003c6:	e7a5      	b.n	8000314 <__udivmoddi4+0x9c>
 80003c8:	f1c1 0720 	rsb	r7, r1, #32
 80003cc:	408b      	lsls	r3, r1
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa24 f607 	lsr.w	r6, r4, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fbb6 f8f9 	udiv	r8, r6, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 6618 	mls	r6, r9, r8, r6
 80003ea:	fa20 f307 	lsr.w	r3, r0, r7
 80003ee:	408c      	lsls	r4, r1
 80003f0:	fa00 fa01 	lsl.w	sl, r0, r1
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	431c      	orrs	r4, r3
 80003fa:	0c23      	lsrs	r3, r4, #16
 80003fc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000400:	4298      	cmp	r0, r3
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	d90a      	bls.n	800041e <__udivmoddi4+0x1a6>
 8000408:	eb1c 0303 	adds.w	r3, ip, r3
 800040c:	f108 36ff 	add.w	r6, r8, #4294967295
 8000410:	f080 8081 	bcs.w	8000516 <__udivmoddi4+0x29e>
 8000414:	4298      	cmp	r0, r3
 8000416:	d97e      	bls.n	8000516 <__udivmoddi4+0x29e>
 8000418:	f1a8 0802 	sub.w	r8, r8, #2
 800041c:	4463      	add	r3, ip
 800041e:	1a1e      	subs	r6, r3, r0
 8000420:	fbb6 f3f9 	udiv	r3, r6, r9
 8000424:	fb09 6613 	mls	r6, r9, r3, r6
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	b2a4      	uxth	r4, r4
 800042e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000432:	45a6      	cmp	lr, r4
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x1d0>
 8000436:	eb1c 0404 	adds.w	r4, ip, r4
 800043a:	f103 30ff 	add.w	r0, r3, #4294967295
 800043e:	d266      	bcs.n	800050e <__udivmoddi4+0x296>
 8000440:	45a6      	cmp	lr, r4
 8000442:	d964      	bls.n	800050e <__udivmoddi4+0x296>
 8000444:	3b02      	subs	r3, #2
 8000446:	4464      	add	r4, ip
 8000448:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800044c:	fba0 8302 	umull	r8, r3, r0, r2
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	429c      	cmp	r4, r3
 8000456:	46c6      	mov	lr, r8
 8000458:	461e      	mov	r6, r3
 800045a:	d350      	bcc.n	80004fe <__udivmoddi4+0x286>
 800045c:	d04d      	beq.n	80004fa <__udivmoddi4+0x282>
 800045e:	b155      	cbz	r5, 8000476 <__udivmoddi4+0x1fe>
 8000460:	ebba 030e 	subs.w	r3, sl, lr
 8000464:	eb64 0406 	sbc.w	r4, r4, r6
 8000468:	fa04 f707 	lsl.w	r7, r4, r7
 800046c:	40cb      	lsrs	r3, r1
 800046e:	431f      	orrs	r7, r3
 8000470:	40cc      	lsrs	r4, r1
 8000472:	e9c5 7400 	strd	r7, r4, [r5]
 8000476:	2100      	movs	r1, #0
 8000478:	e751      	b.n	800031e <__udivmoddi4+0xa6>
 800047a:	fa0c fc02 	lsl.w	ip, ip, r2
 800047e:	f1c2 0320 	rsb	r3, r2, #32
 8000482:	40d9      	lsrs	r1, r3
 8000484:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000488:	fa20 f303 	lsr.w	r3, r0, r3
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fbb1 f0f8 	udiv	r0, r1, r8
 8000494:	fb08 1110 	mls	r1, r8, r0, r1
 8000498:	4094      	lsls	r4, r2
 800049a:	431c      	orrs	r4, r3
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	0c23      	lsrs	r3, r4, #16
 80004a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a6:	fb00 f107 	mul.w	r1, r0, r7
 80004aa:	4299      	cmp	r1, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x248>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b6:	d22c      	bcs.n	8000512 <__udivmoddi4+0x29a>
 80004b8:	4299      	cmp	r1, r3
 80004ba:	d92a      	bls.n	8000512 <__udivmoddi4+0x29a>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a5b      	subs	r3, r3, r1
 80004c2:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c6:	fb08 3311 	mls	r3, r8, r1, r3
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004d0:	fb01 f307 	mul.w	r3, r1, r7
 80004d4:	42a3      	cmp	r3, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x272>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004e0:	d213      	bcs.n	800050a <__udivmoddi4+0x292>
 80004e2:	42a3      	cmp	r3, r4
 80004e4:	d911      	bls.n	800050a <__udivmoddi4+0x292>
 80004e6:	3902      	subs	r1, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	1ae4      	subs	r4, r4, r3
 80004ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004f0:	e73b      	b.n	800036a <__udivmoddi4+0xf2>
 80004f2:	4604      	mov	r4, r0
 80004f4:	e6f2      	b.n	80002dc <__udivmoddi4+0x64>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e708      	b.n	800030c <__udivmoddi4+0x94>
 80004fa:	45c2      	cmp	sl, r8
 80004fc:	d2af      	bcs.n	800045e <__udivmoddi4+0x1e6>
 80004fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000502:	eb63 060c 	sbc.w	r6, r3, ip
 8000506:	3801      	subs	r0, #1
 8000508:	e7a9      	b.n	800045e <__udivmoddi4+0x1e6>
 800050a:	4631      	mov	r1, r6
 800050c:	e7ed      	b.n	80004ea <__udivmoddi4+0x272>
 800050e:	4603      	mov	r3, r0
 8000510:	e79a      	b.n	8000448 <__udivmoddi4+0x1d0>
 8000512:	4630      	mov	r0, r6
 8000514:	e7d4      	b.n	80004c0 <__udivmoddi4+0x248>
 8000516:	46b0      	mov	r8, r6
 8000518:	e781      	b.n	800041e <__udivmoddi4+0x1a6>
 800051a:	4463      	add	r3, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e74f      	b.n	80003c0 <__udivmoddi4+0x148>
 8000520:	4606      	mov	r6, r0
 8000522:	4623      	mov	r3, r4
 8000524:	4608      	mov	r0, r1
 8000526:	e711      	b.n	800034c <__udivmoddi4+0xd4>
 8000528:	3e02      	subs	r6, #2
 800052a:	4463      	add	r3, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x11c>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	tCGI LED_CGI = { "/LEDControl.cgi", LedControlCgiHandler };
 800053a:	4a1a      	ldr	r2, [pc, #104]	@ (80005a4 <main+0x70>)
 800053c:	463b      	mov	r3, r7
 800053e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000542:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 facd 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f835 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f89f 	bl	8000690 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000552:	f002 fc65 	bl	8002e20 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  httpd_init();
 8000556:	f003 ffa7 	bl	80044a8 <httpd_init>
  http_set_cgi_handlers(&LED_CGI, 1);
 800055a:	463b      	mov	r3, r7
 800055c:	2101      	movs	r1, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f003 ffee 	bl	8004540 <http_set_cgi_handlers>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000564:	f002 fd82 	bl	800306c <MX_LWIP_Process>

	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GreenLED );     //Green LED
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <main+0x74>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000574:	480d      	ldr	r0, [pc, #52]	@ (80005ac <main+0x78>)
 8000576:	f001 ff1f 	bl	80023b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, BlueLED );      //Blue LED
 800057a:	4b0d      	ldr	r3, [pc, #52]	@ (80005b0 <main+0x7c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000586:	4809      	ldr	r0, [pc, #36]	@ (80005ac <main+0x78>)
 8000588:	f001 ff16 	bl	80023b8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, RedLED );      //Red LED
 800058c:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <main+0x80>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000598:	4804      	ldr	r0, [pc, #16]	@ (80005ac <main+0x78>)
 800059a:	f001 ff0d 	bl	80023b8 <HAL_GPIO_WritePin>
	  MX_LWIP_Process();
 800059e:	bf00      	nop
 80005a0:	e7e0      	b.n	8000564 <main+0x30>
 80005a2:	bf00      	nop
 80005a4:	0800e8b4 	.word	0x0800e8b4
 80005a8:	20000088 	.word	0x20000088
 80005ac:	40011000 	.word	0x40011000
 80005b0:	2000008c 	.word	0x2000008c
 80005b4:	20000090 	.word	0x20000090

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	2238      	movs	r2, #56	@ 0x38
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00d fb17 	bl	800dbfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80005e4:	2304      	movs	r3, #4
 80005e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80005ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005fc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000600:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000602:	2302      	movs	r3, #2
 8000604:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000606:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800060a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800060c:	2340      	movs	r3, #64	@ 0x40
 800060e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fee7 	bl	80023e8 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000620:	f000 f924 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f002 f9e8 	bl	8002a14 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800064a:	f000 f90f 	bl	800086c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 800064e:	2200      	movs	r2, #0
 8000650:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 8000654:	2000      	movs	r0, #0
 8000656:	f002 fac7 	bl	8002be8 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <SystemClock_Config+0xd0>)
 800065c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000662:	4a09      	ldr	r2, [pc, #36]	@ (8000688 <SystemClock_Config+0xd0>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000668:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 800066a:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <SystemClock_Config+0xd0>)
 800066c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000672:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <SystemClock_Config+0xd0>)
 8000674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000678:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800067a:	4b04      	ldr	r3, [pc, #16]	@ (800068c <SystemClock_Config+0xd4>)
 800067c:	2201      	movs	r2, #1
 800067e:	601a      	str	r2, [r3, #0]
}
 8000680:	bf00      	nop
 8000682:	3750      	adds	r7, #80	@ 0x50
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	42420070 	.word	0x42420070

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a29      	ldr	r2, [pc, #164]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a23      	ldr	r2, [pc, #140]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ec:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a17      	ldr	r2, [pc, #92]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006f2:	f043 0320 	orr.w	r3, r3, #32
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_GPIO_Init+0xc0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0320 	and.w	r3, r3, #32
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800070a:	4812      	ldr	r0, [pc, #72]	@ (8000754 <MX_GPIO_Init+0xc4>)
 800070c:	f001 fe54 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8000710:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2302      	movs	r3, #2
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	4619      	mov	r1, r3
 8000728:	480a      	ldr	r0, [pc, #40]	@ (8000754 <MX_GPIO_Init+0xc4>)
 800072a:	f001 fcc1 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800072e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000738:	2301      	movs	r3, #1
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_GPIO_Init+0xc8>)
 8000744:	f001 fcb4 	bl	80020b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	40011000 	.word	0x40011000
 8000758:	40010800 	.word	0x40010800

0800075c <LedControlCgiHandler>:

/* USER CODE BEGIN 4 */
const char *LedControlCgiHandler(int index, int numParams, char *pcParam[], char *pcValue[])
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	603b      	str	r3, [r7, #0]
  if(index == 0)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d168      	bne.n	8000842 <LedControlCgiHandler+0xe6>
  {
    for(int i=0; i < numParams; i++)
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	e061      	b.n	800083a <LedControlCgiHandler+0xde>
    {
      if(strcmp(pcParam[i], "green") == 0)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4932      	ldr	r1, [pc, #200]	@ (800084c <LedControlCgiHandler+0xf0>)
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fd4e 	bl	8000224 <strcmp>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d113      	bne.n	80007b6 <LedControlCgiHandler+0x5a>
      {
        if(strcmp(pcValue[i], "ON") == 0)
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	4413      	add	r3, r2
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	492d      	ldr	r1, [pc, #180]	@ (8000850 <LedControlCgiHandler+0xf4>)
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fd42 	bl	8000224 <strcmp>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d103      	bne.n	80007ae <LedControlCgiHandler+0x52>
        {
          GreenLED = 1;
 80007a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000854 <LedControlCgiHandler+0xf8>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	e042      	b.n	8000834 <LedControlCgiHandler+0xd8>
        }
        else
        {
          GreenLED = 0;
 80007ae:	4b29      	ldr	r3, [pc, #164]	@ (8000854 <LedControlCgiHandler+0xf8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	e03e      	b.n	8000834 <LedControlCgiHandler+0xd8>
        }
      }
      else if(strcmp(pcParam[i], "blue") == 0)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4925      	ldr	r1, [pc, #148]	@ (8000858 <LedControlCgiHandler+0xfc>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fd2e 	bl	8000224 <strcmp>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d113      	bne.n	80007f6 <LedControlCgiHandler+0x9a>
      {
        if(strcmp(pcValue[i], "ON") == 0)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	4413      	add	r3, r2
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	491d      	ldr	r1, [pc, #116]	@ (8000850 <LedControlCgiHandler+0xf4>)
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fd22 	bl	8000224 <strcmp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d103      	bne.n	80007ee <LedControlCgiHandler+0x92>
        {
          BlueLED = 1;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <LedControlCgiHandler+0x100>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	e022      	b.n	8000834 <LedControlCgiHandler+0xd8>
        }
        else
        {
          BlueLED = 0;
 80007ee:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <LedControlCgiHandler+0x100>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	e01e      	b.n	8000834 <LedControlCgiHandler+0xd8>
        }
      }
      else if(strcmp(pcParam[i], "red") == 0)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4917      	ldr	r1, [pc, #92]	@ (8000860 <LedControlCgiHandler+0x104>)
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fd0e 	bl	8000224 <strcmp>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d112      	bne.n	8000834 <LedControlCgiHandler+0xd8>
      {
        if(strcmp(pcValue[i], "ON") == 0)
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	683a      	ldr	r2, [r7, #0]
 8000814:	4413      	add	r3, r2
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	490d      	ldr	r1, [pc, #52]	@ (8000850 <LedControlCgiHandler+0xf4>)
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fd02 	bl	8000224 <strcmp>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d103      	bne.n	800082e <LedControlCgiHandler+0xd2>
        {
          RedLED = 1;
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <LedControlCgiHandler+0x108>)
 8000828:	2201      	movs	r2, #1
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	e002      	b.n	8000834 <LedControlCgiHandler+0xd8>
        }
        else
        {
          RedLED = 0;
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <LedControlCgiHandler+0x108>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
    for(int i=0; i < numParams; i++)
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	3301      	adds	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	429a      	cmp	r2, r3
 8000840:	db99      	blt.n	8000776 <LedControlCgiHandler+0x1a>
        }
      }
    }
  }
  return "/index.html";
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <LedControlCgiHandler+0x10c>)
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	0800e8bc 	.word	0x0800e8bc
 8000850:	0800e8c4 	.word	0x0800e8c4
 8000854:	20000088 	.word	0x20000088
 8000858:	0800e8c8 	.word	0x0800e8c8
 800085c:	2000008c 	.word	0x2000008c
 8000860:	0800e8d0 	.word	0x0800e8d0
 8000864:	20000090 	.word	0x20000090
 8000868:	0800e8d4 	.word	0x0800e8d4

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <Error_Handler+0x8>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <HAL_MspInit+0x5c>)
 8000880:	699b      	ldr	r3, [r3, #24]
 8000882:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <HAL_MspInit+0x5c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6193      	str	r3, [r2, #24]
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_MspInit+0x5c>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <HAL_MspInit+0x5c>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a0e      	ldr	r2, [pc, #56]	@ (80008d4 <HAL_MspInit+0x5c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a0:	61d3      	str	r3, [r2, #28]
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <HAL_MspInit+0x5c>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <HAL_MspInit+0x60>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_MspInit+0x60>)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010000 	.word	0x40010000

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <NMI_Handler+0x4>

080008e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <MemManage_Handler+0x4>

080008f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <UsageFault_Handler+0x4>

08000904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f920 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000938:	4802      	ldr	r0, [pc, #8]	@ (8000944 <ETH_IRQHandler+0x10>)
 800093a:	f000 fe10 	bl	800155e <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20004918 	.word	0x20004918

08000948 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	e00a      	b.n	8000970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800095a:	f3af 8000 	nop.w
 800095e:	4601      	mov	r1, r0
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	60ba      	str	r2, [r7, #8]
 8000966:	b2ca      	uxtb	r2, r1
 8000968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf0      	blt.n	800095a <_read+0x12>
  }

  return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e009      	b.n	80009a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4618      	mov	r0, r3
 800099e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dbf1      	blt.n	8000994 <_write+0x12>
  }
  return len;
 80009b0:	687b      	ldr	r3, [r7, #4]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <_close>:

int _close(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009e0:	605a      	str	r2, [r3, #4]
  return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <_isatty>:

int _isatty(int file)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr

08000a02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b085      	sub	sp, #20
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
	...

08000a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a24:	4a14      	ldr	r2, [pc, #80]	@ (8000a78 <_sbrk+0x5c>)
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <_sbrk+0x60>)
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a30:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <_sbrk+0x64>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <_sbrk+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d205      	bcs.n	8000a58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <_sbrk+0x6c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	e009      	b.n	8000a6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <_sbrk+0x64>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a06      	ldr	r2, [pc, #24]	@ (8000a80 <_sbrk+0x64>)
 8000a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	371c      	adds	r7, #28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20010000 	.word	0x20010000
 8000a7c:	00000400 	.word	0x00000400
 8000a80:	20000094 	.word	0x20000094
 8000a84:	200085b0 	.word	0x200085b0
 8000a88:	200085a0 	.word	0x200085a0

08000a8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a98:	f7ff fff8 	bl	8000a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a9c:	480b      	ldr	r0, [pc, #44]	@ (8000acc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a9e:	490c      	ldr	r1, [pc, #48]	@ (8000ad0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000aa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa4:	e002      	b.n	8000aac <LoopCopyDataInit>

08000aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aaa:	3304      	adds	r3, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab0:	d3f9      	bcc.n	8000aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab2:	4a09      	ldr	r2, [pc, #36]	@ (8000ad8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ab4:	4c09      	ldr	r4, [pc, #36]	@ (8000adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab8:	e001      	b.n	8000abe <LoopFillZerobss>

08000aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000abc:	3204      	adds	r2, #4

08000abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac0:	d3fb      	bcc.n	8000aba <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f00d f907 	bl	800dcd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac6:	f7ff fd35 	bl	8000534 <main>
  bx lr
 8000aca:	4770      	bx	lr
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ad4:	08011964 	.word	0x08011964
  ldr r2, =_sbss
 8000ad8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000adc:	200085b0 	.word	0x200085b0

08000ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_2_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_Init+0x28>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <HAL_Init+0x28>)
 8000aee:	f043 0310 	orr.w	r3, r3, #16
 8000af2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af4:	2003      	movs	r0, #3
 8000af6:	f000 f947 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afa:	200f      	movs	r0, #15
 8000afc:	f000 f808 	bl	8000b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff feba 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40022000 	.word	0x40022000

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <HAL_InitTick+0x54>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_InitTick+0x58>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f95f 	bl	8000df2 <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00e      	b.n	8000b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d80a      	bhi.n	8000b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 f927 	bl	8000d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b50:	4a06      	ldr	r2, [pc, #24]	@ (8000b6c <HAL_InitTick+0x5c>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000000 	.word	0x20000000
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <HAL_IncTick+0x1c>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <HAL_IncTick+0x20>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a03      	ldr	r2, [pc, #12]	@ (8000b90 <HAL_IncTick+0x20>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000098 	.word	0x20000098

08000b94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b02      	ldr	r3, [pc, #8]	@ (8000ba4 <HAL_GetTick+0x10>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000098 	.word	0x20000098

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff fff0 	bl	8000b94 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffe0 	bl	8000b94 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4906      	ldr	r1, [pc, #24]	@ (8000c88 <__NVIC_EnableIRQ+0x34>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	@ (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	@ (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	@ 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff90 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff2d 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db0:	f7ff ff42 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	6978      	ldr	r0, [r7, #20]
 8000dbc:	f7ff ff90 	bl	8000ce0 <NVIC_EncodePriority>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff5f 	bl	8000c8c <__NVIC_SetPriority>
}
 8000dce:	bf00      	nop
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff35 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ffa2 	bl	8000d44 <SysTick_Config>
 8000e00:	4603      	mov	r3, r0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000e1c:	4ba4      	ldr	r3, [pc, #656]	@ (80010b0 <HAL_ETH_Init+0x2a4>)
 8000e1e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e153      	b.n	80010da <HAL_ETH_Init+0x2ce>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d106      	bne.n	8000e4c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f002 f91c 	bl	8003084 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 8000e4c:	4b99      	ldr	r3, [pc, #612]	@ (80010b4 <HAL_ETH_Init+0x2a8>)
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	4a98      	ldr	r2, [pc, #608]	@ (80010b4 <HAL_ETH_Init+0x2a8>)
 8000e52:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000e56:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 8000e58:	4b96      	ldr	r3, [pc, #600]	@ (80010b4 <HAL_ETH_Init+0x2a8>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	4994      	ldr	r1, [pc, #592]	@ (80010b4 <HAL_ETH_Init+0x2a8>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6812      	ldr	r2, [r2, #0]
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000e7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e7e:	f7ff fe89 	bl	8000b94 <HAL_GetTick>
 8000e82:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e84:	e011      	b.n	8000eaa <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8000e86:	f7ff fe85 	bl	8000b94 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e94:	d909      	bls.n	8000eaa <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e117      	b.n	80010da <HAL_ETH_Init+0x2ce>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1e4      	bne.n	8000e86 <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f023 031c 	bic.w	r3, r3, #28
 8000eca:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000ecc:	f001 ff80 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8000ed0:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	4a78      	ldr	r2, [pc, #480]	@ (80010b8 <HAL_ETH_Init+0x2ac>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d908      	bls.n	8000eec <HAL_ETH_Init+0xe0>
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4a77      	ldr	r2, [pc, #476]	@ (80010bc <HAL_ETH_Init+0x2b0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d804      	bhi.n	8000eec <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f043 0308 	orr.w	r3, r3, #8
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	e00b      	b.n	8000f04 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	4a73      	ldr	r2, [pc, #460]	@ (80010bc <HAL_ETH_Init+0x2b0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d907      	bls.n	8000f04 <HAL_ETH_Init+0xf8>
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	4a6e      	ldr	r2, [pc, #440]	@ (80010b0 <HAL_ETH_Init+0x2a4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d203      	bcs.n	8000f04 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f043 030c 	orr.w	r3, r3, #12
 8000f02:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000f0c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f10:	2100      	movs	r1, #0
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 fc0a 	bl	800172c <HAL_ETH_WritePHYRegister>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00b      	beq.n	8000f36 <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000f22:	6939      	ldr	r1, [r7, #16]
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 fdbf 	bl	8001aa8 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e0d1      	b.n	80010da <HAL_ETH_Init+0x2ce>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000f36:	20ff      	movs	r0, #255	@ 0xff
 8000f38:	f7ff fe36 	bl	8000ba8 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 8096 	beq.w	8001072 <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f46:	f7ff fe25 	bl	8000b94 <HAL_GetTick>
 8000f4a:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	461a      	mov	r2, r3
 8000f52:	2101      	movs	r1, #1
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fb81 	bl	800165c <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8000f5a:	f7ff fe1b 	bl	8000b94 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d90f      	bls.n	8000f8c <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f70:	6939      	ldr	r1, [r7, #16]
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 fd98 	bl	8001aa8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e0a6      	b.n	80010da <HAL_ETH_Init+0x2ce>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0da      	beq.n	8000f4c <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000f96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 fbc5 	bl	800172c <HAL_ETH_WritePHYRegister>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00b      	beq.n	8000fc0 <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fac:	6939      	ldr	r1, [r7, #16]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fd7a 	bl	8001aa8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e08c      	b.n	80010da <HAL_ETH_Init+0x2ce>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fc0:	f7ff fde8 	bl	8000b94 <HAL_GetTick>
 8000fc4:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	461a      	mov	r2, r3
 8000fcc:	2101      	movs	r1, #1
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fb44 	bl	800165c <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000fd4:	f7ff fdde 	bl	8000b94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d90f      	bls.n	8001006 <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000fea:	6939      	ldr	r1, [r7, #16]
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 fd5b 	bl	8001aa8 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e069      	b.n	80010da <HAL_ETH_Init+0x2ce>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f003 0320 	and.w	r3, r3, #32
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0da      	beq.n	8000fc6 <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	461a      	mov	r2, r3
 8001016:	2110      	movs	r1, #16
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 fb1f 	bl	800165c <HAL_ETH_ReadPHYRegister>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00b      	beq.n	800103c <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001028:	6939      	ldr	r1, [r7, #16]
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fd3c 	bl	8001aa8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e04e      	b.n	80010da <HAL_ETH_Init+0x2ce>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	e002      	b.n	8001056 <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	e02f      	b.n	80010c8 <HAL_ETH_Init+0x2bc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	e02a      	b.n	80010c8 <HAL_ETH_Init+0x2bc>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	08db      	lsrs	r3, r3, #3
 8001078:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001082:	4313      	orrs	r3, r2
 8001084:	b29b      	uxth	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	2100      	movs	r1, #0
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 fb4e 	bl	800172c <HAL_ETH_WritePHYRegister>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d014      	beq.n	80010c0 <HAL_ETH_Init+0x2b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800109a:	6939      	ldr	r1, [r7, #16]
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fd03 	bl	8001aa8 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e015      	b.n	80010da <HAL_ETH_Init+0x2ce>
 80010ae:	bf00      	nop
 80010b0:	03938700 	.word	0x03938700
 80010b4:	40010000 	.word	0x40010000
 80010b8:	01312cff 	.word	0x01312cff
 80010bc:	02160ebf 	.word	0x02160ebf
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80010c0:	f640 70ff 	movw	r0, #4095	@ 0xfff
 80010c4:	f7ff fd70 	bl	8000ba8 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80010c8:	6939      	ldr	r1, [r7, #16]
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 fcec 	bl	8001aa8 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop

080010e4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d101      	bne.n	8001104 <HAL_ETH_DMATxDescListInit+0x20>
 8001100:	2302      	movs	r3, #2
 8001102:	e051      	b.n	80011a8 <HAL_ETH_DMATxDescListInit+0xc4>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2201      	movs	r2, #1
 8001108:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2202      	movs	r2, #2
 8001110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	e030      	b.n	8001182 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	4413      	add	r3, r2
 8001128:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001130:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001138:	fb02 f303 	mul.w	r3, r2, r3
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	4413      	add	r3, r2
 8001140:	461a      	mov	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d105      	bne.n	800115a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	3b01      	subs	r3, #1
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	429a      	cmp	r2, r3
 8001162:	d208      	bcs.n	8001176 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3301      	adds	r3, #1
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	4413      	add	r3, r2
 800116e:	461a      	mov	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	e002      	b.n	800117c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d3ca      	bcc.n	8001120 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001194:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	371c      	adds	r7, #28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_ETH_DMARxDescListInit+0x20>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e055      	b.n	800127e <HAL_ETH_DMARxDescListInit+0xcc>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2202      	movs	r2, #2
 80011de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e034      	b.n	8001258 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	4413      	add	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80011fe:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001206:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4413      	add	r3, r2
 8001216:	461a      	mov	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d105      	bne.n	8001230 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	429a      	cmp	r2, r3
 8001238:	d208      	bcs.n	800124c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	461a      	mov	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	e002      	b.n	8001252 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3c6      	bcc.n	80011ee <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800126a:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	371c      	adds	r7, #28
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <HAL_ETH_TransmitFrame+0x24>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e0cc      	b.n	8001446 <HAL_ETH_TransmitFrame+0x1be>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2202      	movs	r2, #2
 80012b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0b7      	b.n	8001446 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da09      	bge.n	80012f4 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2212      	movs	r2, #18
 80012e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e0a8      	b.n	8001446 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d915      	bls.n	800132a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	4a53      	ldr	r2, [pc, #332]	@ (8001450 <HAL_ETH_TransmitFrame+0x1c8>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	0a9b      	lsrs	r3, r3, #10
 8001308:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	4b50      	ldr	r3, [pc, #320]	@ (8001450 <HAL_ETH_TransmitFrame+0x1c8>)
 800130e:	fba3 1302 	umull	r1, r3, r3, r2
 8001312:	0a9b      	lsrs	r3, r3, #10
 8001314:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8001318:	fb01 f303 	mul.w	r3, r1, r3
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	e001      	b.n	800132e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d11c      	bne.n	800136e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8001342:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800134e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800135e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	461a      	mov	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800136c:	e04b      	b.n	8001406 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	e044      	b.n	80013fe <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001382:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d107      	bne.n	800139a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001394:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001398:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800139e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80013a2:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d116      	bne.n	80013dc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80013bc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	4a24      	ldr	r2, [pc, #144]	@ (8001454 <HAL_ETH_TransmitFrame+0x1cc>)
 80013c2:	fb03 f202 	mul.w	r2, r3, r2
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80013ce:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80013da:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013ea:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	3301      	adds	r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	429a      	cmp	r2, r3
 8001404:	d3b6      	bcc.n	8001374 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00d      	beq.n	8001434 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001420:	461a      	mov	r2, r3
 8001422:	2304      	movs	r3, #4
 8001424:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800142e:	461a      	mov	r2, r3
 8001430:	2300      	movs	r3, #0
 8001432:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr
 8001450:	ac02b00b 	.word	0xac02b00b
 8001454:	fffffa0c 	.word	0xfffffa0c

08001458 <HAL_ETH_GetReceivedFrame>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_ETH_GetReceivedFrame+0x1a>
 800146e:	2302      	movs	r3, #2
 8001470:	e070      	b.n	8001554 <HAL_ETH_GetReceivedFrame+0xfc>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2202      	movs	r2, #2
 800147e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db5a      	blt.n	8001542 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d030      	beq.n	80014fc <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d103      	bne.n	80014b4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	0c1b      	lsrs	r3, r3, #16
 80014c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014c8:	3b04      	subs	r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	461a      	mov	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	e02b      	b.n	8001554 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001506:	2b00      	cmp	r3, #0
 8001508:	d010      	beq.n	800152c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	461a      	mov	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
 800152a:	e00a      	b.n	8001542 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	461a      	mov	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001574:	2b40      	cmp	r3, #64	@ 0x40
 8001576:	d112      	bne.n	800159e <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f85d 	bl	8001638 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001586:	461a      	mov	r2, r3
 8001588:	2340      	movs	r3, #64	@ 0x40
 800158a:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800159c:	e01a      	b.n	80015d4 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d111      	bne.n	80015d4 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f838 	bl	8001626 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015be:	461a      	mov	r2, r3
 80015c0:	2301      	movs	r3, #1
 80015c2:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015dc:	461a      	mov	r2, r3
 80015de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015e2:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80015f6:	d112      	bne.n	800161e <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f826 	bl	800164a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001606:	461a      	mov	r2, r3
 8001608:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800160c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	460b      	mov	r3, r1
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b82      	cmp	r3, #130	@ 0x82
 800167c:	d101      	bne.n	8001682 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800167e:	2302      	movs	r3, #2
 8001680:	e050      	b.n	8001724 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2282      	movs	r2, #130	@ 0x82
 8001686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f003 031c 	and.w	r3, r3, #28
 8001698:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8a1b      	ldrh	r3, [r3, #16]
 800169e:	02db      	lsls	r3, r3, #11
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80016a8:	897b      	ldrh	r3, [r7, #10]
 80016aa:	019b      	lsls	r3, r3, #6
 80016ac:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f023 0302 	bic.w	r3, r3, #2
 80016bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016ce:	f7ff fa61 	bl	8000b94 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016d4:	e015      	b.n	8001702 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80016d6:	f7ff fa5d 	bl	8000b94 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e4:	d309      	bcc.n	80016fa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e014      	b.n	8001724 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1e4      	bne.n	80016d6 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	b29b      	uxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	460b      	mov	r3, r1
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b42      	cmp	r3, #66	@ 0x42
 800174c:	d101      	bne.n	8001752 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800174e:	2302      	movs	r3, #2
 8001750:	e04e      	b.n	80017f0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2242      	movs	r2, #66	@ 0x42
 8001756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 031c 	and.w	r3, r3, #28
 8001768:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8a1b      	ldrh	r3, [r3, #16]
 800176e:	02db      	lsls	r3, r3, #11
 8001770:	b29b      	uxth	r3, r3
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	4313      	orrs	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001778:	897b      	ldrh	r3, [r7, #10]
 800177a:	019b      	lsls	r3, r3, #6
 800177c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	4313      	orrs	r3, r2
 8001784:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a8:	f7ff f9f4 	bl	8000b94 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017ae:	e015      	b.n	80017dc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80017b0:	f7ff f9f0 	bl	8000b94 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017be:	d309      	bcc.n	80017d4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e00d      	b.n	80017f0 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1e4      	bne.n	80017b0 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_ETH_Start+0x16>
 800180a:	2302      	movs	r3, #2
 800180c:	e01f      	b.n	800184e <HAL_ETH_Start+0x56>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2202      	movs	r2, #2
 800181a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fb3a 	bl	8001e98 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 fb71 	bl	8001f0c <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fbfc 	bl	8002028 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 fba5 	bl	8001f80 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fbcc 	bl	8001fd4 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ETH_Stop+0x16>
 8001868:	2302      	movs	r3, #2
 800186a:	e01f      	b.n	80018ac <HAL_ETH_Stop+0x56>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2202      	movs	r2, #2
 8001878:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fb94 	bl	8001faa <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fbbb 	bl	8001ffe <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fb5c 	bl	8001f46 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fbca 	bl	8002028 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f000 fb1c 	bl	8001ed2 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_ETH_ConfigMAC+0x1c>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e0e4      	b.n	8001a9a <HAL_ETH_ConfigMAC+0x1e6>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80b1 	beq.w	8001a4a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa4 <HAL_ETH_ConfigMAC+0x1f0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001900:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001906:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 800190c:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001912:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001918:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 800191e:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001924:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 800192a:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001930:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001936:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 800193c:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 8001942:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff f924 	bl	8000ba8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001970:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8001976:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 800197c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 8001982:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8001988:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 800198e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800199a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800199c:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7ff f8fe 	bl	8000ba8 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019bc:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019c6:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80019d6:	4013      	ands	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019e4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 80019ea:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 80019f0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 80019f6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 80019fc:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a14:	2001      	movs	r0, #1
 8001a16:	f7ff f8c7 	bl	8000ba8 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff f8b4 	bl	8000ba8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	61da      	str	r2, [r3, #28]
 8001a48:	e01e      	b.n	8001a88 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001a58:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f7ff f894 	bl	8000ba8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	ff20810f 	.word	0xff20810f

08001aa8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0b0      	sub	sp, #192	@ 0xc0
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ac4:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001acc:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001af2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001af4:	e001      	b.n	8001afa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001afa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001afe:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b04:	2300      	movs	r3, #0
 8001b06:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b14:	2340      	movs	r3, #64	@ 0x40
 8001b16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001b80:	4ba8      	ldr	r3, [pc, #672]	@ (8001e24 <ETH_MACDMAConfig+0x37c>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001b88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8001b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001b8c:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 8001b90:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 8001b94:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001b9a:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001b9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 8001b9e:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001ba0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 8001ba2:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001ba8:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001baa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8001bac:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001bae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8001bb0:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001bb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 8001bb4:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001bb8:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001bba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 8001bbc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001bbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001bd0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7fe ffe3 	bl	8000ba8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001bea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001bec:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8001bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001bf0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001bf2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8001bf4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8001bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8001bfa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 8001c00:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8001c06:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c10:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c18:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001c1a:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7fe ffbe 	bl	8000ba8 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001c34:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c3e:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001c48:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001c58:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001c62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001c66:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001c6c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8001c72:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8001c78:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 8001c7e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8001c84:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001c86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001c98:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7fe ff7f 	bl	8000ba8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001cb2:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001cb4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 8001cb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7fe ff6a 	bl	8000ba8 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001cdc:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ce6:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001cec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cf0:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d02:	2304      	movs	r3, #4
 8001d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d16:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d38:	4b3b      	ldr	r3, [pc, #236]	@ (8001e28 <ETH_MACDMAConfig+0x380>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001d40:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 8001d42:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001d44:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8001d46:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 8001d48:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8001d4a:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 8001d4c:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8001d4e:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 8001d50:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8001d52:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 8001d54:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardErrorFrames |
 8001d58:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8001d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 8001d5c:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8001d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                        dmainit.ReceiveThresholdControl |
 8001d60:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001d62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d74:	461a      	mov	r2, r3
 8001d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d7a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f7fe ff0c 	bl	8000ba8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001d9e:	6193      	str	r3, [r2, #24]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
                                        dmainit.FixedBurst |
 8001da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001da4:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.FixedBurst |
 8001da8:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8001daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001dac:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001db0:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 8001db2:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8001db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001db6:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001dc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dc4:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7fe fee7 	bl	8000ba8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de2:	461a      	mov	r2, r3
 8001de4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001de8:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10d      	bne.n	8001e0e <ETH_MACDMAConfig+0x366>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e0c:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	461a      	mov	r2, r3
 8001e14:	2100      	movs	r1, #0
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f808 	bl	8001e2c <ETH_MACAddressConfig>
}
 8001e1c:	bf00      	nop
 8001e1e:	37c0      	adds	r7, #192	@ 0xc0
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	ff20810f 	.word	0xff20810f
 8001e28:	f8de3f23 	.word	0xf8de3f23

08001e2c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3305      	adds	r3, #5
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	3204      	adds	r2, #4
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <ETH_MACAddressConfig+0x64>)
 8001e4e:	4413      	add	r3, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061a      	lsls	r2, r3, #24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3302      	adds	r3, #2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4313      	orrs	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <ETH_MACAddressConfig+0x68>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	6013      	str	r3, [r2, #0]
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	40028040 	.word	0x40028040
 8001e94:	40028044 	.word	0x40028044

08001e98 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0208 	orr.w	r2, r2, #8
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f000 f8d9 	bl	8002074 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	601a      	str	r2, [r3, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0208 	bic.w	r2, r2, #8
 8001eec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f000 f8bc 	bl	8002074 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	601a      	str	r2, [r3, #0]
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0204 	orr.w	r2, r2, #4
 8001f26:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f000 f89f 	bl	8002074 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	601a      	str	r2, [r3, #0]
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0204 	bic.w	r2, r2, #4
 8001f60:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f000 f882 	bl	8002074 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	601a      	str	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f9e:	6193      	str	r3, [r2, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001fc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fc8:	6193      	str	r3, [r2, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ff2:	6193      	str	r3, [r2, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr

08001ffe <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	f023 0302 	bic.w	r3, r3, #2
 8002018:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800201c:	6193      	str	r3, [r2, #24]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002046:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800204a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002058:	2001      	movs	r0, #1
 800205a:	f000 f80b 	bl	8002074 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002068:	6193      	str	r3, [r2, #24]
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <ETH_Delay+0x34>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <ETH_Delay+0x38>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a5b      	lsrs	r3, r3, #9
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002090:	bf00      	nop
  }
  while (Delay --);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1e5a      	subs	r2, r3, #1
 8002096:	60fa      	str	r2, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <ETH_Delay+0x1c>
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	20000000 	.word	0x20000000
 80020ac:	10624dd3 	.word	0x10624dd3

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b08b      	sub	sp, #44	@ 0x2c
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c2:	e169      	b.n	8002398 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020c4:	2201      	movs	r2, #1
 80020c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	429a      	cmp	r2, r3
 80020de:	f040 8158 	bne.w	8002392 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a9a      	ldr	r2, [pc, #616]	@ (8002350 <HAL_GPIO_Init+0x2a0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d05e      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 80020ec:	4a98      	ldr	r2, [pc, #608]	@ (8002350 <HAL_GPIO_Init+0x2a0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d875      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 80020f2:	4a98      	ldr	r2, [pc, #608]	@ (8002354 <HAL_GPIO_Init+0x2a4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d058      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 80020f8:	4a96      	ldr	r2, [pc, #600]	@ (8002354 <HAL_GPIO_Init+0x2a4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d86f      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 80020fe:	4a96      	ldr	r2, [pc, #600]	@ (8002358 <HAL_GPIO_Init+0x2a8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d052      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 8002104:	4a94      	ldr	r2, [pc, #592]	@ (8002358 <HAL_GPIO_Init+0x2a8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d869      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 800210a:	4a94      	ldr	r2, [pc, #592]	@ (800235c <HAL_GPIO_Init+0x2ac>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d04c      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 8002110:	4a92      	ldr	r2, [pc, #584]	@ (800235c <HAL_GPIO_Init+0x2ac>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d863      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 8002116:	4a92      	ldr	r2, [pc, #584]	@ (8002360 <HAL_GPIO_Init+0x2b0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d046      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
 800211c:	4a90      	ldr	r2, [pc, #576]	@ (8002360 <HAL_GPIO_Init+0x2b0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d85d      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 8002122:	2b12      	cmp	r3, #18
 8002124:	d82a      	bhi.n	800217c <HAL_GPIO_Init+0xcc>
 8002126:	2b12      	cmp	r3, #18
 8002128:	d859      	bhi.n	80021de <HAL_GPIO_Init+0x12e>
 800212a:	a201      	add	r2, pc, #4	@ (adr r2, 8002130 <HAL_GPIO_Init+0x80>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	080021ab 	.word	0x080021ab
 8002134:	08002185 	.word	0x08002185
 8002138:	08002197 	.word	0x08002197
 800213c:	080021d9 	.word	0x080021d9
 8002140:	080021df 	.word	0x080021df
 8002144:	080021df 	.word	0x080021df
 8002148:	080021df 	.word	0x080021df
 800214c:	080021df 	.word	0x080021df
 8002150:	080021df 	.word	0x080021df
 8002154:	080021df 	.word	0x080021df
 8002158:	080021df 	.word	0x080021df
 800215c:	080021df 	.word	0x080021df
 8002160:	080021df 	.word	0x080021df
 8002164:	080021df 	.word	0x080021df
 8002168:	080021df 	.word	0x080021df
 800216c:	080021df 	.word	0x080021df
 8002170:	080021df 	.word	0x080021df
 8002174:	0800218d 	.word	0x0800218d
 8002178:	080021a1 	.word	0x080021a1
 800217c:	4a79      	ldr	r2, [pc, #484]	@ (8002364 <HAL_GPIO_Init+0x2b4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002182:	e02c      	b.n	80021de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	623b      	str	r3, [r7, #32]
          break;
 800218a:	e029      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	3304      	adds	r3, #4
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e024      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	3308      	adds	r3, #8
 800219c:	623b      	str	r3, [r7, #32]
          break;
 800219e:	e01f      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	330c      	adds	r3, #12
 80021a6:	623b      	str	r3, [r7, #32]
          break;
 80021a8:	e01a      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d102      	bne.n	80021b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021b2:	2304      	movs	r3, #4
 80021b4:	623b      	str	r3, [r7, #32]
          break;
 80021b6:	e013      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d105      	bne.n	80021cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c0:	2308      	movs	r3, #8
 80021c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	611a      	str	r2, [r3, #16]
          break;
 80021ca:	e009      	b.n	80021e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021cc:	2308      	movs	r3, #8
 80021ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	615a      	str	r2, [r3, #20]
          break;
 80021d6:	e003      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021d8:	2300      	movs	r3, #0
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x130>
          break;
 80021de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	2bff      	cmp	r3, #255	@ 0xff
 80021e4:	d801      	bhi.n	80021ea <HAL_GPIO_Init+0x13a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	e001      	b.n	80021ee <HAL_GPIO_Init+0x13e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3304      	adds	r3, #4
 80021ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2bff      	cmp	r3, #255	@ 0xff
 80021f4:	d802      	bhi.n	80021fc <HAL_GPIO_Init+0x14c>
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	e002      	b.n	8002202 <HAL_GPIO_Init+0x152>
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	3b08      	subs	r3, #8
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	210f      	movs	r1, #15
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	401a      	ands	r2, r3
 8002214:	6a39      	ldr	r1, [r7, #32]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	431a      	orrs	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80b1 	beq.w	8002392 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002230:	4b4d      	ldr	r3, [pc, #308]	@ (8002368 <HAL_GPIO_Init+0x2b8>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a4c      	ldr	r2, [pc, #304]	@ (8002368 <HAL_GPIO_Init+0x2b8>)
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b4a      	ldr	r3, [pc, #296]	@ (8002368 <HAL_GPIO_Init+0x2b8>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002248:	4a48      	ldr	r2, [pc, #288]	@ (800236c <HAL_GPIO_Init+0x2bc>)
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002254:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a40      	ldr	r2, [pc, #256]	@ (8002370 <HAL_GPIO_Init+0x2c0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <HAL_GPIO_Init+0x1ec>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3f      	ldr	r2, [pc, #252]	@ (8002374 <HAL_GPIO_Init+0x2c4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00d      	beq.n	8002298 <HAL_GPIO_Init+0x1e8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3e      	ldr	r2, [pc, #248]	@ (8002378 <HAL_GPIO_Init+0x2c8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <HAL_GPIO_Init+0x1e4>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3d      	ldr	r2, [pc, #244]	@ (800237c <HAL_GPIO_Init+0x2cc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_GPIO_Init+0x1e0>
 800228c:	2303      	movs	r3, #3
 800228e:	e006      	b.n	800229e <HAL_GPIO_Init+0x1ee>
 8002290:	2304      	movs	r3, #4
 8002292:	e004      	b.n	800229e <HAL_GPIO_Init+0x1ee>
 8002294:	2302      	movs	r3, #2
 8002296:	e002      	b.n	800229e <HAL_GPIO_Init+0x1ee>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_GPIO_Init+0x1ee>
 800229c:	2300      	movs	r3, #0
 800229e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a0:	f002 0203 	and.w	r2, r2, #3
 80022a4:	0092      	lsls	r2, r2, #2
 80022a6:	4093      	lsls	r3, r2
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ae:	492f      	ldr	r1, [pc, #188]	@ (800236c <HAL_GPIO_Init+0x2bc>)
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	492c      	ldr	r1, [pc, #176]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	43db      	mvns	r3, r3
 80022de:	4928      	ldr	r1, [pc, #160]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022f0:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	4922      	ldr	r1, [pc, #136]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	43db      	mvns	r3, r3
 8002306:	491e      	ldr	r1, [pc, #120]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002308:	4013      	ands	r3, r2
 800230a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002318:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4918      	ldr	r1, [pc, #96]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002326:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	43db      	mvns	r3, r3
 800232e:	4914      	ldr	r1, [pc, #80]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002330:	4013      	ands	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d021      	beq.n	8002384 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	490e      	ldr	r1, [pc, #56]	@ (8002380 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
 800234c:	e021      	b.n	8002392 <HAL_GPIO_Init+0x2e2>
 800234e:	bf00      	nop
 8002350:	10320000 	.word	0x10320000
 8002354:	10310000 	.word	0x10310000
 8002358:	10220000 	.word	0x10220000
 800235c:	10210000 	.word	0x10210000
 8002360:	10120000 	.word	0x10120000
 8002364:	10110000 	.word	0x10110000
 8002368:	40021000 	.word	0x40021000
 800236c:	40010000 	.word	0x40010000
 8002370:	40010800 	.word	0x40010800
 8002374:	40010c00 	.word	0x40010c00
 8002378:	40011000 	.word	0x40011000
 800237c:	40011400 	.word	0x40011400
 8002380:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	43db      	mvns	r3, r3
 800238c:	4909      	ldr	r1, [pc, #36]	@ (80023b4 <HAL_GPIO_Init+0x304>)
 800238e:	4013      	ands	r3, r2
 8002390:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	3301      	adds	r3, #1
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f47f ae8e 	bne.w	80020c4 <HAL_GPIO_Init+0x14>
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	372c      	adds	r7, #44	@ 0x2c
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	40010400 	.word	0x40010400

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023d4:	e003      	b.n	80023de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e304      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8087 	beq.w	8002516 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002408:	4b92      	ldr	r3, [pc, #584]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b04      	cmp	r3, #4
 8002412:	d00c      	beq.n	800242e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002414:	4b8f      	ldr	r3, [pc, #572]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d112      	bne.n	8002446 <HAL_RCC_OscConfig+0x5e>
 8002420:	4b8c      	ldr	r3, [pc, #560]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800242c:	d10b      	bne.n	8002446 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242e:	4b89      	ldr	r3, [pc, #548]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d06c      	beq.n	8002514 <HAL_RCC_OscConfig+0x12c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d168      	bne.n	8002514 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e2de      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x76>
 8002450:	4b80      	ldr	r3, [pc, #512]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a7f      	ldr	r2, [pc, #508]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e02e      	b.n	80024bc <HAL_RCC_OscConfig+0xd4>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x98>
 8002466:	4b7b      	ldr	r3, [pc, #492]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a7a      	ldr	r2, [pc, #488]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b78      	ldr	r3, [pc, #480]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a77      	ldr	r2, [pc, #476]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e01d      	b.n	80024bc <HAL_RCC_OscConfig+0xd4>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002488:	d10c      	bne.n	80024a4 <HAL_RCC_OscConfig+0xbc>
 800248a:	4b72      	ldr	r3, [pc, #456]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a71      	ldr	r2, [pc, #452]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b6f      	ldr	r3, [pc, #444]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6e      	ldr	r2, [pc, #440]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e00b      	b.n	80024bc <HAL_RCC_OscConfig+0xd4>
 80024a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	4b68      	ldr	r3, [pc, #416]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a67      	ldr	r2, [pc, #412]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fb66 	bl	8000b94 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fb62 	bl	8000b94 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	@ 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e292      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b5d      	ldr	r3, [pc, #372]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f0      	beq.n	80024cc <HAL_RCC_OscConfig+0xe4>
 80024ea:	e014      	b.n	8002516 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fb52 	bl	8000b94 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fb4e 	bl	8000b94 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	@ 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e27e      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	4b53      	ldr	r3, [pc, #332]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x10c>
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d063      	beq.n	80025ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002522:	4b4c      	ldr	r3, [pc, #304]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800252e:	4b49      	ldr	r3, [pc, #292]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b08      	cmp	r3, #8
 8002538:	d11c      	bne.n	8002574 <HAL_RCC_OscConfig+0x18c>
 800253a:	4b46      	ldr	r3, [pc, #280]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d116      	bne.n	8002574 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002546:	4b43      	ldr	r3, [pc, #268]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_RCC_OscConfig+0x176>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e252      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255e:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4939      	ldr	r1, [pc, #228]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 800256e:	4313      	orrs	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	e03a      	b.n	80025ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800257c:	4b36      	ldr	r3, [pc, #216]	@ (8002658 <HAL_RCC_OscConfig+0x270>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7fe fb07 	bl	8000b94 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258a:	f7fe fb03 	bl	8000b94 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e233      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	4b2d      	ldr	r3, [pc, #180]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4927      	ldr	r1, [pc, #156]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025be:	4b26      	ldr	r3, [pc, #152]	@ (8002658 <HAL_RCC_OscConfig+0x270>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fae6 	bl	8000b94 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025cc:	f7fe fae2 	bl	8000b94 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e212      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	4b1d      	ldr	r3, [pc, #116]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d03a      	beq.n	800266c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d019      	beq.n	8002632 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fe:	4b17      	ldr	r3, [pc, #92]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002604:	f7fe fac6 	bl	8000b94 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800260c:	f7fe fac2 	bl	8000b94 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e1f2      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <HAL_RCC_OscConfig+0x26c>)
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800262a:	2001      	movs	r0, #1
 800262c:	f000 fbda 	bl	8002de4 <RCC_Delay>
 8002630:	e01c      	b.n	800266c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002638:	f7fe faac 	bl	8000b94 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263e:	e00f      	b.n	8002660 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002640:	f7fe faa8 	bl	8000b94 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d908      	bls.n	8002660 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1d8      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000
 8002658:	42420000 	.word	0x42420000
 800265c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	4b9b      	ldr	r3, [pc, #620]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1e9      	bne.n	8002640 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80a6 	beq.w	80027c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4b94      	ldr	r3, [pc, #592]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10d      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b91      	ldr	r3, [pc, #580]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	4a90      	ldr	r2, [pc, #576]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002694:	61d3      	str	r3, [r2, #28]
 8002696:	4b8e      	ldr	r3, [pc, #568]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a6:	4b8b      	ldr	r3, [pc, #556]	@ (80028d4 <HAL_RCC_OscConfig+0x4ec>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d118      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026b2:	4b88      	ldr	r3, [pc, #544]	@ (80028d4 <HAL_RCC_OscConfig+0x4ec>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a87      	ldr	r2, [pc, #540]	@ (80028d4 <HAL_RCC_OscConfig+0x4ec>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026be:	f7fe fa69 	bl	8000b94 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7fe fa65 	bl	8000b94 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	@ 0x64
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e195      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	4b7e      	ldr	r3, [pc, #504]	@ (80028d4 <HAL_RCC_OscConfig+0x4ec>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x312>
 80026ec:	4b78      	ldr	r3, [pc, #480]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4a77      	ldr	r2, [pc, #476]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6213      	str	r3, [r2, #32]
 80026f8:	e02d      	b.n	8002756 <HAL_RCC_OscConfig+0x36e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x334>
 8002702:	4b73      	ldr	r3, [pc, #460]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	4a72      	ldr	r2, [pc, #456]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6213      	str	r3, [r2, #32]
 800270e:	4b70      	ldr	r3, [pc, #448]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a6f      	ldr	r2, [pc, #444]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	e01c      	b.n	8002756 <HAL_RCC_OscConfig+0x36e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b05      	cmp	r3, #5
 8002722:	d10c      	bne.n	800273e <HAL_RCC_OscConfig+0x356>
 8002724:	4b6a      	ldr	r3, [pc, #424]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4a69      	ldr	r2, [pc, #420]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	6213      	str	r3, [r2, #32]
 8002730:	4b67      	ldr	r3, [pc, #412]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a66      	ldr	r2, [pc, #408]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	e00b      	b.n	8002756 <HAL_RCC_OscConfig+0x36e>
 800273e:	4b64      	ldr	r3, [pc, #400]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4a63      	ldr	r2, [pc, #396]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6213      	str	r3, [r2, #32]
 800274a:	4b61      	ldr	r3, [pc, #388]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a60      	ldr	r2, [pc, #384]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d015      	beq.n	800278a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275e:	f7fe fa19 	bl	8000b94 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fa15 	bl	8000b94 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e143      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	4b54      	ldr	r3, [pc, #336]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ee      	beq.n	8002766 <HAL_RCC_OscConfig+0x37e>
 8002788:	e014      	b.n	80027b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7fe fa03 	bl	8000b94 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7fe f9ff 	bl	8000b94 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e12d      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	4b49      	ldr	r3, [pc, #292]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ee      	bne.n	8002792 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d105      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ba:	4b45      	ldr	r3, [pc, #276]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a44      	ldr	r2, [pc, #272]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 80027c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 808c 	beq.w	80028e8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80027d0:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027dc:	d10e      	bne.n	80027fc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80027de:	4b3c      	ldr	r3, [pc, #240]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d108      	bne.n	80027fc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80027ea:	4b39      	ldr	r3, [pc, #228]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 80027ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e103      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	2b02      	cmp	r3, #2
 8002802:	d14e      	bne.n	80028a2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002804:	4b32      	ldr	r3, [pc, #200]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d009      	beq.n	8002824 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002810:	4b2f      	ldr	r3, [pc, #188]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002814:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800281c:	429a      	cmp	r2, r3
 800281e:	d001      	beq.n	8002824 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0ef      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002824:	4b2c      	ldr	r3, [pc, #176]	@ (80028d8 <HAL_RCC_OscConfig+0x4f0>)
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe f9b3 	bl	8000b94 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002832:	f7fe f9af 	bl	8000b94 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b64      	cmp	r3, #100	@ 0x64
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0df      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002844:	4b22      	ldr	r3, [pc, #136]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002850:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285c:	491c      	ldr	r1, [pc, #112]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002862:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002866:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4918      	ldr	r1, [pc, #96]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002870:	4313      	orrs	r3, r2
 8002872:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002874:	4b18      	ldr	r3, [pc, #96]	@ (80028d8 <HAL_RCC_OscConfig+0x4f0>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe f98b 	bl	8000b94 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002882:	f7fe f987 	bl	8000b94 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	@ 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e0b7      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002894:	4b0e      	ldr	r3, [pc, #56]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x49a>
 80028a0:	e022      	b.n	80028e8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80028a2:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a6:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <HAL_RCC_OscConfig+0x4e8>)
 80028a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80028ae:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <HAL_RCC_OscConfig+0x4f0>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe f96e 	bl	8000b94 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80028ba:	e00f      	b.n	80028dc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80028bc:	f7fe f96a 	bl	8000b94 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	@ 0x64
 80028c8:	d908      	bls.n	80028dc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e09a      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
 80028d8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80028dc:	4b4b      	ldr	r3, [pc, #300]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e9      	bne.n	80028bc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8088 	beq.w	8002a02 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f2:	4b46      	ldr	r3, [pc, #280]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d068      	beq.n	80029d0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d14d      	bne.n	80029a2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b42      	ldr	r3, [pc, #264]	@ (8002a10 <HAL_RCC_OscConfig+0x628>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe f942 	bl	8000b94 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe f93e 	bl	8000b94 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e06e      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002926:	4b39      	ldr	r3, [pc, #228]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800293a:	d10f      	bne.n	800295c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800293c:	4b33      	ldr	r3, [pc, #204]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 800293e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4931      	ldr	r1, [pc, #196]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 8002946:	4313      	orrs	r3, r2
 8002948:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800294a:	4b30      	ldr	r3, [pc, #192]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	f023 020f 	bic.w	r2, r3, #15
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	492d      	ldr	r1, [pc, #180]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 8002958:	4313      	orrs	r3, r2
 800295a:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	430b      	orrs	r3, r1
 800296e:	4927      	ldr	r1, [pc, #156]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002974:	4b26      	ldr	r3, [pc, #152]	@ (8002a10 <HAL_RCC_OscConfig+0x628>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe f90b 	bl	8000b94 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7fe f907 	bl	8000b94 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e037      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002994:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x59a>
 80029a0:	e02f      	b.n	8002a02 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x628>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe f8f4 	bl	8000b94 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe f8f0 	bl	8000b94 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e020      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x5c8>
 80029ce:	e018      	b.n	8002a02 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e013      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	@ (8002a0c <HAL_RCC_OscConfig+0x624>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	42420060 	.word	0x42420060

08002a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0d0      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a28:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d910      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b67      	ldr	r3, [pc, #412]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 0207 	bic.w	r2, r3, #7
 8002a3e:	4965      	ldr	r1, [pc, #404]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b63      	ldr	r3, [pc, #396]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0b8      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a70:	4b59      	ldr	r3, [pc, #356]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a58      	ldr	r2, [pc, #352]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a88:	4b53      	ldr	r3, [pc, #332]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a52      	ldr	r2, [pc, #328]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b50      	ldr	r3, [pc, #320]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	494d      	ldr	r1, [pc, #308]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d040      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b47      	ldr	r3, [pc, #284]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d115      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e07f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	4b41      	ldr	r3, [pc, #260]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e073      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e06b      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af2:	4b39      	ldr	r3, [pc, #228]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4936      	ldr	r1, [pc, #216]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b04:	f7fe f846 	bl	8000b94 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7fe f842 	bl	8000b94 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e053      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 020c 	and.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1eb      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b34:	4b27      	ldr	r3, [pc, #156]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d210      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 0207 	bic.w	r2, r3, #7
 8002b4a:	4922      	ldr	r1, [pc, #136]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e032      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b19      	ldr	r3, [pc, #100]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4916      	ldr	r1, [pc, #88]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	490e      	ldr	r1, [pc, #56]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba2:	f000 f859 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	490a      	ldr	r1, [pc, #40]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	5ccb      	ldrb	r3, [r1, r3]
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	4a09      	ldr	r2, [pc, #36]	@ (8002be0 <HAL_RCC_ClockConfig+0x1cc>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_RCC_ClockConfig+0x1d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd ffa4 	bl	8000b10 <HAL_InitTick>

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40022000 	.word	0x40022000
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	080107d0 	.word	0x080107d0
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000004 	.word	0x20000004

08002be8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	@ 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002bf4:	f107 0318 	add.w	r3, r7, #24
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8002c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c12:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002c14:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <HAL_RCC_MCOConfig+0x68>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <HAL_RCC_MCOConfig+0x68>)
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	6193      	str	r3, [r2, #24]
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <HAL_RCC_MCOConfig+0x68>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002c2c:	f107 0318 	add.w	r3, r7, #24
 8002c30:	4619      	mov	r1, r3
 8002c32:	4808      	ldr	r0, [pc, #32]	@ (8002c54 <HAL_RCC_MCOConfig+0x6c>)
 8002c34:	f7ff fa3c 	bl	80020b0 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002c38:	4b05      	ldr	r3, [pc, #20]	@ (8002c50 <HAL_RCC_MCOConfig+0x68>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002c40:	4903      	ldr	r1, [pc, #12]	@ (8002c50 <HAL_RCC_MCOConfig+0x68>)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]
}
 8002c48:	bf00      	nop
 8002c4a:	3728      	adds	r7, #40	@ 0x28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010800 	.word	0x40010800

08002c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c5c:	b08e      	sub	sp, #56	@ 0x38
 8002c5e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c68:	2300      	movs	r3, #0
 8002c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c7c:	4b4e      	ldr	r3, [pc, #312]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d002      	beq.n	8002c92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d003      	beq.n	8002c98 <HAL_RCC_GetSysClockFreq+0x40>
 8002c90:	e089      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c92:	4b4a      	ldr	r3, [pc, #296]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x164>)
 8002c94:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002c96:	e089      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9a:	0c9b      	lsrs	r3, r3, #18
 8002c9c:	f003 020f 	and.w	r2, r3, #15
 8002ca0:	4b47      	ldr	r3, [pc, #284]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ca2:	5c9b      	ldrb	r3, [r3, r2]
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d072      	beq.n	8002d96 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002cb0:	4b41      	ldr	r3, [pc, #260]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	4b42      	ldr	r3, [pc, #264]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002cba:	5c9b      	ldrb	r3, [r3, r2]
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d053      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002cca:	4b3b      	ldr	r3, [pc, #236]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002cd8:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	469a      	mov	sl, r3
 8002cec:	4693      	mov	fp, r2
 8002cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	617a      	str	r2, [r7, #20]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	fb03 f20b 	mul.w	r2, r3, fp
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fb0a f303 	mul.w	r3, sl, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	fbaa 0102 	umull	r0, r1, sl, r2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x164>)
 8002d10:	fb03 f201 	mul.w	r2, r3, r1
 8002d14:	2300      	movs	r3, #0
 8002d16:	fb00 f303 	mul.w	r3, r0, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	4a27      	ldr	r2, [pc, #156]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x164>)
 8002d1e:	fba0 4502 	umull	r4, r5, r0, r2
 8002d22:	442b      	add	r3, r5
 8002d24:	461d      	mov	r5, r3
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
 8002d2c:	60fa      	str	r2, [r7, #12]
 8002d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d30:	2200      	movs	r2, #0
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d40:	4652      	mov	r2, sl
 8002d42:	fb02 f203 	mul.w	r2, r2, r3
 8002d46:	465b      	mov	r3, fp
 8002d48:	4684      	mov	ip, r0
 8002d4a:	fb0c f303 	mul.w	r3, ip, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	4602      	mov	r2, r0
 8002d52:	4651      	mov	r1, sl
 8002d54:	fba2 8901 	umull	r8, r9, r2, r1
 8002d58:	444b      	add	r3, r9
 8002d5a:	4699      	mov	r9, r3
 8002d5c:	4642      	mov	r2, r8
 8002d5e:	464b      	mov	r3, r9
 8002d60:	4620      	mov	r0, r4
 8002d62:	4629      	mov	r1, r5
 8002d64:	f7fd fa70 	bl	8000248 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d70:	e007      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x164>)
 8002d76:	fb03 f202 	mul.w	r2, r3, r2
 8002d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002d82:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002d84:	7b5b      	ldrb	r3, [r3, #13]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d108      	bne.n	8002da0 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d94:	e004      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x170>)
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8002da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002da4:	e002      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da6:	4b09      	ldr	r3, [pc, #36]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x174>)
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002daa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3738      	adds	r7, #56	@ 0x38
 8002db2:	46bd      	mov	sp, r7
 8002db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	017d7840 	.word	0x017d7840
 8002dc0:	080107e0 	.word	0x080107e0
 8002dc4:	080107f0 	.word	0x080107f0
 8002dc8:	003d0900 	.word	0x003d0900
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b02      	ldr	r3, [pc, #8]	@ (8002de0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	20000000 	.word	0x20000000

08002de4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dec:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <RCC_Delay+0x34>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e1c <RCC_Delay+0x38>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0a5b      	lsrs	r3, r3, #9
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e00:	bf00      	nop
  }
  while (Delay --);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	60fa      	str	r2, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f9      	bne.n	8002e00 <RCC_Delay+0x1c>
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	10624dd3 	.word	0x10624dd3

08002e20 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002e26:	4b87      	ldr	r3, [pc, #540]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002e28:	22c0      	movs	r2, #192	@ 0xc0
 8002e2a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002e2c:	4b85      	ldr	r3, [pc, #532]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002e2e:	22a8      	movs	r2, #168	@ 0xa8
 8002e30:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 31;
 8002e32:	4b84      	ldr	r3, [pc, #528]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002e34:	221f      	movs	r2, #31
 8002e36:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 201;
 8002e38:	4b82      	ldr	r3, [pc, #520]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002e3a:	22c9      	movs	r2, #201	@ 0xc9
 8002e3c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002e3e:	4b82      	ldr	r3, [pc, #520]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002e40:	22ff      	movs	r2, #255	@ 0xff
 8002e42:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002e44:	4b80      	ldr	r3, [pc, #512]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002e46:	22ff      	movs	r2, #255	@ 0xff
 8002e48:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002e4c:	22ff      	movs	r2, #255	@ 0xff
 8002e4e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002e50:	4b7d      	ldr	r3, [pc, #500]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002e56:	4b7d      	ldr	r3, [pc, #500]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002e58:	22c0      	movs	r2, #192	@ 0xc0
 8002e5a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002e5c:	4b7b      	ldr	r3, [pc, #492]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002e5e:	22a8      	movs	r2, #168	@ 0xa8
 8002e60:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 31;
 8002e62:	4b7a      	ldr	r3, [pc, #488]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002e64:	221f      	movs	r2, #31
 8002e66:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002e68:	4b78      	ldr	r3, [pc, #480]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8002e6e:	f001 fbf2 	bl	8004656 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002e72:	4b74      	ldr	r3, [pc, #464]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	061a      	lsls	r2, r3, #24
 8002e78:	4b72      	ldr	r3, [pc, #456]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4b70      	ldr	r3, [pc, #448]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002e82:	789b      	ldrb	r3, [r3, #2]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	4313      	orrs	r3, r2
 8002e88:	4a6e      	ldr	r2, [pc, #440]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002e8a:	78d2      	ldrb	r2, [r2, #3]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	061a      	lsls	r2, r3, #24
 8002e90:	4b6c      	ldr	r3, [pc, #432]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	0619      	lsls	r1, r3, #24
 8002e96:	4b6b      	ldr	r3, [pc, #428]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002e98:	785b      	ldrb	r3, [r3, #1]
 8002e9a:	041b      	lsls	r3, r3, #16
 8002e9c:	4319      	orrs	r1, r3
 8002e9e:	4b69      	ldr	r3, [pc, #420]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002ea0:	789b      	ldrb	r3, [r3, #2]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	4967      	ldr	r1, [pc, #412]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002ea8:	78c9      	ldrb	r1, [r1, #3]
 8002eaa:	430b      	orrs	r3, r1
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	4b63      	ldr	r3, [pc, #396]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	0619      	lsls	r1, r3, #24
 8002eba:	4b62      	ldr	r3, [pc, #392]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	4319      	orrs	r1, r3
 8002ec2:	4b60      	ldr	r3, [pc, #384]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002ec4:	789b      	ldrb	r3, [r3, #2]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	495e      	ldr	r1, [pc, #376]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002ecc:	78c9      	ldrb	r1, [r1, #3]
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	0619      	lsls	r1, r3, #24
 8002ede:	4b59      	ldr	r3, [pc, #356]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002ee0:	785b      	ldrb	r3, [r3, #1]
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	4319      	orrs	r1, r3
 8002ee6:	4b57      	ldr	r3, [pc, #348]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002ee8:	789b      	ldrb	r3, [r3, #2]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	430b      	orrs	r3, r1
 8002eee:	4955      	ldr	r1, [pc, #340]	@ (8003044 <MX_LWIP_Init+0x224>)
 8002ef0:	78c9      	ldrb	r1, [r1, #3]
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	0e1b      	lsrs	r3, r3, #24
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	4a55      	ldr	r2, [pc, #340]	@ (8003050 <MX_LWIP_Init+0x230>)
 8002efa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002efc:	4b52      	ldr	r3, [pc, #328]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	061a      	lsls	r2, r3, #24
 8002f02:	4b51      	ldr	r3, [pc, #324]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	041b      	lsls	r3, r3, #16
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f0c:	789b      	ldrb	r3, [r3, #2]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	4313      	orrs	r3, r2
 8002f12:	4a4d      	ldr	r2, [pc, #308]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f14:	78d2      	ldrb	r2, [r2, #3]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	061a      	lsls	r2, r3, #24
 8002f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	0619      	lsls	r1, r3, #24
 8002f20:	4b49      	ldr	r3, [pc, #292]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	4319      	orrs	r1, r3
 8002f28:	4b47      	ldr	r3, [pc, #284]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f2a:	789b      	ldrb	r3, [r3, #2]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	4945      	ldr	r1, [pc, #276]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f32:	78c9      	ldrb	r1, [r1, #3]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	4b42      	ldr	r3, [pc, #264]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	0619      	lsls	r1, r3, #24
 8002f44:	4b40      	ldr	r3, [pc, #256]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f46:	785b      	ldrb	r3, [r3, #1]
 8002f48:	041b      	lsls	r3, r3, #16
 8002f4a:	4319      	orrs	r1, r3
 8002f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f4e:	789b      	ldrb	r3, [r3, #2]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	430b      	orrs	r3, r1
 8002f54:	493c      	ldr	r1, [pc, #240]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f56:	78c9      	ldrb	r1, [r1, #3]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	0a1b      	lsrs	r3, r3, #8
 8002f5c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002f60:	431a      	orrs	r2, r3
 8002f62:	4b39      	ldr	r3, [pc, #228]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	0619      	lsls	r1, r3, #24
 8002f68:	4b37      	ldr	r3, [pc, #220]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	4319      	orrs	r1, r3
 8002f70:	4b35      	ldr	r3, [pc, #212]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f72:	789b      	ldrb	r3, [r3, #2]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	430b      	orrs	r3, r1
 8002f78:	4933      	ldr	r1, [pc, #204]	@ (8003048 <MX_LWIP_Init+0x228>)
 8002f7a:	78c9      	ldrb	r1, [r1, #3]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	0e1b      	lsrs	r3, r3, #24
 8002f80:	4313      	orrs	r3, r2
 8002f82:	4a34      	ldr	r2, [pc, #208]	@ (8003054 <MX_LWIP_Init+0x234>)
 8002f84:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002f86:	4b31      	ldr	r3, [pc, #196]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	061a      	lsls	r2, r3, #24
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002f8e:	785b      	ldrb	r3, [r3, #1]
 8002f90:	041b      	lsls	r3, r3, #16
 8002f92:	431a      	orrs	r2, r3
 8002f94:	4b2d      	ldr	r3, [pc, #180]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002f96:	789b      	ldrb	r3, [r3, #2]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002f9e:	78d2      	ldrb	r2, [r2, #3]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	061a      	lsls	r2, r3, #24
 8002fa4:	4b29      	ldr	r3, [pc, #164]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	0619      	lsls	r1, r3, #24
 8002faa:	4b28      	ldr	r3, [pc, #160]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	4319      	orrs	r1, r3
 8002fb2:	4b26      	ldr	r3, [pc, #152]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002fb4:	789b      	ldrb	r3, [r3, #2]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	4924      	ldr	r1, [pc, #144]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002fbc:	78c9      	ldrb	r1, [r1, #3]
 8002fbe:	430b      	orrs	r3, r1
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	4b20      	ldr	r3, [pc, #128]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	0619      	lsls	r1, r3, #24
 8002fce:	4b1f      	ldr	r3, [pc, #124]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002fd0:	785b      	ldrb	r3, [r3, #1]
 8002fd2:	041b      	lsls	r3, r3, #16
 8002fd4:	4319      	orrs	r1, r3
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002fd8:	789b      	ldrb	r3, [r3, #2]
 8002fda:	021b      	lsls	r3, r3, #8
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	491b      	ldr	r1, [pc, #108]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002fe0:	78c9      	ldrb	r1, [r1, #3]
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002fea:	431a      	orrs	r2, r3
 8002fec:	4b17      	ldr	r3, [pc, #92]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	0619      	lsls	r1, r3, #24
 8002ff2:	4b16      	ldr	r3, [pc, #88]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	4319      	orrs	r1, r3
 8002ffa:	4b14      	ldr	r3, [pc, #80]	@ (800304c <MX_LWIP_Init+0x22c>)
 8002ffc:	789b      	ldrb	r3, [r3, #2]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	430b      	orrs	r3, r1
 8003002:	4912      	ldr	r1, [pc, #72]	@ (800304c <MX_LWIP_Init+0x22c>)
 8003004:	78c9      	ldrb	r1, [r1, #3]
 8003006:	430b      	orrs	r3, r1
 8003008:	0e1b      	lsrs	r3, r3, #24
 800300a:	4313      	orrs	r3, r2
 800300c:	4a12      	ldr	r2, [pc, #72]	@ (8003058 <MX_LWIP_Init+0x238>)
 800300e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003010:	4b12      	ldr	r3, [pc, #72]	@ (800305c <MX_LWIP_Init+0x23c>)
 8003012:	9302      	str	r3, [sp, #8]
 8003014:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <MX_LWIP_Init+0x240>)
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	2300      	movs	r3, #0
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <MX_LWIP_Init+0x238>)
 800301e:	4a0d      	ldr	r2, [pc, #52]	@ (8003054 <MX_LWIP_Init+0x234>)
 8003020:	490b      	ldr	r1, [pc, #44]	@ (8003050 <MX_LWIP_Init+0x230>)
 8003022:	4810      	ldr	r0, [pc, #64]	@ (8003064 <MX_LWIP_Init+0x244>)
 8003024:	f001 ff16 	bl	8004e54 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003028:	480e      	ldr	r0, [pc, #56]	@ (8003064 <MX_LWIP_Init+0x244>)
 800302a:	f001 fff5 	bl	8005018 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800302e:	480d      	ldr	r0, [pc, #52]	@ (8003064 <MX_LWIP_Init+0x244>)
 8003030:	f002 f800 	bl	8005034 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003034:	490c      	ldr	r1, [pc, #48]	@ (8003068 <MX_LWIP_Init+0x248>)
 8003036:	480b      	ldr	r0, [pc, #44]	@ (8003064 <MX_LWIP_Init+0x244>)
 8003038:	f002 f840 	bl	80050bc <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	200000dc 	.word	0x200000dc
 8003048:	200000e0 	.word	0x200000e0
 800304c:	200000e4 	.word	0x200000e4
 8003050:	200000d0 	.word	0x200000d0
 8003054:	200000d4 	.word	0x200000d4
 8003058:	200000d8 	.word	0x200000d8
 800305c:	0800d7f1 	.word	0x0800d7f1
 8003060:	0800366d 	.word	0x0800366d
 8003064:	2000009c 	.word	0x2000009c
 8003068:	080036d9 	.word	0x080036d9

0800306c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003070:	4803      	ldr	r0, [pc, #12]	@ (8003080 <MX_LWIP_Process+0x14>)
 8003072:	f000 fadb 	bl	800362c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8003076:	f008 f91d 	bl	800b2b4 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	2000009c 	.word	0x2000009c

08003084 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08e      	sub	sp, #56	@ 0x38
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a58      	ldr	r2, [pc, #352]	@ (8003200 <HAL_ETH_MspInit+0x17c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f040 80a8 	bne.w	80031f6 <HAL_ETH_MspInit+0x172>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80030a6:	4b57      	ldr	r3, [pc, #348]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	4a56      	ldr	r2, [pc, #344]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b0:	6153      	str	r3, [r2, #20]
 80030b2:	4b54      	ldr	r3, [pc, #336]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ba:	623b      	str	r3, [r7, #32]
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	4b51      	ldr	r3, [pc, #324]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	4a50      	ldr	r2, [pc, #320]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c8:	6153      	str	r3, [r2, #20]
 80030ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030d2:	61fb      	str	r3, [r7, #28]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	4a4a      	ldr	r2, [pc, #296]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e0:	6153      	str	r3, [r2, #20]
 80030e2:	4b48      	ldr	r3, [pc, #288]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ee:	4b45      	ldr	r3, [pc, #276]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	4a44      	ldr	r2, [pc, #272]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030f4:	f043 0310 	orr.w	r3, r3, #16
 80030f8:	6193      	str	r3, [r2, #24]
 80030fa:	4b42      	ldr	r3, [pc, #264]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	4b3f      	ldr	r3, [pc, #252]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	4a3e      	ldr	r2, [pc, #248]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	6193      	str	r3, [r2, #24]
 8003112:	4b3c      	ldr	r3, [pc, #240]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311e:	4b39      	ldr	r3, [pc, #228]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	4a38      	ldr	r2, [pc, #224]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 8003124:	f043 0308 	orr.w	r3, r3, #8
 8003128:	6193      	str	r3, [r2, #24]
 800312a:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003136:	4b33      	ldr	r3, [pc, #204]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	4a32      	ldr	r2, [pc, #200]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 800313c:	f043 0320 	orr.w	r3, r3, #32
 8003140:	6193      	str	r3, [r2, #24]
 8003142:	4b30      	ldr	r3, [pc, #192]	@ (8003204 <HAL_ETH_MspInit+0x180>)
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> ETH_TXD1
    PD8     ------> ETH_CRS_DV
    PD9     ------> ETH_RXD0
    PD10     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800314e:	2302      	movs	r3, #2
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800315a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800315e:	4619      	mov	r1, r3
 8003160:	4829      	ldr	r0, [pc, #164]	@ (8003208 <HAL_ETH_MspInit+0x184>)
 8003162:	f7fe ffa5 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003166:	2302      	movs	r3, #2
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316a:	2300      	movs	r3, #0
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003176:	4619      	mov	r1, r3
 8003178:	4824      	ldr	r0, [pc, #144]	@ (800320c <HAL_ETH_MspInit+0x188>)
 800317a:	f7fe ff99 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800317e:	2304      	movs	r3, #4
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003186:	2303      	movs	r3, #3
 8003188:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800318e:	4619      	mov	r1, r3
 8003190:	481e      	ldr	r0, [pc, #120]	@ (800320c <HAL_ETH_MspInit+0x188>)
 8003192:	f7fe ff8d 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003196:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031a0:	2303      	movs	r3, #3
 80031a2:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031a8:	4619      	mov	r1, r3
 80031aa:	4819      	ldr	r0, [pc, #100]	@ (8003210 <HAL_ETH_MspInit+0x18c>)
 80031ac:	f7fe ff80 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80031b0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031c2:	4619      	mov	r1, r3
 80031c4:	4813      	ldr	r0, [pc, #76]	@ (8003214 <HAL_ETH_MspInit+0x190>)
 80031c6:	f7fe ff73 	bl	80020b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_ETH_ENABLE();
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <HAL_ETH_MspInit+0x194>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031de:	637b      	str	r3, [r7, #52]	@ 0x34
 80031e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003218 <HAL_ETH_MspInit+0x194>)
 80031e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e4:	6053      	str	r3, [r2, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2100      	movs	r1, #0
 80031ea:	203d      	movs	r0, #61	@ 0x3d
 80031ec:	f7fd fdd7 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80031f0:	203d      	movs	r0, #61	@ 0x3d
 80031f2:	f7fd fdf0 	bl	8000dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80031f6:	bf00      	nop
 80031f8:	3738      	adds	r7, #56	@ 0x38
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40028000 	.word	0x40028000
 8003204:	40021000 	.word	0x40021000
 8003208:	40011000 	.word	0x40011000
 800320c:	40010800 	.word	0x40010800
 8003210:	40010c00 	.word	0x40010c00
 8003214:	40011400 	.word	0x40011400
 8003218:	40010000 	.word	0x40010000

0800321c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003228:	4b52      	ldr	r3, [pc, #328]	@ (8003374 <low_level_init+0x158>)
 800322a:	4a53      	ldr	r2, [pc, #332]	@ (8003378 <low_level_init+0x15c>)
 800322c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800322e:	4b51      	ldr	r3, [pc, #324]	@ (8003374 <low_level_init+0x158>)
 8003230:	2201      	movs	r2, #1
 8003232:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003234:	4b4f      	ldr	r3, [pc, #316]	@ (8003374 <low_level_init+0x158>)
 8003236:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800323a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800323c:	4b4d      	ldr	r3, [pc, #308]	@ (8003374 <low_level_init+0x158>)
 800323e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003242:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8003244:	4b4b      	ldr	r3, [pc, #300]	@ (8003374 <low_level_init+0x158>)
 8003246:	2201      	movs	r2, #1
 8003248:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800324a:	2300      	movs	r3, #0
 800324c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800324e:	2380      	movs	r3, #128	@ 0x80
 8003250:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003252:	23e1      	movs	r3, #225	@ 0xe1
 8003254:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003256:	2300      	movs	r3, #0
 8003258:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800325a:	2300      	movs	r3, #0
 800325c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800325e:	2300      	movs	r3, #0
 8003260:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003262:	4a44      	ldr	r2, [pc, #272]	@ (8003374 <low_level_init+0x158>)
 8003264:	f107 0308 	add.w	r3, r7, #8
 8003268:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800326a:	4b42      	ldr	r3, [pc, #264]	@ (8003374 <low_level_init+0x158>)
 800326c:	2200      	movs	r2, #0
 800326e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003270:	4b40      	ldr	r3, [pc, #256]	@ (8003374 <low_level_init+0x158>)
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003276:	4b3f      	ldr	r3, [pc, #252]	@ (8003374 <low_level_init+0x158>)
 8003278:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800327c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800327e:	483d      	ldr	r0, [pc, #244]	@ (8003374 <low_level_init+0x158>)
 8003280:	f7fd fdc4 	bl	8000e0c <HAL_ETH_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003288:	7dfb      	ldrb	r3, [r7, #23]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d108      	bne.n	80032a0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003294:	f043 0304 	orr.w	r3, r3, #4
 8003298:	b2da      	uxtb	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80032a0:	2304      	movs	r3, #4
 80032a2:	4a36      	ldr	r2, [pc, #216]	@ (800337c <low_level_init+0x160>)
 80032a4:	4936      	ldr	r1, [pc, #216]	@ (8003380 <low_level_init+0x164>)
 80032a6:	4833      	ldr	r0, [pc, #204]	@ (8003374 <low_level_init+0x158>)
 80032a8:	f7fd ff1c 	bl	80010e4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80032ac:	2308      	movs	r3, #8
 80032ae:	4a35      	ldr	r2, [pc, #212]	@ (8003384 <low_level_init+0x168>)
 80032b0:	4935      	ldr	r1, [pc, #212]	@ (8003388 <low_level_init+0x16c>)
 80032b2:	4830      	ldr	r0, [pc, #192]	@ (8003374 <low_level_init+0x158>)
 80032b4:	f7fd ff7d 	bl	80011b2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2206      	movs	r2, #6
 80032bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80032c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003374 <low_level_init+0x158>)
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80032cc:	4b29      	ldr	r3, [pc, #164]	@ (8003374 <low_level_init+0x158>)
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	785a      	ldrb	r2, [r3, #1]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80032d8:	4b26      	ldr	r3, [pc, #152]	@ (8003374 <low_level_init+0x158>)
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	789a      	ldrb	r2, [r3, #2]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80032e4:	4b23      	ldr	r3, [pc, #140]	@ (8003374 <low_level_init+0x158>)
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	78da      	ldrb	r2, [r3, #3]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80032f0:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <low_level_init+0x158>)
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	791a      	ldrb	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80032fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003374 <low_level_init+0x158>)
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	795a      	ldrb	r2, [r3, #5]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800330e:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003316:	f043 030a 	orr.w	r3, r3, #10
 800331a:	b2da      	uxtb	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003322:	4814      	ldr	r0, [pc, #80]	@ (8003374 <low_level_init+0x158>)
 8003324:	f7fe fa68 	bl	80017f8 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8003328:	f107 0310 	add.w	r3, r7, #16
 800332c:	461a      	mov	r2, r3
 800332e:	2111      	movs	r1, #17
 8003330:	4810      	ldr	r0, [pc, #64]	@ (8003374 <low_level_init+0x158>)
 8003332:	f7fe f993 	bl	800165c <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f043 0303 	orr.w	r3, r3, #3
 800333c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	461a      	mov	r2, r3
 8003342:	2111      	movs	r1, #17
 8003344:	480b      	ldr	r0, [pc, #44]	@ (8003374 <low_level_init+0x158>)
 8003346:	f7fe f9f1 	bl	800172c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800334a:	f107 0310 	add.w	r3, r7, #16
 800334e:	461a      	mov	r2, r3
 8003350:	2112      	movs	r1, #18
 8003352:	4808      	ldr	r0, [pc, #32]	@ (8003374 <low_level_init+0x158>)
 8003354:	f7fe f982 	bl	800165c <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f043 0320 	orr.w	r3, r3, #32
 800335e:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	461a      	mov	r2, r3
 8003364:	2112      	movs	r1, #18
 8003366:	4803      	ldr	r0, [pc, #12]	@ (8003374 <low_level_init+0x158>)
 8003368:	f7fe f9e0 	bl	800172c <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800336c:	bf00      	nop
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20004918 	.word	0x20004918
 8003378:	40028000 	.word	0x40028000
 800337c:	20003148 	.word	0x20003148
 8003380:	20000168 	.word	0x20000168
 8003384:	200001a8 	.word	0x200001a8
 8003388:	200000e8 	.word	0x200000e8

0800338c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003396:	4b4b      	ldr	r3, [pc, #300]	@ (80034c4 <low_level_output+0x138>)
 8003398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80033ae:	4b45      	ldr	r3, [pc, #276]	@ (80034c4 <low_level_output+0x138>)
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	e05a      	b.n	8003474 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da03      	bge.n	80033ce <low_level_output+0x42>
      {
        errval = ERR_USE;
 80033c6:	23f8      	movs	r3, #248	@ 0xf8
 80033c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 80033cc:	e05c      	b.n	8003488 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	895b      	ldrh	r3, [r3, #10]
 80033d2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80033d8:	e02f      	b.n	800343a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	18d0      	adds	r0, r2, r3
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	18d1      	adds	r1, r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 80033ee:	3304      	adds	r3, #4
 80033f0:	461a      	mov	r2, r3
 80033f2:	f00a fc96 	bl	800dd22 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	da03      	bge.n	800340c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003404:	23f8      	movs	r3, #248	@ 0xf8
 8003406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 800340a:	e03d      	b.n	8003488 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800341c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003428:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003434:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003444:	4293      	cmp	r3, r2
 8003446:	d8c8      	bhi.n	80033da <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	18d0      	adds	r0, r2, r3
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4413      	add	r3, r2
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4619      	mov	r1, r3
 800345a:	f00a fc62 	bl	800dd22 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	623b      	str	r3, [r7, #32]
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1a1      	bne.n	80033be <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	4811      	ldr	r0, [pc, #68]	@ (80034c4 <low_level_output+0x138>)
 800347e:	f7fd ff03 	bl	8001288 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003488:	4b0e      	ldr	r3, [pc, #56]	@ (80034c4 <low_level_output+0x138>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00d      	beq.n	80034b6 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800349a:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <low_level_output+0x138>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a2:	461a      	mov	r2, r3
 80034a4:	2320      	movs	r3, #32
 80034a6:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80034a8:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <low_level_output+0x138>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034b0:	461a      	mov	r2, r3
 80034b2:	2300      	movs	r3, #0
 80034b4:	6053      	str	r3, [r2, #4]
  }
  return errval;
 80034b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3728      	adds	r7, #40	@ 0x28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20004918 	.word	0x20004918

080034c8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08c      	sub	sp, #48	@ 0x30
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80034ec:	484e      	ldr	r0, [pc, #312]	@ (8003628 <low_level_input+0x160>)
 80034ee:	f7fd ffb3 	bl	8001458 <HAL_ETH_GetReceivedFrame>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <low_level_input+0x34>

    return NULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e090      	b.n	800361e <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80034fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003628 <low_level_input+0x160>)
 80034fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003500:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003502:	4b49      	ldr	r3, [pc, #292]	@ (8003628 <low_level_input+0x160>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d006      	beq.n	800351c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800350e:	89fb      	ldrh	r3, [r7, #14]
 8003510:	2203      	movs	r2, #3
 8003512:	4619      	mov	r1, r3
 8003514:	2004      	movs	r0, #4
 8003516:	f001 fe11 	bl	800513c <pbuf_alloc>
 800351a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 800351c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d04b      	beq.n	80035ba <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003522:	4b41      	ldr	r3, [pc, #260]	@ (8003628 <low_level_input+0x160>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800352c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003530:	e040      	b.n	80035b4 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8003532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003534:	895b      	ldrh	r3, [r3, #10]
 8003536:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800353c:	e021      	b.n	8003582 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	18d0      	adds	r0, r2, r3
 8003546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	18d1      	adds	r1, r2, r3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8003552:	3304      	adds	r3, #4
 8003554:	461a      	mov	r2, r3
 8003556:	f00a fbe4 	bl	800dd22 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	4413      	add	r3, r2
 800356c:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8003570:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800357c:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800358c:	4293      	cmp	r3, r2
 800358e:	d8d6      	bhi.n	800353e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	18d0      	adds	r0, r2, r3
 8003598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	4413      	add	r3, r2
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4619      	mov	r1, r3
 80035a2:	f00a fbbe 	bl	800dd22 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	4413      	add	r3, r2
 80035ac:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80035ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1bb      	bne.n	8003532 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80035ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <low_level_input+0x160>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e00b      	b.n	80035de <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	3301      	adds	r3, #1
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	4b12      	ldr	r3, [pc, #72]	@ (8003628 <low_level_input+0x160>)
 80035e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d3ee      	bcc.n	80035c6 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80035e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <low_level_input+0x160>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80035ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <low_level_input+0x160>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003600:	4b09      	ldr	r3, [pc, #36]	@ (8003628 <low_level_input+0x160>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003608:	461a      	mov	r2, r3
 800360a:	2380      	movs	r3, #128	@ 0x80
 800360c:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800360e:	4b06      	ldr	r3, [pc, #24]	@ (8003628 <low_level_input+0x160>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003616:	461a      	mov	r2, r3
 8003618:	2300      	movs	r3, #0
 800361a:	6093      	str	r3, [r2, #8]
  }
  return p;
 800361c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800361e:	4618      	mov	r0, r3
 8003620:	3730      	adds	r7, #48	@ 0x30
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20004918 	.word	0x20004918

0800362c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ff47 	bl	80034c8 <low_level_input>
 800363a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d010      	beq.n	8003664 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	4798      	blx	r3
 800364c:	4603      	mov	r3, r0
 800364e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003650:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f002 f8e7 	bl	800582c <pbuf_free>
    p = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e000      	b.n	8003666 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003664:	bf00      	nop
  }
}
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <ethernetif_init+0x1c>
 800367a:	4b0e      	ldr	r3, [pc, #56]	@ (80036b4 <ethernetif_init+0x48>)
 800367c:	f44f 7208 	mov.w	r2, #544	@ 0x220
 8003680:	490d      	ldr	r1, [pc, #52]	@ (80036b8 <ethernetif_init+0x4c>)
 8003682:	480e      	ldr	r0, [pc, #56]	@ (80036bc <ethernetif_init+0x50>)
 8003684:	f00a fa54 	bl	800db30 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2273      	movs	r2, #115	@ 0x73
 800368c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->name[1] = IFNAME1;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2274      	movs	r2, #116	@ 0x74
 8003694:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a09      	ldr	r2, [pc, #36]	@ (80036c0 <ethernetif_init+0x54>)
 800369c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a08      	ldr	r2, [pc, #32]	@ (80036c4 <ethernetif_init+0x58>)
 80036a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fdb9 	bl	800321c <low_level_init>

  return ERR_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	0800e8e0 	.word	0x0800e8e0
 80036b8:	0800e8fc 	.word	0x0800e8fc
 80036bc:	0800e90c 	.word	0x0800e90c
 80036c0:	0800bddd 	.word	0x0800bddd
 80036c4:	0800338d 	.word	0x0800338d

080036c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80036cc:	f7fd fa62 	bl	8000b94 <HAL_GetTick>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d05d      	beq.n	80037b6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80036fa:	4b34      	ldr	r3, [pc, #208]	@ (80037cc <ethernetif_update_config+0xf4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d03f      	beq.n	8003782 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003702:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003706:	2100      	movs	r1, #0
 8003708:	4830      	ldr	r0, [pc, #192]	@ (80037cc <ethernetif_update_config+0xf4>)
 800370a:	f7fe f80f 	bl	800172c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800370e:	f7fd fa41 	bl	8000b94 <HAL_GetTick>
 8003712:	4603      	mov	r3, r0
 8003714:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003716:	f107 0308 	add.w	r3, r7, #8
 800371a:	461a      	mov	r2, r3
 800371c:	2101      	movs	r1, #1
 800371e:	482b      	ldr	r0, [pc, #172]	@ (80037cc <ethernetif_update_config+0xf4>)
 8003720:	f7fd ff9c 	bl	800165c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003724:	f7fd fa36 	bl	8000b94 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003732:	d828      	bhi.n	8003786 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0eb      	beq.n	8003716 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	461a      	mov	r2, r3
 8003744:	2110      	movs	r1, #16
 8003746:	4821      	ldr	r0, [pc, #132]	@ (80037cc <ethernetif_update_config+0xf4>)
 8003748:	f7fd ff88 	bl	800165c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0304 	and.w	r3, r3, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003756:	4b1d      	ldr	r3, [pc, #116]	@ (80037cc <ethernetif_update_config+0xf4>)
 8003758:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	e002      	b.n	8003766 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003760:	4b1a      	ldr	r3, [pc, #104]	@ (80037cc <ethernetif_update_config+0xf4>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003770:	4b16      	ldr	r3, [pc, #88]	@ (80037cc <ethernetif_update_config+0xf4>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	e016      	b.n	80037a6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003778:	4b14      	ldr	r3, [pc, #80]	@ (80037cc <ethernetif_update_config+0xf4>)
 800377a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	e011      	b.n	80037a6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <ethernetif_update_config+0xb0>
          goto error;
 8003786:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003788:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <ethernetif_update_config+0xf4>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	08db      	lsrs	r3, r3, #3
 800378e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003790:	4b0e      	ldr	r3, [pc, #56]	@ (80037cc <ethernetif_update_config+0xf4>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003798:	4313      	orrs	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	2100      	movs	r1, #0
 80037a0:	480a      	ldr	r0, [pc, #40]	@ (80037cc <ethernetif_update_config+0xf4>)
 80037a2:	f7fd ffc3 	bl	800172c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80037a6:	2100      	movs	r1, #0
 80037a8:	4808      	ldr	r0, [pc, #32]	@ (80037cc <ethernetif_update_config+0xf4>)
 80037aa:	f7fe f883 	bl	80018b4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80037ae:	4807      	ldr	r0, [pc, #28]	@ (80037cc <ethernetif_update_config+0xf4>)
 80037b0:	f7fe f822 	bl	80017f8 <HAL_ETH_Start>
 80037b4:	e002      	b.n	80037bc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80037b6:	4805      	ldr	r0, [pc, #20]	@ (80037cc <ethernetif_update_config+0xf4>)
 80037b8:	f7fe f84d 	bl	8001856 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f807 	bl	80037d0 <ethernetif_notify_conn_changed>
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20004918 	.word	0x20004918

080037d0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
	...

080037e4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <fs_open+0x16>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <fs_open+0x1c>
     return ERR_ARG;
 80037fa:	f06f 030f 	mvn.w	r3, #15
 80037fe:	e028      	b.n	8003852 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003800:	4b16      	ldr	r3, [pc, #88]	@ (800385c <fs_open+0x78>)
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e020      	b.n	8003848 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4619      	mov	r1, r3
 800380c:	6838      	ldr	r0, [r7, #0]
 800380e:	f7fc fd09 	bl	8000224 <strcmp>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d114      	bne.n	8003842 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	7c1a      	ldrb	r2, [r3, #16]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e007      	b.n	8003852 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1db      	bne.n	8003806 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800384e:	f06f 0305 	mvn.w	r3, #5
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	08011800 	.word	0x08011800

08003860 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	1ad3      	subs	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state* hs)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8003896:	22ac      	movs	r2, #172	@ 0xac
 8003898:	2100      	movs	r1, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f00a f9ad 	bl	800dbfa <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state*
http_state_alloc(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80038ae:	20ac      	movs	r0, #172	@ 0xac
 80038b0:	f001 f8f8 	bl	8004aa4 <mem_malloc>
 80038b4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <http_state_alloc+0x1a>
    http_state_init(ret);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ffe6 	bl	800388e <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80038c2:	687b      	ldr	r3, [r7, #4]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if(hs->handle) {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <http_state_eof+0x20>
    u32_t needed = LWIP_MAX(1, (ms_needed/100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
      ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ffbd 	bl	8003860 <fs_close>
    hs->handle = NULL;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <http_state_eof+0x38>
    pbuf_free(hs->req);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 ff97 	bl	800582c <pbuf_free>
    hs->req = NULL;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <http_state_free+0x1a>
    http_state_eof(hs);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ffd6 	bl	80038cc <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 ff81 	bl	8004828 <mem_free>
  }
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct tcp_pcb *pcb, const void* ptr, u16_t *length, u8_t apiflags)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <http_write+0x22>
 8003944:	4b2c      	ldr	r3, [pc, #176]	@ (80039f8 <http_write+0xc8>)
 8003946:	f44f 7204 	mov.w	r2, #528	@ 0x210
 800394a:	492c      	ldr	r1, [pc, #176]	@ (80039fc <http_write+0xcc>)
 800394c:	482c      	ldr	r0, [pc, #176]	@ (8003a00 <http_write+0xd0>)
 800394e:	f00a f8ef 	bl	800db30 <iprintf>
  len = *length;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8003958:	8afb      	ldrh	r3, [r7, #22]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <http_write+0x32>
    return ERR_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e045      	b.n	80039ee <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = tcp_sndbuf(pcb);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003968:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800396a:	8aba      	ldrh	r2, [r7, #20]
 800396c:	8afb      	ldrh	r3, [r7, #22]
 800396e:	429a      	cmp	r2, r3
 8003970:	d201      	bcs.n	8003976 <http_write+0x46>
    len = max_len;
 8003972:	8abb      	ldrh	r3, [r7, #20]
 8003974:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	82bb      	strh	r3, [r7, #20]
  if(len > max_len) {
 800397e:	8afa      	ldrh	r2, [r7, #22]
 8003980:	8abb      	ldrh	r3, [r7, #20]
 8003982:	429a      	cmp	r2, r3
 8003984:	d901      	bls.n	800398a <http_write+0x5a>
    len = max_len;
 8003986:	8abb      	ldrh	r3, [r7, #20]
 8003988:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying go send %d bytes\n", len));
    err = tcp_write(pcb, ptr, len, apiflags);
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	8afa      	ldrh	r2, [r7, #22]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f006 fa0f 	bl	8009db4 <tcp_write>
 8003996:	4603      	mov	r3, r0
 8003998:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800399a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d10f      	bne.n	80039c4 <http_write+0x94>
      if ((tcp_sndbuf(pcb) == 0) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <http_write+0x88>
        (tcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
      if ((tcp_sndbuf(pcb) == 0) ||
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d902      	bls.n	80039be <http_write+0x8e>
          /* no need to try smaller sizes */
          len = 1;
 80039b8:	2301      	movs	r3, #1
 80039ba:	82fb      	strh	r3, [r7, #22]
 80039bc:	e002      	b.n	80039c4 <http_write+0x94>
      } else {
        len /= 2;
 80039be:	8afb      	ldrh	r3, [r7, #22]
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, 
        ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 80039c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d102      	bne.n	80039d4 <http_write+0xa4>
 80039ce:	8afb      	ldrh	r3, [r7, #22]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d8da      	bhi.n	800398a <http_write+0x5a>

  if (err == ERR_OK) {
 80039d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d103      	bne.n	80039e4 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8afa      	ldrh	r2, [r7, #22]
 80039e0:	801a      	strh	r2, [r3, #0]
 80039e2:	e002      	b.n	80039ea <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	801a      	strh	r2, [r3, #0]
      when all data has been enqueued but the connection stays open for the next
      request */
   tcp_nagle_enable(pcb);
#endif

  return err;
 80039ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	0800e974 	.word	0x0800e974
 80039fc:	0800e9ac 	.word	0x0800e9ac
 8003a00:	0800e9bc 	.word	0x0800e9bc

08003a04 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct tcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  tcp_arg(pcb, NULL);
 8003a12:	2100      	movs	r1, #0
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f003 fb99 	bl	800714c <tcp_arg>
  tcp_recv(pcb, NULL);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f003 fba5 	bl	800716c <tcp_recv>
  tcp_err(pcb, NULL);
 8003a22:	2100      	movs	r1, #0
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f003 fbe3 	bl	80071f0 <tcp_err>
  tcp_poll(pcb, NULL, 0);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f003 fc16 	bl	8007260 <tcp_poll>
  tcp_sent(pcb, NULL);
 8003a34:	2100      	movs	r1, #0
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f003 fbba 	bl	80071b0 <tcp_sent>
  if (hs != NULL) {
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8003a42:	68b8      	ldr	r0, [r7, #8]
 8003a44:	f7ff ff62 	bl	800390c <http_state_free>
  }

  if (abort_conn) {
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <http_close_or_abort_conn+0x54>
    tcp_abort(pcb);
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f002 fbe2 	bl	8006218 <tcp_abort>
    return ERR_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e00f      	b.n	8003a78 <http_close_or_abort_conn+0x74>
  }
  err = tcp_close(pcb);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f002 fb13 	bl	8006084 <tcp_close>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8003a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void*)pcb));
    /* error closing, try again later in poll */
    tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	4904      	ldr	r1, [pc, #16]	@ (8003a80 <http_close_or_abort_conn+0x7c>)
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f003 fbf6 	bl	8007260 <tcp_poll>
  }
  return err;
 8003a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	0800429f 	.word	0x0800429f

08003a84 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct tcp_pcb *pcb, struct http_state *hs)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
   return http_close_or_abort_conn(pcb, hs, 0);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ffb6 	bl	8003a04 <http_close_or_abort_conn>
 8003a98:	4603      	mov	r3, r0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    tcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003aac:	6839      	ldr	r1, [r7, #0]
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ffe8 	bl	8003a84 <http_close_conn>
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if(!params || (params[0] == '\0')) {
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <extract_uri_parameters+0x18>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <extract_uri_parameters+0x1c>
      return(0);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	e04e      	b.n	8003b76 <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e042      	b.n	8003b68 <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	330a      	adds	r3, #10
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8003af4:	2126      	movs	r1, #38	@ 0x26
 8003af6:	6978      	ldr	r0, [r7, #20]
 8003af8:	f00a f887 	bl	800dc0a <strchr>
 8003afc:	6178      	str	r0, [r7, #20]
    if(pair) {
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d006      	beq.n	8003b12 <extract_uri_parameters+0x56>
      *pair = '\0';
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
      pair++;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e00c      	b.n	8003b2c <extract_uri_parameters+0x70>
    } else {
       /* We didn't find a new parameter so find the end of the URI and
        * replace the space with a '\0' */
        pair = strchr(equals, ' ');
 8003b12:	2120      	movs	r1, #32
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f00a f878 	bl	800dc0a <strchr>
 8003b1a:	6178      	str	r0, [r7, #20]
        if(pair) {
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <extract_uri_parameters+0x6c>
            *pair = '\0';
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
        }

        /* Revert to NULL so that we exit the loop as expected. */
        pair = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8003b2c:	213d      	movs	r1, #61	@ 0x3d
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f00a f86b 	bl	800dc0a <strchr>
 8003b34:	60f8      	str	r0, [r7, #12]
    if(equals) {
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <extract_uri_parameters+0x98>
      *equals = '\0';
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	331a      	adds	r3, #26
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	e006      	b.n	8003b62 <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	331a      	adds	r3, #26
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	605a      	str	r2, [r3, #4]
  for(loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3301      	adds	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b0f      	cmp	r3, #15
 8003b6c:	dc02      	bgt.n	8003b74 <extract_uri_parameters+0xb8>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1b6      	bne.n	8003ae2 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8003b74:	693b      	ldr	r3, [r7, #16]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct tcp_pcb *pcb, struct http_state *hs)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8003b92:	6839      	ldr	r1, [r7, #0]
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7ff ff84 	bl	8003aa2 <http_eof>
    return 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e016      	b.n	8003bcc <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fe65 	bl	8003872 <fs_bytes_left>
 8003ba8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	dc05      	bgt.n	8003bbc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003bb0:	6839      	ldr	r1, [r7, #0]
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff ff75 	bl	8003aa2 <http_eof>
    return 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e007      	b.n	8003bcc <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003bbc:	4b05      	ldr	r3, [pc, #20]	@ (8003bd4 <http_check_eof+0x54>)
 8003bbe:	f240 4283 	movw	r2, #1155	@ 0x483
 8003bc2:	4905      	ldr	r1, [pc, #20]	@ (8003bd8 <http_check_eof+0x58>)
 8003bc4:	4805      	ldr	r0, [pc, #20]	@ (8003bdc <http_check_eof+0x5c>)
 8003bc6:	f009 ffb3 	bl	800db30 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8003bca:	2301      	movs	r3, #1
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	0800e974 	.word	0x0800e974
 8003bd8:	0800e9e4 	.word	0x0800e9e4
 8003bdc:	0800e9bc 	.word	0x0800e9bc

08003be0 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct tcp_pcb *pcb, struct http_state *hs)
{
 8003be0:	b590      	push	{r4, r7, lr}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d803      	bhi.n	8003c02 <http_send_data_nonssi+0x22>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	e001      	b.n	8003c06 <http_send_data_nonssi+0x26>
 8003c02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c06:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	6998      	ldr	r0, [r3, #24]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d012      	beq.n	8003c3a <http_send_data_nonssi+0x5a>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00e      	beq.n	8003c3a <http_send_data_nonssi+0x5a>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	461c      	mov	r4, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	1ae3      	subs	r3, r4, r3
 8003c34:	440b      	add	r3, r1
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d001      	beq.n	8003c3e <http_send_data_nonssi+0x5e>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <http_send_data_nonssi+0x60>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f107 020c 	add.w	r2, r7, #12
 8003c46:	4601      	mov	r1, r0
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff fe71 	bl	8003930 <http_write>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8003c52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <http_send_data_nonssi+0x96>
    data_to_send = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	89ba      	ldrh	r2, [r7, #12]
 8003c64:	441a      	add	r2, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	89ba      	ldrh	r2, [r7, #12]
 8003c70:	1a9a      	subs	r2, r3, r2
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8003c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd90      	pop	{r4, r7, pc}

08003c80 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct tcp_pcb *pcb, struct http_state *hs)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <http_send+0x18>
    return 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	e025      	b.n	8003ce4 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d108      	bne.n	8003cb2 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ff6c 	bl	8003b80 <http_check_eof>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <http_send+0x32>
      return 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e018      	b.n	8003ce4 <http_send+0x64>
  if(hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff93 	bl	8003be0 <http_send_data_nonssi>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	73fb      	strb	r3, [r7, #15]
  }

  if((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <http_send+0x62>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fdd1 	bl	8003872 <fs_bytes_left>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	dc05      	bgt.n	8003ce2 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003cd6:	6839      	ldr	r1, [r7, #0]
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff fee2 	bl	8003aa2 <http_eof>
    return 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d6c <http_get_404_file+0x80>)
 8003cfa:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7ff fd6d 	bl	80037e4 <fs_open>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8003d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d024      	beq.n	8003d60 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	4a15      	ldr	r2, [pc, #84]	@ (8003d70 <http_get_404_file+0x84>)
 8003d1a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7ff fd5d 	bl	80037e4 <fs_open>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8003d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d014      	beq.n	8003d60 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	4a0e      	ldr	r2, [pc, #56]	@ (8003d74 <http_get_404_file+0x88>)
 8003d3a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f7ff fd4d 	bl	80037e4 <fs_open>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8003d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
        return NULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8003d60:	687b      	ldr	r3, [r7, #4]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	0800ea1c 	.word	0x0800ea1c
 8003d70:	0800ea28 	.word	0x0800ea28
 8003d74:	0800ea34 	.word	0x0800ea34

08003d78 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct tcp_pcb *pcb)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08e      	sub	sp, #56	@ 0x38
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <http_parse_request+0x24>
 8003d8e:	4b65      	ldr	r3, [pc, #404]	@ (8003f24 <http_parse_request+0x1ac>)
 8003d90:	f240 727e 	movw	r2, #1918	@ 0x77e
 8003d94:	4964      	ldr	r1, [pc, #400]	@ (8003f28 <http_parse_request+0x1b0>)
 8003d96:	4865      	ldr	r0, [pc, #404]	@ (8003f2c <http_parse_request+0x1b4>)
 8003d98:	f009 feca 	bl	800db30 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <http_parse_request+0x38>
 8003da2:	4b60      	ldr	r3, [pc, #384]	@ (8003f24 <http_parse_request+0x1ac>)
 8003da4:	f240 727f 	movw	r2, #1919	@ 0x77f
 8003da8:	4961      	ldr	r1, [pc, #388]	@ (8003f30 <http_parse_request+0x1b8>)
 8003daa:	4860      	ldr	r0, [pc, #384]	@ (8003f2c <http_parse_request+0x1b4>)
 8003dac:	f009 fec0 	bl	800db30 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <http_parse_request+0x48>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8003dc0:	f06f 0307 	mvn.w	r3, #7
 8003dc4:	e0a9      	b.n	8003f1a <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d103      	bne.n	8003dd6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd2:	621a      	str	r2, [r3, #32]
 8003dd4:	e005      	b.n	8003de2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 fdf1 	bl	80059c4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8003de2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003de4:	f001 fdcc 	bl	8005980 <pbuf_ref>

  if (hs->req->next != NULL) {
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d012      	beq.n	8003e18 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	891b      	ldrh	r3, [r3, #8]
 8003df8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	bf28      	it	cs
 8003e00:	4613      	movcs	r3, r2
 8003e02:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	6a18      	ldr	r0, [r3, #32]
 8003e08:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4949      	ldr	r1, [pc, #292]	@ (8003f34 <http_parse_request+0x1bc>)
 8003e0e:	f001 fefb 	bl	8005c08 <pbuf_copy_partial>
    data = httpd_req_buf;
 8003e12:	4b48      	ldr	r3, [pc, #288]	@ (8003f34 <http_parse_request+0x1bc>)
 8003e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e16:	e005      	b.n	8003e24 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	895b      	ldrh	r3, [r3, #10]
 8003e22:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8003e24:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003e26:	2b06      	cmp	r3, #6
 8003e28:	d962      	bls.n	8003ef0 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8003e2a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	4942      	ldr	r1, [pc, #264]	@ (8003f38 <http_parse_request+0x1c0>)
 8003e30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e32:	f000 fbda 	bl	80045ea <lwip_strnstr>
 8003e36:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d058      	beq.n	8003ef0 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8003e42:	2204      	movs	r2, #4
 8003e44:	493d      	ldr	r1, [pc, #244]	@ (8003f3c <http_parse_request+0x1c4>)
 8003e46:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e48:	f009 feec 	bl	800dc24 <strncmp>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <http_parse_request+0x108>
        sp1 = data + 3;
 8003e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e54:	3303      	adds	r3, #3
 8003e56:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
          data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 +1) - data));
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	8b7a      	ldrh	r2, [r7, #26]
 8003e6e:	4934      	ldr	r1, [pc, #208]	@ (8003f40 <http_parse_request+0x1c8>)
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fbba 	bl	80045ea <lwip_strnstr>
 8003e76:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d111      	bne.n	8003ea2 <http_parse_request+0x12a>
 8003e7e:	e006      	b.n	8003e8e <http_parse_request+0x116>
        data[4] = 0;
 8003e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e82:	3304      	adds	r3, #4
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8003e88:	f06f 030f 	mvn.w	r3, #15
 8003e8c:	e045      	b.n	8003f1a <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	3301      	adds	r3, #1
 8003e92:	8b7a      	ldrh	r2, [r7, #26]
 8003e94:	4928      	ldr	r1, [pc, #160]	@ (8003f38 <http_parse_request+0x1c0>)
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fba7 	bl	80045ea <lwip_strnstr>
 8003e9c:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8003eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01e      	beq.n	8003ef0 <http_parse_request+0x178>
 8003eb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d91a      	bls.n	8003ef0 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8003eba:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4921      	ldr	r1, [pc, #132]	@ (8003f44 <http_parse_request+0x1cc>)
 8003ec0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ec2:	f000 fb92 	bl	80045ea <lwip_strnstr>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d011      	beq.n	8003ef0 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8003ed8:	8b3b      	ldrh	r3, [r7, #24]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4413      	add	r3, r2
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8003ee2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ee4:	6979      	ldr	r1, [r7, #20]
 8003ee6:	68b8      	ldr	r0, [r7, #8]
 8003ee8:	f000 f82e 	bl	8003f48 <http_find_file>
 8003eec:	4603      	mov	r3, r0
 8003eee:	e014      	b.n	8003f1a <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fd2d 	bl	8005954 <pbuf_clen>
 8003efa:	4603      	mov	r3, r0
 8003efc:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	891b      	ldrh	r3, [r3, #8]
 8003f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f08:	d205      	bcs.n	8003f16 <http_parse_request+0x19e>
 8003f0a:	8a7b      	ldrh	r3, [r7, #18]
 8003f0c:	2b05      	cmp	r3, #5
 8003f0e:	d802      	bhi.n	8003f16 <http_parse_request+0x19e>
    (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8003f10:	f06f 0304 	mvn.w	r3, #4
 8003f14:	e001      	b.n	8003f1a <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8003f16:	f06f 030f 	mvn.w	r3, #15
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3738      	adds	r7, #56	@ 0x38
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	0800e974 	.word	0x0800e974
 8003f28:	0800ea40 	.word	0x0800ea40
 8003f2c:	0800e9bc 	.word	0x0800e9bc
 8003f30:	0800ea4c 	.word	0x0800ea4c
 8003f34:	20004960 	.word	0x20004960
 8003f38:	0800ea58 	.word	0x0800ea58
 8003f3c:	0800ea5c 	.word	0x0800ea5c
 8003f40:	0800ea64 	.word	0x0800ea64
 8003f44:	0800ea68 	.word	0x0800ea68

08003f48 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b093      	sub	sp, #76	@ 0x4c
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc f967 	bl	8000238 <strlen>
 8003f6a:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d065      	beq.n	800403e <http_find_file+0xf6>
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	3b01      	subs	r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b2f      	cmp	r3, #47	@ 0x2f
 8003f7e:	d15e      	bne.n	800403e <http_find_file+0xf6>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8003f80:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len-1] == '/') &&
 8003f82:	4a6f      	ldr	r2, [pc, #444]	@ (8004140 <http_find_file+0x1f8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d102      	bne.n	8003f8e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d157      	bne.n	800403e <http_find_file+0xf6>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	3b01      	subs	r3, #1
 8003f92:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f94:	bf28      	it	cs
 8003f96:	233f      	movcs	r3, #63	@ 0x3f
 8003f98:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6a3a      	ldr	r2, [r7, #32]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4866      	ldr	r0, [pc, #408]	@ (8004140 <http_find_file+0x1f8>)
 8003fa8:	f009 febb 	bl	800dd22 <memcpy>
      http_uri_buf[copy_len] = 0;
 8003fac:	4a64      	ldr	r2, [pc, #400]	@ (8004140 <http_find_file+0x1f8>)
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fba:	e03d      	b.n	8004038 <http_find_file+0xf0>
      const char* file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d022      	beq.n	8004008 <http_find_file+0xc0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8003fc8:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d018      	beq.n	8004002 <http_find_file+0xba>
          size_t name_len = strlen(g_psDefaultFilenames[loop].name);
 8003fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8004144 <http_find_file+0x1fc>)
 8003fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fc f92d 	bl	8000238 <strlen>
 8003fde:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	bf28      	it	cs
 8003fe8:	4613      	movcs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], g_psDefaultFilenames[loop].name, name_copy_len);
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	4a54      	ldr	r2, [pc, #336]	@ (8004140 <http_find_file+0x1f8>)
 8003ff0:	1898      	adds	r0, r3, r2
 8003ff2:	4a54      	ldr	r2, [pc, #336]	@ (8004144 <http_find_file+0x1fc>)
 8003ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f009 fe90 	bl	800dd22 <memcpy>
        }
        file_name = http_uri_buf;
 8004002:	4b4f      	ldr	r3, [pc, #316]	@ (8004140 <http_find_file+0x1f8>)
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004006:	e004      	b.n	8004012 <http_find_file+0xca>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = g_psDefaultFilenames[loop].name;
 8004008:	4a4e      	ldr	r2, [pc, #312]	@ (8004144 <http_find_file+0x1fc>)
 800400a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800400c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004010:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fbe4 	bl	80037e4 <fs_open>
 800401c:	4603      	mov	r3, r0
 800401e:	74fb      	strb	r3, [r7, #19]
      if(err == ERR_OK) {
 8004020:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <http_find_file+0xea>
        uri = file_name;
 8004028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = g_psDefaultFilenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8004030:	e005      	b.n	800403e <http_find_file+0xf6>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004034:	3301      	adds	r3, #1
 8004036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800403a:	2b04      	cmp	r3, #4
 800403c:	d9be      	bls.n	8003fbc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800403e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004040:	2b00      	cmp	r3, #0
 8004042:	d161      	bne.n	8004108 <http_find_file+0x1c0>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	213f      	movs	r1, #63	@ 0x3f
 8004048:	4618      	mov	r0, r3
 800404a:	f009 fdde 	bl	800dc0a <strchr>
 800404e:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 8004050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <http_find_file+0x11a>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8004056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
      params++;
 800405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405e:	3301      	adds	r3, #1
 8004060:	637b      	str	r3, [r7, #52]	@ 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8004062:	4b39      	ldr	r3, [pc, #228]	@ (8004148 <http_find_file+0x200>)
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (g_iNumCGIs && g_pCGIs) {
 800406a:	4b38      	ldr	r3, [pc, #224]	@ (800414c <http_find_file+0x204>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d034      	beq.n	80040dc <http_find_file+0x194>
 8004072:	4b37      	ldr	r3, [pc, #220]	@ (8004150 <http_find_file+0x208>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d030      	beq.n	80040dc <http_find_file+0x194>
      for (i = 0; i < g_iNumCGIs; i++) {
 800407a:	2300      	movs	r3, #0
 800407c:	633b      	str	r3, [r7, #48]	@ 0x30
 800407e:	e028      	b.n	80040d2 <http_find_file+0x18a>
        if (strcmp(uri, g_pCGIs[i].pcCGIName) == 0) {
 8004080:	68b8      	ldr	r0, [r7, #8]
 8004082:	4b33      	ldr	r3, [pc, #204]	@ (8004150 <http_find_file+0x208>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4619      	mov	r1, r3
 8004090:	f7fc f8c8 	bl	8000224 <strcmp>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d118      	bne.n	80040cc <http_find_file+0x184>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
           http_cgi_paramcount = extract_uri_parameters(hs, params);
 800409a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fd0d 	bl	8003abc <extract_uri_parameters>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4a28      	ldr	r2, [pc, #160]	@ (8004148 <http_find_file+0x200>)
 80040a6:	6013      	str	r3, [r2, #0]
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80040a8:	4b29      	ldr	r3, [pc, #164]	@ (8004150 <http_find_file+0x208>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	685c      	ldr	r4, [r3, #4]
 80040b4:	4b24      	ldr	r3, [pc, #144]	@ (8004148 <http_find_file+0x200>)
 80040b6:	6819      	ldr	r1, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
                                          hs->param_vals);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	336c      	adds	r3, #108	@ 0x6c
           uri = g_pCGIs[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80040c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040c4:	47a0      	blx	r4
 80040c6:	4603      	mov	r3, r0
 80040c8:	60bb      	str	r3, [r7, #8]
           break;
 80040ca:	e007      	b.n	80040dc <http_find_file+0x194>
      for (i = 0; i < g_iNumCGIs; i++) {
 80040cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ce:	3301      	adds	r3, #1
 80040d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040d2:	4b1e      	ldr	r3, [pc, #120]	@ (800414c <http_find_file+0x204>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d8:	429a      	cmp	r2, r3
 80040da:	dbd1      	blt.n	8004080 <http_find_file+0x138>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fb7e 	bl	80037e4 <fs_open>
 80040e8:	4603      	mov	r3, r0
 80040ea:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 80040ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <http_find_file+0x1b2>
       file = &hs->file_handle;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040f8:	e006      	b.n	8004108 <http_find_file+0x1c0>
    } else {
      file = http_get_404_file(hs, &uri);
 80040fa:	f107 0308 	add.w	r3, r7, #8
 80040fe:	4619      	mov	r1, r3
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff fdf3 	bl	8003cec <http_get_404_file>
 8004106:	63b8      	str	r0, [r7, #56]	@ 0x38
         *param = '?';
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8004108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <http_find_file+0x1d4>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800410e:	f107 0308 	add.w	r3, r7, #8
 8004112:	4619      	mov	r1, r3
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff fde9 	bl	8003cec <http_get_404_file>
 800411a:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f810 	bl	8004154 <http_init_file>
 8004134:	4603      	mov	r3, r0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3744      	adds	r7, #68	@ 0x44
 800413a:	46bd      	mov	sp, r7
 800413c:	bd90      	pop	{r4, r7, pc}
 800413e:	bf00      	nop
 8004140:	20004d60 	.word	0x20004d60
 8004144:	08011814 	.word	0x08011814
 8004148:	20004da8 	.word	0x20004da8
 800414c:	20004da4 	.word	0x20004da4
 8004150:	20004da0 	.word	0x20004da0

08004154 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char* params)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  if (file != NULL) {
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d051      	beq.n	800420c <http_init_file+0xb8>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	615a      	str	r2, [r3, #20]
    hs->file = file->data;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	da06      	bge.n	800418c <http_init_file+0x38>
 800417e:	4b2c      	ldr	r3, [pc, #176]	@ (8004230 <http_init_file+0xdc>)
 8004180:	f640 02cf 	movw	r2, #2255	@ 0x8cf
 8004184:	492b      	ldr	r1, [pc, #172]	@ (8004234 <http_init_file+0xe0>)
 8004186:	482c      	ldr	r0, [pc, #176]	@ (8004238 <http_init_file+0xe4>)
 8004188:	f009 fcd2 	bl	800db30 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = file->len;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	461a      	mov	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	7c1b      	ldrb	r3, [r3, #16]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <http_init_file+0x66>
 80041ac:	4b20      	ldr	r3, [pc, #128]	@ (8004230 <http_init_file+0xdc>)
 80041ae:	f640 02de 	movw	r2, #2270	@ 0x8de
 80041b2:	4922      	ldr	r1, [pc, #136]	@ (800423c <http_init_file+0xe8>)
 80041b4:	4820      	ldr	r0, [pc, #128]	@ (8004238 <http_init_file+0xe4>)
 80041b6:	f009 fcbb 	bl	800db30 <iprintf>
       (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d032      	beq.n	8004226 <http_init_file+0xd2>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	7c1b      	ldrb	r3, [r3, #16]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d02b      	beq.n	8004226 <http_init_file+0xd2>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6998      	ldr	r0, [r3, #24]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	461a      	mov	r2, r3
 80041d8:	4919      	ldr	r1, [pc, #100]	@ (8004240 <http_init_file+0xec>)
 80041da:	f000 fa06 	bl	80045ea <lwip_strnstr>
 80041de:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01f      	beq.n	8004226 <http_init_file+0xd2>
        size_t diff = file_start + 4 - hs->file;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	1d1a      	adds	r2, r3, #4
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	441a      	add	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad2      	subs	r2, r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	625a      	str	r2, [r3, #36]	@ 0x24
 800420a:	e00c      	b.n	8004226 <http_init_file+0xd2>
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
  } else {
    hs->handle = NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
         hs->keepalive = 0;
       }
     }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	0800e974 	.word	0x0800e974
 8004234:	0800ea70 	.word	0x0800ea70
 8004238:	0800e9bc 	.word	0x0800e9bc
 800423c:	0800ea90 	.word	0x0800ea90
 8004240:	0800ea68 	.word	0x0800ea68

08004244 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <http_err+0x1c>
    http_state_free(hs);
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f7ff fb56 	bl	800390c <http_state_free>
  }
}
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	4613      	mov	r3, r2
 8004274:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void*)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <http_sent+0x1c>
    return ERR_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e008      	b.n	8004296 <http_sent+0x2e>
  }

  hs->retries = 0;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800428c:	6979      	ldr	r1, [r7, #20]
 800428e:	68b8      	ldr	r0, [r7, #8]
 8004290:	f7ff fcf6 	bl	8003c80 <http_send>

  return ERR_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct tcp_pcb *pcb)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
    (void*)pcb, (void*)hs, tcp_debug_state_str(pcb->state)));

  if (hs == NULL) {
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d107      	bne.n	80042c2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80042b2:	2100      	movs	r1, #0
 80042b4:	6838      	ldr	r0, [r7, #0]
 80042b6:	f7ff fbe5 	bl	8003a84 <http_close_conn>
 80042ba:	4603      	mov	r3, r0
 80042bc:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
       tcp_abort(pcb);
       return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e024      	b.n	800430c <http_poll+0x6e>
  } else {
    hs->retries++;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042c8:	3301      	adds	r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d105      	bne.n	80042e8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80042dc:	68f9      	ldr	r1, [r7, #12]
 80042de:	6838      	ldr	r0, [r7, #0]
 80042e0:	f7ff fbd0 	bl	8003a84 <http_close_conn>
      return ERR_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e011      	b.n	800430c <http_poll+0x6e>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if(hs && (hs->handle)) {
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00d      	beq.n	800430a <http_poll+0x6c>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <http_poll+0x6c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if(http_send(pcb, hs)) {
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	6838      	ldr	r0, [r7, #0]
 80042fa:	f7ff fcc1 	bl	8003c80 <http_send>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <http_poll+0x6c>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        tcp_output(pcb);
 8004304:	6838      	ldr	r0, [r7, #0]
 8004306:	f006 fa07 	bl	800a718 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void*)pcb,
    (void*)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8004326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d105      	bne.n	800433a <http_recv+0x26>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <http_recv+0x26>
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d111      	bne.n	800435e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      tcp_recved(pcb, p->tot_len);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	891b      	ldrh	r3, [r3, #8]
 8004344:	4619      	mov	r1, r3
 8004346:	68b8      	ldr	r0, [r7, #8]
 8004348:	f002 f90c 	bl	8006564 <tcp_recved>
      pbuf_free(p);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f001 fa6d 	bl	800582c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8004352:	6979      	ldr	r1, [r7, #20]
 8004354:	68b8      	ldr	r0, [r7, #8]
 8004356:	f7ff fb95 	bl	8003a84 <http_close_conn>
    return ERR_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e055      	b.n	800440a <http_recv+0xf6>
     hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    tcp_recved(pcb, p->tot_len);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	891b      	ldrh	r3, [r3, #8]
 8004362:	4619      	mov	r1, r3
 8004364:	68b8      	ldr	r0, [r7, #8]
 8004366:	f002 f8fd 	bl	8006564 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d147      	bne.n	8004402 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	6979      	ldr	r1, [r7, #20]
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7ff fcfe 	bl	8003d78 <http_parse_request>
 800437c:	4603      	mov	r3, r0
 800437e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8004380:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d015      	beq.n	80043b4 <http_recv+0xa0>
 8004388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800438c:	f113 0f05 	cmn.w	r3, #5
 8004390:	d010      	beq.n	80043b4 <http_recv+0xa0>
 8004392:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004396:	f113 0f10 	cmn.w	r3, #16
 800439a:	d00b      	beq.n	80043b4 <http_recv+0xa0>
 800439c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80043a0:	f113 0f08 	cmn.w	r3, #8
 80043a4:	d006      	beq.n	80043b4 <http_recv+0xa0>
 80043a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004414 <http_recv+0x100>)
 80043a8:	f640 12b4 	movw	r2, #2484	@ 0x9b4
 80043ac:	491a      	ldr	r1, [pc, #104]	@ (8004418 <http_recv+0x104>)
 80043ae:	481b      	ldr	r0, [pc, #108]	@ (800441c <http_recv+0x108>)
 80043b0:	f009 fbbe 	bl	800db30 <iprintf>
        || parsed == ERR_INPROGRESS ||parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80043b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80043b8:	f113 0f05 	cmn.w	r3, #5
 80043bc:	d00b      	beq.n	80043d6 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <http_recv+0xc2>
          pbuf_free(hs->req);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 fa2e 	bl	800582c <pbuf_free>
          hs->req = NULL;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2200      	movs	r2, #0
 80043d4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f001 fa28 	bl	800582c <pbuf_free>
      if (parsed == ERR_OK) {
 80043dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d104      	bne.n	80043ee <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
       if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void*)hs->file, hs->left));
          http_send(pcb, hs);
 80043e4:	6979      	ldr	r1, [r7, #20]
 80043e6:	68b8      	ldr	r0, [r7, #8]
 80043e8:	f7ff fc4a 	bl	8003c80 <http_send>
 80043ec:	e00c      	b.n	8004408 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80043ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80043f2:	f113 0f10 	cmn.w	r3, #16
 80043f6:	d107      	bne.n	8004408 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80043f8:	6979      	ldr	r1, [r7, #20]
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f7ff fb42 	bl	8003a84 <http_close_conn>
 8004400:	e002      	b.n	8004408 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f001 fa12 	bl	800582c <pbuf_free>
    }
  }
  return ERR_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3718      	adds	r7, #24
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	0800e974 	.word	0x0800e974
 8004418:	0800eabc 	.word	0x0800eabc
 800441c:	0800e9bc 	.word	0x0800e9bc

08004420 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void*)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800442e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <http_accept+0x1c>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d102      	bne.n	8004442 <http_accept+0x22>
    return ERR_VAL;
 800443c:	f06f 0305 	mvn.w	r3, #5
 8004440:	e025      	b.n	800448e <http_accept+0x6e>
  }

  /* Set priority */
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004442:	2101      	movs	r1, #1
 8004444:	68b8      	ldr	r0, [r7, #8]
 8004446:	f002 fce9 	bl	8006e1c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800444a:	f7ff fa2d 	bl	80038a8 <http_state_alloc>
 800444e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
 800445a:	e018      	b.n	800448e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  tcp_arg(pcb, hs);
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	68b8      	ldr	r0, [r7, #8]
 8004466:	f002 fe71 	bl	800714c <tcp_arg>

  /* Set up the various callback functions */
  tcp_recv(pcb, http_recv);
 800446a:	490b      	ldr	r1, [pc, #44]	@ (8004498 <http_accept+0x78>)
 800446c:	68b8      	ldr	r0, [r7, #8]
 800446e:	f002 fe7d 	bl	800716c <tcp_recv>
  tcp_err(pcb, http_err);
 8004472:	490a      	ldr	r1, [pc, #40]	@ (800449c <http_accept+0x7c>)
 8004474:	68b8      	ldr	r0, [r7, #8]
 8004476:	f002 febb 	bl	80071f0 <tcp_err>
  tcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800447a:	2204      	movs	r2, #4
 800447c:	4908      	ldr	r1, [pc, #32]	@ (80044a0 <http_accept+0x80>)
 800447e:	68b8      	ldr	r0, [r7, #8]
 8004480:	f002 feee 	bl	8007260 <tcp_poll>
  tcp_sent(pcb, http_sent);
 8004484:	4907      	ldr	r1, [pc, #28]	@ (80044a4 <http_accept+0x84>)
 8004486:	68b8      	ldr	r0, [r7, #8]
 8004488:	f002 fe92 	bl	80071b0 <tcp_sent>

  return ERR_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	08004315 	.word	0x08004315
 800449c:	08004245 	.word	0x08004245
 80044a0:	0800429f 	.word	0x0800429f
 80044a4:	08004269 	.word	0x08004269

080044a8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
  LWIP_MEMPOOL_INIT(HTTPD_SSI_STATE);
#endif
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  pcb = tcp_new_ip_type(IPADDR_TYPE_ANY);
 80044ae:	202e      	movs	r0, #46	@ 0x2e
 80044b0:	f002 fe3e 	bl	8007130 <tcp_new_ip_type>
 80044b4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <httpd_init+0x22>
 80044bc:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <httpd_init+0x7c>)
 80044be:	f44f 6221 	mov.w	r2, #2576	@ 0xa10
 80044c2:	4919      	ldr	r1, [pc, #100]	@ (8004528 <httpd_init+0x80>)
 80044c4:	4819      	ldr	r0, [pc, #100]	@ (800452c <httpd_init+0x84>)
 80044c6:	f009 fb33 	bl	800db30 <iprintf>
  tcp_setprio(pcb, HTTPD_TCP_PRIO);
 80044ca:	2101      	movs	r1, #1
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f002 fca5 	bl	8006e1c <tcp_setprio>
  /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
  err = tcp_bind(pcb, IP_ANY_TYPE, HTTPD_SERVER_PORT);
 80044d2:	2250      	movs	r2, #80	@ 0x50
 80044d4:	4916      	ldr	r1, [pc, #88]	@ (8004530 <httpd_init+0x88>)
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 feaa 	bl	8006230 <tcp_bind>
 80044dc:	4603      	mov	r3, r0
 80044de:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80044e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <httpd_init+0x4e>
 80044e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004524 <httpd_init+0x7c>)
 80044ea:	f640 2215 	movw	r2, #2581	@ 0xa15
 80044ee:	4911      	ldr	r1, [pc, #68]	@ (8004534 <httpd_init+0x8c>)
 80044f0:	480e      	ldr	r0, [pc, #56]	@ (800452c <httpd_init+0x84>)
 80044f2:	f009 fb1d 	bl	800db30 <iprintf>
  pcb = tcp_listen(pcb);
 80044f6:	21ff      	movs	r1, #255	@ 0xff
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f001 ff3b 	bl	8006374 <tcp_listen_with_backlog>
 80044fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <httpd_init+0x6c>
 8004506:	4b07      	ldr	r3, [pc, #28]	@ (8004524 <httpd_init+0x7c>)
 8004508:	f640 2217 	movw	r2, #2583	@ 0xa17
 800450c:	490a      	ldr	r1, [pc, #40]	@ (8004538 <httpd_init+0x90>)
 800450e:	4807      	ldr	r0, [pc, #28]	@ (800452c <httpd_init+0x84>)
 8004510:	f009 fb0e 	bl	800db30 <iprintf>
  tcp_accept(pcb, http_accept);
 8004514:	4909      	ldr	r1, [pc, #36]	@ (800453c <httpd_init+0x94>)
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f002 fe8c 	bl	8007234 <tcp_accept>
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	0800e974 	.word	0x0800e974
 8004528:	0800eae8 	.word	0x0800eae8
 800452c:	0800e9bc 	.word	0x0800e9bc
 8004530:	0801190c 	.word	0x0801190c
 8004534:	0800eb04 	.word	0x0800eb04
 8004538:	0800eb20 	.word	0x0800eb20
 800453c:	08004421 	.word	0x08004421

08004540 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d106      	bne.n	800455e <http_set_cgi_handlers+0x1e>
 8004550:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <http_set_cgi_handlers+0x48>)
 8004552:	f640 2242 	movw	r2, #2626	@ 0xa42
 8004556:	490d      	ldr	r1, [pc, #52]	@ (800458c <http_set_cgi_handlers+0x4c>)
 8004558:	480d      	ldr	r0, [pc, #52]	@ (8004590 <http_set_cgi_handlers+0x50>)
 800455a:	f009 fae9 	bl	800db30 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	dc06      	bgt.n	8004572 <http_set_cgi_handlers+0x32>
 8004564:	4b08      	ldr	r3, [pc, #32]	@ (8004588 <http_set_cgi_handlers+0x48>)
 8004566:	f640 2243 	movw	r2, #2627	@ 0xa43
 800456a:	490a      	ldr	r1, [pc, #40]	@ (8004594 <http_set_cgi_handlers+0x54>)
 800456c:	4808      	ldr	r0, [pc, #32]	@ (8004590 <http_set_cgi_handlers+0x50>)
 800456e:	f009 fadf 	bl	800db30 <iprintf>

  g_pCGIs = cgis;
 8004572:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <http_set_cgi_handlers+0x58>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6013      	str	r3, [r2, #0]
  g_iNumCGIs = num_handlers;
 8004578:	4a08      	ldr	r2, [pc, #32]	@ (800459c <http_set_cgi_handlers+0x5c>)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6013      	str	r3, [r2, #0]
}
 800457e:	bf00      	nop
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	0800e974 	.word	0x0800e974
 800458c:	0800eb40 	.word	0x0800eb40
 8004590:	0800e9bc 	.word	0x0800e9bc
 8004594:	0800eb50 	.word	0x0800eb50
 8004598:	20004da0 	.word	0x20004da0
 800459c:	20004da4 	.word	0x20004da4

080045a0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	ba5b      	rev16	r3, r3
 80045ae:	b29b      	uxth	r3, r3
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	061a      	lsls	r2, r3, #24
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	0e1b      	lsrs	r3, r3, #24
 80045de:	4313      	orrs	r3, r2
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b086      	sub	sp, #24
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
  const char* p;
  size_t tokenlen = strlen(token);
 80045f6:	68b8      	ldr	r0, [r7, #8]
 80045f8:	f7fb fe1e 	bl	8000238 <strlen>
 80045fc:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	e022      	b.n	800464e <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e012      	b.n	8004634 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d109      	bne.n	800462e <lwip_strnstr+0x44>
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	6978      	ldr	r0, [r7, #20]
 8004620:	f009 fb00 	bl	800dc24 <strncmp>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	e00f      	b.n	800464e <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	3301      	adds	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <lwip_strnstr+0x62>
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	441a      	add	r2, r3
 8004642:	68f9      	ldr	r1, [r7, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	440b      	add	r3, r1
 8004648:	429a      	cmp	r2, r3
 800464a:	d9e0      	bls.n	800460e <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004660:	f000 f8a6 	bl	80047b0 <mem_init>
  memp_init();
 8004664:	f000 fb36 	bl	8004cd4 <memp_init>
  pbuf_init();
  netif_init();
 8004668:	f000 fbee 	bl	8004e48 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800466c:	f006 fe74 	bl	800b358 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004670:	f001 fb44 	bl	8005cfc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8004674:	f006 fd52 	bl	800b11c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004688:	4b40      	ldr	r3, [pc, #256]	@ (800478c <plug_holes+0x10c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	429a      	cmp	r2, r3
 8004690:	d206      	bcs.n	80046a0 <plug_holes+0x20>
 8004692:	4b3f      	ldr	r3, [pc, #252]	@ (8004790 <plug_holes+0x110>)
 8004694:	f240 125d 	movw	r2, #349	@ 0x15d
 8004698:	493e      	ldr	r1, [pc, #248]	@ (8004794 <plug_holes+0x114>)
 800469a:	483f      	ldr	r0, [pc, #252]	@ (8004798 <plug_holes+0x118>)
 800469c:	f009 fa48 	bl	800db30 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80046a0:	4b3e      	ldr	r3, [pc, #248]	@ (800479c <plug_holes+0x11c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d306      	bcc.n	80046b8 <plug_holes+0x38>
 80046aa:	4b39      	ldr	r3, [pc, #228]	@ (8004790 <plug_holes+0x110>)
 80046ac:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80046b0:	493b      	ldr	r1, [pc, #236]	@ (80047a0 <plug_holes+0x120>)
 80046b2:	4839      	ldr	r0, [pc, #228]	@ (8004798 <plug_holes+0x118>)
 80046b4:	f009 fa3c 	bl	800db30 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	791b      	ldrb	r3, [r3, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <plug_holes+0x4e>
 80046c0:	4b33      	ldr	r3, [pc, #204]	@ (8004790 <plug_holes+0x110>)
 80046c2:	f240 125f 	movw	r2, #351	@ 0x15f
 80046c6:	4937      	ldr	r1, [pc, #220]	@ (80047a4 <plug_holes+0x124>)
 80046c8:	4833      	ldr	r0, [pc, #204]	@ (8004798 <plug_holes+0x118>)
 80046ca:	f009 fa31 	bl	800db30 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80046d6:	d906      	bls.n	80046e6 <plug_holes+0x66>
 80046d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004790 <plug_holes+0x110>)
 80046da:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 80046de:	4932      	ldr	r1, [pc, #200]	@ (80047a8 <plug_holes+0x128>)
 80046e0:	482d      	ldr	r0, [pc, #180]	@ (8004798 <plug_holes+0x118>)
 80046e2:	f009 fa25 	bl	800db30 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80046e6:	4b29      	ldr	r3, [pc, #164]	@ (800478c <plug_holes+0x10c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	8812      	ldrh	r2, [r2, #0]
 80046ee:	4413      	add	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d01f      	beq.n	800473a <plug_holes+0xba>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	791b      	ldrb	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11b      	bne.n	800473a <plug_holes+0xba>
 8004702:	4b26      	ldr	r3, [pc, #152]	@ (800479c <plug_holes+0x11c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	429a      	cmp	r2, r3
 800470a:	d016      	beq.n	800473a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800470c:	4b27      	ldr	r3, [pc, #156]	@ (80047ac <plug_holes+0x12c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	429a      	cmp	r2, r3
 8004714:	d102      	bne.n	800471c <plug_holes+0x9c>
      lfree = mem;
 8004716:	4a25      	ldr	r2, [pc, #148]	@ (80047ac <plug_holes+0x12c>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	881a      	ldrh	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004724:	4b19      	ldr	r3, [pc, #100]	@ (800478c <plug_holes+0x10c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	1ad1      	subs	r1, r2, r3
 800472c:	4b17      	ldr	r3, [pc, #92]	@ (800478c <plug_holes+0x10c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	8812      	ldrh	r2, [r2, #0]
 8004734:	4413      	add	r3, r2
 8004736:	b28a      	uxth	r2, r1
 8004738:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800473a:	4b14      	ldr	r3, [pc, #80]	@ (800478c <plug_holes+0x10c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	8852      	ldrh	r2, [r2, #2]
 8004742:	4413      	add	r3, r2
 8004744:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	429a      	cmp	r2, r3
 800474c:	d01a      	beq.n	8004784 <plug_holes+0x104>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	791b      	ldrb	r3, [r3, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d116      	bne.n	8004784 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004756:	4b15      	ldr	r3, [pc, #84]	@ (80047ac <plug_holes+0x12c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	d102      	bne.n	8004766 <plug_holes+0xe6>
      lfree = pmem;
 8004760:	4a12      	ldr	r2, [pc, #72]	@ (80047ac <plug_holes+0x12c>)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	881a      	ldrh	r2, [r3, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800476e:	4b07      	ldr	r3, [pc, #28]	@ (800478c <plug_holes+0x10c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	1ad1      	subs	r1, r2, r3
 8004776:	4b05      	ldr	r3, [pc, #20]	@ (800478c <plug_holes+0x10c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	8812      	ldrh	r2, [r2, #0]
 800477e:	4413      	add	r3, r2
 8004780:	b28a      	uxth	r2, r1
 8004782:	805a      	strh	r2, [r3, #2]
  }
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	20005418 	.word	0x20005418
 8004790:	0800eb6c 	.word	0x0800eb6c
 8004794:	0800eb9c 	.word	0x0800eb9c
 8004798:	0800ebb4 	.word	0x0800ebb4
 800479c:	2000541c 	.word	0x2000541c
 80047a0:	0800ebdc 	.word	0x0800ebdc
 80047a4:	0800ebf8 	.word	0x0800ebf8
 80047a8:	0800ec14 	.word	0x0800ec14
 80047ac:	20005420 	.word	0x20005420

080047b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80047b6:	4b18      	ldr	r3, [pc, #96]	@ (8004818 <mem_init+0x68>)
 80047b8:	3303      	adds	r3, #3
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	461a      	mov	r2, r3
 80047c0:	4b16      	ldr	r3, [pc, #88]	@ (800481c <mem_init+0x6c>)
 80047c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80047c4:	4b15      	ldr	r3, [pc, #84]	@ (800481c <mem_init+0x6c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80047d0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80047de:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <mem_init+0x6c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 80047e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004820 <mem_init+0x70>)
 80047e8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <mem_init+0x70>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2201      	movs	r2, #1
 80047f0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80047f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <mem_init+0x70>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80047fa:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80047fc:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <mem_init+0x70>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004804:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004806:	4b05      	ldr	r3, [pc, #20]	@ (800481c <mem_init+0x6c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a06      	ldr	r2, [pc, #24]	@ (8004824 <mem_init+0x74>)
 800480c:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	20004dc4 	.word	0x20004dc4
 800481c:	20005418 	.word	0x20005418
 8004820:	2000541c 	.word	0x2000541c
 8004824:	20005420 	.word	0x20005420

08004828 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d043      	beq.n	80048be <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d006      	beq.n	800484e <mem_free+0x26>
 8004840:	4b22      	ldr	r3, [pc, #136]	@ (80048cc <mem_free+0xa4>)
 8004842:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8004846:	4922      	ldr	r1, [pc, #136]	@ (80048d0 <mem_free+0xa8>)
 8004848:	4822      	ldr	r0, [pc, #136]	@ (80048d4 <mem_free+0xac>)
 800484a:	f009 f971 	bl	800db30 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800484e:	4b22      	ldr	r3, [pc, #136]	@ (80048d8 <mem_free+0xb0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	429a      	cmp	r2, r3
 8004856:	d304      	bcc.n	8004862 <mem_free+0x3a>
 8004858:	4b20      	ldr	r3, [pc, #128]	@ (80048dc <mem_free+0xb4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d306      	bcc.n	8004870 <mem_free+0x48>
 8004862:	4b1a      	ldr	r3, [pc, #104]	@ (80048cc <mem_free+0xa4>)
 8004864:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8004868:	491d      	ldr	r1, [pc, #116]	@ (80048e0 <mem_free+0xb8>)
 800486a:	481a      	ldr	r0, [pc, #104]	@ (80048d4 <mem_free+0xac>)
 800486c:	f009 f960 	bl	800db30 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004870:	4b19      	ldr	r3, [pc, #100]	@ (80048d8 <mem_free+0xb0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d323      	bcc.n	80048c2 <mem_free+0x9a>
 800487a:	4b18      	ldr	r3, [pc, #96]	@ (80048dc <mem_free+0xb4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d21e      	bcs.n	80048c2 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3b08      	subs	r3, #8
 8004888:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	791b      	ldrb	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <mem_free+0x78>
 8004892:	4b0e      	ldr	r3, [pc, #56]	@ (80048cc <mem_free+0xa4>)
 8004894:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8004898:	4912      	ldr	r1, [pc, #72]	@ (80048e4 <mem_free+0xbc>)
 800489a:	480e      	ldr	r0, [pc, #56]	@ (80048d4 <mem_free+0xac>)
 800489c:	f009 f948 	bl	800db30 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80048a6:	4b10      	ldr	r3, [pc, #64]	@ (80048e8 <mem_free+0xc0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d202      	bcs.n	80048b6 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80048b0:	4a0d      	ldr	r2, [pc, #52]	@ (80048e8 <mem_free+0xc0>)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7ff fee2 	bl	8004680 <plug_holes>
 80048bc:	e002      	b.n	80048c4 <mem_free+0x9c>
    return;
 80048be:	bf00      	nop
 80048c0:	e000      	b.n	80048c4 <mem_free+0x9c>
    return;
 80048c2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	0800eb6c 	.word	0x0800eb6c
 80048d0:	0800ec40 	.word	0x0800ec40
 80048d4:	0800ebb4 	.word	0x0800ebb4
 80048d8:	20005418 	.word	0x20005418
 80048dc:	2000541c 	.word	0x2000541c
 80048e0:	0800ec64 	.word	0x0800ec64
 80048e4:	0800ec7c 	.word	0x0800ec7c
 80048e8:	20005420 	.word	0x20005420

080048ec <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	3303      	adds	r3, #3
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8004904:	887b      	ldrh	r3, [r7, #2]
 8004906:	2b0b      	cmp	r3, #11
 8004908:	d801      	bhi.n	800490e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800490a:	230c      	movs	r3, #12
 800490c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800490e:	887b      	ldrh	r3, [r7, #2]
 8004910:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004914:	d901      	bls.n	800491a <mem_trim+0x2e>
    return NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	e0b1      	b.n	8004a7e <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800491a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a88 <mem_trim+0x19c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d304      	bcc.n	800492e <mem_trim+0x42>
 8004924:	4b59      	ldr	r3, [pc, #356]	@ (8004a8c <mem_trim+0x1a0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d306      	bcc.n	800493c <mem_trim+0x50>
 800492e:	4b58      	ldr	r3, [pc, #352]	@ (8004a90 <mem_trim+0x1a4>)
 8004930:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8004934:	4957      	ldr	r1, [pc, #348]	@ (8004a94 <mem_trim+0x1a8>)
 8004936:	4858      	ldr	r0, [pc, #352]	@ (8004a98 <mem_trim+0x1ac>)
 8004938:	f009 f8fa 	bl	800db30 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800493c:	4b52      	ldr	r3, [pc, #328]	@ (8004a88 <mem_trim+0x19c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d304      	bcc.n	8004950 <mem_trim+0x64>
 8004946:	4b51      	ldr	r3, [pc, #324]	@ (8004a8c <mem_trim+0x1a0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	429a      	cmp	r2, r3
 800494e:	d301      	bcc.n	8004954 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	e094      	b.n	8004a7e <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3b08      	subs	r3, #8
 8004958:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800495a:	4b4b      	ldr	r3, [pc, #300]	@ (8004a88 <mem_trim+0x19c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	881a      	ldrh	r2, [r3, #0]
 8004968:	8a7b      	ldrh	r3, [r7, #18]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b08      	subs	r3, #8
 8004970:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004972:	887a      	ldrh	r2, [r7, #2]
 8004974:	8a3b      	ldrh	r3, [r7, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	d906      	bls.n	8004988 <mem_trim+0x9c>
 800497a:	4b45      	ldr	r3, [pc, #276]	@ (8004a90 <mem_trim+0x1a4>)
 800497c:	f240 2206 	movw	r2, #518	@ 0x206
 8004980:	4946      	ldr	r1, [pc, #280]	@ (8004a9c <mem_trim+0x1b0>)
 8004982:	4845      	ldr	r0, [pc, #276]	@ (8004a98 <mem_trim+0x1ac>)
 8004984:	f009 f8d4 	bl	800db30 <iprintf>
  if (newsize > size) {
 8004988:	887a      	ldrh	r2, [r7, #2]
 800498a:	8a3b      	ldrh	r3, [r7, #16]
 800498c:	429a      	cmp	r2, r3
 800498e:	d901      	bls.n	8004994 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	e074      	b.n	8004a7e <mem_trim+0x192>
  }
  if (newsize == size) {
 8004994:	887a      	ldrh	r2, [r7, #2]
 8004996:	8a3b      	ldrh	r3, [r7, #16]
 8004998:	429a      	cmp	r2, r3
 800499a:	d101      	bne.n	80049a0 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	e06e      	b.n	8004a7e <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80049a0:	4b39      	ldr	r3, [pc, #228]	@ (8004a88 <mem_trim+0x19c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	8812      	ldrh	r2, [r2, #0]
 80049a8:	4413      	add	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	791b      	ldrb	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d131      	bne.n	8004a18 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80049ba:	8a7a      	ldrh	r2, [r7, #18]
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	4413      	add	r3, r2
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3308      	adds	r3, #8
 80049c4:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80049c6:	4b36      	ldr	r3, [pc, #216]	@ (8004aa0 <mem_trim+0x1b4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d105      	bne.n	80049dc <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80049d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004a88 <mem_trim+0x19c>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	897b      	ldrh	r3, [r7, #10]
 80049d6:	4413      	add	r3, r2
 80049d8:	4a31      	ldr	r2, [pc, #196]	@ (8004aa0 <mem_trim+0x1b4>)
 80049da:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80049dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004a88 <mem_trim+0x19c>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	897b      	ldrh	r3, [r7, #10]
 80049e2:	4413      	add	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	893a      	ldrh	r2, [r7, #8]
 80049f0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8a7a      	ldrh	r2, [r7, #18]
 80049f6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	897a      	ldrh	r2, [r7, #10]
 80049fc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004a06:	d039      	beq.n	8004a7c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004a08:	4b1f      	ldr	r3, [pc, #124]	@ (8004a88 <mem_trim+0x19c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	8812      	ldrh	r2, [r2, #0]
 8004a10:	4413      	add	r3, r2
 8004a12:	897a      	ldrh	r2, [r7, #10]
 8004a14:	805a      	strh	r2, [r3, #2]
 8004a16:	e031      	b.n	8004a7c <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004a18:	887b      	ldrh	r3, [r7, #2]
 8004a1a:	f103 0214 	add.w	r2, r3, #20
 8004a1e:	8a3b      	ldrh	r3, [r7, #16]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d82b      	bhi.n	8004a7c <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004a24:	8a7a      	ldrh	r2, [r7, #18]
 8004a26:	887b      	ldrh	r3, [r7, #2]
 8004a28:	4413      	add	r3, r2
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004a30:	4b15      	ldr	r3, [pc, #84]	@ (8004a88 <mem_trim+0x19c>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	897b      	ldrh	r3, [r7, #10]
 8004a36:	4413      	add	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8004a3a:	4b19      	ldr	r3, [pc, #100]	@ (8004aa0 <mem_trim+0x1b4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d202      	bcs.n	8004a4a <mem_trim+0x15e>
      lfree = mem2;
 8004a44:	4a16      	ldr	r2, [pc, #88]	@ (8004aa0 <mem_trim+0x1b4>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	881a      	ldrh	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8a7a      	ldrh	r2, [r7, #18]
 8004a5c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	897a      	ldrh	r2, [r7, #10]
 8004a62:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004a6c:	d006      	beq.n	8004a7c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004a6e:	4b06      	ldr	r3, [pc, #24]	@ (8004a88 <mem_trim+0x19c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	8812      	ldrh	r2, [r2, #0]
 8004a76:	4413      	add	r3, r2
 8004a78:	897a      	ldrh	r2, [r7, #10]
 8004a7a:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004a7c:	687b      	ldr	r3, [r7, #4]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20005418 	.word	0x20005418
 8004a8c:	2000541c 	.word	0x2000541c
 8004a90:	0800eb6c 	.word	0x0800eb6c
 8004a94:	0800ec90 	.word	0x0800ec90
 8004a98:	0800ebb4 	.word	0x0800ebb4
 8004a9c:	0800eca8 	.word	0x0800eca8
 8004aa0:	20005420 	.word	0x20005420

08004aa4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <mem_malloc+0x14>
    return NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e0c7      	b.n	8004c48 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8004ab8:	88fb      	ldrh	r3, [r7, #6]
 8004aba:	3303      	adds	r3, #3
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f023 0303 	bic.w	r3, r3, #3
 8004ac2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	2b0b      	cmp	r3, #11
 8004ac8:	d801      	bhi.n	8004ace <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004aca:	230c      	movs	r3, #12
 8004acc:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004ad4:	d901      	bls.n	8004ada <mem_malloc+0x36>
    return NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e0b6      	b.n	8004c48 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004ada:	4b5d      	ldr	r3, [pc, #372]	@ (8004c50 <mem_malloc+0x1ac>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b5d      	ldr	r3, [pc, #372]	@ (8004c54 <mem_malloc+0x1b0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	83fb      	strh	r3, [r7, #30]
 8004ae6:	e0a7      	b.n	8004c38 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8004c54 <mem_malloc+0x1b0>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	8bfb      	ldrh	r3, [r7, #30]
 8004aee:	4413      	add	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	791b      	ldrb	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f040 8098 	bne.w	8004c2c <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	8bfb      	ldrh	r3, [r7, #30]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f1a3 0208 	sub.w	r2, r3, #8
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	f0c0 808d 	bcc.w	8004c2c <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	8bfb      	ldrh	r3, [r7, #30]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	f1a3 0208 	sub.w	r2, r3, #8
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	3314      	adds	r3, #20
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d327      	bcc.n	8004b78 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004b28:	8bfa      	ldrh	r2, [r7, #30]
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3308      	adds	r3, #8
 8004b32:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004b34:	4b47      	ldr	r3, [pc, #284]	@ (8004c54 <mem_malloc+0x1b0>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	8a7b      	ldrh	r3, [r7, #18]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8bfa      	ldrh	r2, [r7, #30]
 8004b50:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	8a7a      	ldrh	r2, [r7, #18]
 8004b56:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004b66:	d00a      	beq.n	8004b7e <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004b68:	4b3a      	ldr	r3, [pc, #232]	@ (8004c54 <mem_malloc+0x1b0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	8812      	ldrh	r2, [r2, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	8a7a      	ldrh	r2, [r7, #18]
 8004b74:	805a      	strh	r2, [r3, #2]
 8004b76:	e002      	b.n	8004b7e <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004b7e:	4b34      	ldr	r3, [pc, #208]	@ (8004c50 <mem_malloc+0x1ac>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d127      	bne.n	8004bd8 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8004b88:	4b31      	ldr	r3, [pc, #196]	@ (8004c50 <mem_malloc+0x1ac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004b8e:	e005      	b.n	8004b9c <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8004b90:	4b30      	ldr	r3, [pc, #192]	@ (8004c54 <mem_malloc+0x1b0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	8812      	ldrh	r2, [r2, #0]
 8004b98:	4413      	add	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	791b      	ldrb	r3, [r3, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <mem_malloc+0x10a>
 8004ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8004c58 <mem_malloc+0x1b4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d1f0      	bne.n	8004b90 <mem_malloc+0xec>
          }
          lfree = cur;
 8004bae:	4a28      	ldr	r2, [pc, #160]	@ (8004c50 <mem_malloc+0x1ac>)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004bb4:	4b26      	ldr	r3, [pc, #152]	@ (8004c50 <mem_malloc+0x1ac>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4b27      	ldr	r3, [pc, #156]	@ (8004c58 <mem_malloc+0x1b4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d00b      	beq.n	8004bd8 <mem_malloc+0x134>
 8004bc0:	4b23      	ldr	r3, [pc, #140]	@ (8004c50 <mem_malloc+0x1ac>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	791b      	ldrb	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d006      	beq.n	8004bd8 <mem_malloc+0x134>
 8004bca:	4b24      	ldr	r3, [pc, #144]	@ (8004c5c <mem_malloc+0x1b8>)
 8004bcc:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8004bd0:	4923      	ldr	r1, [pc, #140]	@ (8004c60 <mem_malloc+0x1bc>)
 8004bd2:	4824      	ldr	r0, [pc, #144]	@ (8004c64 <mem_malloc+0x1c0>)
 8004bd4:	f008 ffac 	bl	800db30 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004bd8:	88fa      	ldrh	r2, [r7, #6]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4413      	add	r3, r2
 8004bde:	3308      	adds	r3, #8
 8004be0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c58 <mem_malloc+0x1b4>)
 8004be2:	6812      	ldr	r2, [r2, #0]
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d906      	bls.n	8004bf6 <mem_malloc+0x152>
 8004be8:	4b1c      	ldr	r3, [pc, #112]	@ (8004c5c <mem_malloc+0x1b8>)
 8004bea:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8004bee:	491e      	ldr	r1, [pc, #120]	@ (8004c68 <mem_malloc+0x1c4>)
 8004bf0:	481c      	ldr	r0, [pc, #112]	@ (8004c64 <mem_malloc+0x1c0>)
 8004bf2:	f008 ff9d 	bl	800db30 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <mem_malloc+0x16a>
 8004c00:	4b16      	ldr	r3, [pc, #88]	@ (8004c5c <mem_malloc+0x1b8>)
 8004c02:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8004c06:	4919      	ldr	r1, [pc, #100]	@ (8004c6c <mem_malloc+0x1c8>)
 8004c08:	4816      	ldr	r0, [pc, #88]	@ (8004c64 <mem_malloc+0x1c0>)
 8004c0a:	f008 ff91 	bl	800db30 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d006      	beq.n	8004c26 <mem_malloc+0x182>
 8004c18:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <mem_malloc+0x1b8>)
 8004c1a:	f240 22d7 	movw	r2, #727	@ 0x2d7
 8004c1e:	4914      	ldr	r1, [pc, #80]	@ (8004c70 <mem_malloc+0x1cc>)
 8004c20:	4810      	ldr	r0, [pc, #64]	@ (8004c64 <mem_malloc+0x1c0>)
 8004c22:	f008 ff85 	bl	800db30 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	e00d      	b.n	8004c48 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004c2c:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <mem_malloc+0x1b0>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	8bfb      	ldrh	r3, [r7, #30]
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004c38:	8bfa      	ldrh	r2, [r7, #30]
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8004c40:	429a      	cmp	r2, r3
 8004c42:	f4ff af51 	bcc.w	8004ae8 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20005420 	.word	0x20005420
 8004c54:	20005418 	.word	0x20005418
 8004c58:	2000541c 	.word	0x2000541c
 8004c5c:	0800eb6c 	.word	0x0800eb6c
 8004c60:	0800ecc8 	.word	0x0800ecc8
 8004c64:	0800ebb4 	.word	0x0800ebb4
 8004c68:	0800ece4 	.word	0x0800ece4
 8004c6c:	0800ed14 	.word	0x0800ed14
 8004c70:	0800ed44 	.word	0x0800ed44

08004c74 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	3303      	adds	r3, #3
 8004c8a:	f023 0303 	bic.w	r3, r3, #3
 8004c8e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e011      	b.n	8004cba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	885b      	ldrh	r3, [r3, #2]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	dbe7      	blt.n	8004c96 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
	...

08004cd4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004cda:	2300      	movs	r3, #0
 8004cdc:	80fb      	strh	r3, [r7, #6]
 8004cde:	e009      	b.n	8004cf4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	4a08      	ldr	r2, [pc, #32]	@ (8004d04 <memp_init+0x30>)
 8004ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ffc3 	bl	8004c74 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	80fb      	strh	r3, [r7, #6]
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d9f2      	bls.n	8004ce0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004cfa:	bf00      	nop
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	080118a8 	.word	0x080118a8

08004d08 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d012      	beq.n	8004d44 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <do_memp_malloc_pool+0x38>
 8004d32:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <do_memp_malloc_pool+0x48>)
 8004d34:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8004d38:	4906      	ldr	r1, [pc, #24]	@ (8004d54 <do_memp_malloc_pool+0x4c>)
 8004d3a:	4807      	ldr	r0, [pc, #28]	@ (8004d58 <do_memp_malloc_pool+0x50>)
 8004d3c:	f008 fef8 	bl	800db30 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	e000      	b.n	8004d46 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	0800ed68 	.word	0x0800ed68
 8004d54:	0800ed98 	.word	0x0800ed98
 8004d58:	0800edbc 	.word	0x0800edbc

08004d5c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d908      	bls.n	8004d7e <memp_malloc+0x22>
 8004d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d98 <memp_malloc+0x3c>)
 8004d6e:	f240 1287 	movw	r2, #391	@ 0x187
 8004d72:	490a      	ldr	r1, [pc, #40]	@ (8004d9c <memp_malloc+0x40>)
 8004d74:	480a      	ldr	r0, [pc, #40]	@ (8004da0 <memp_malloc+0x44>)
 8004d76:	f008 fedb 	bl	800db30 <iprintf>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e008      	b.n	8004d90 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	4a08      	ldr	r2, [pc, #32]	@ (8004da4 <memp_malloc+0x48>)
 8004d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff ffbe 	bl	8004d08 <do_memp_malloc_pool>
 8004d8c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	0800ed68 	.word	0x0800ed68
 8004d9c:	0800edf8 	.word	0x0800edf8
 8004da0:	0800edbc 	.word	0x0800edbc
 8004da4:	080118a8 	.word	0x080118a8

08004da8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d006      	beq.n	8004dca <do_memp_free_pool+0x22>
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <do_memp_free_pool+0x40>)
 8004dbe:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8004dc2:	490a      	ldr	r1, [pc, #40]	@ (8004dec <do_memp_free_pool+0x44>)
 8004dc4:	480a      	ldr	r0, [pc, #40]	@ (8004df0 <do_memp_free_pool+0x48>)
 8004dc6:	f008 feb3 	bl	800db30 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	0800ed68 	.word	0x0800ed68
 8004dec:	0800ee18 	.word	0x0800ee18
 8004df0:	0800edbc 	.word	0x0800edbc

08004df4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	6039      	str	r1, [r7, #0]
 8004dfe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d907      	bls.n	8004e16 <memp_free+0x22>
 8004e06:	4b0c      	ldr	r3, [pc, #48]	@ (8004e38 <memp_free+0x44>)
 8004e08:	f240 12db 	movw	r2, #475	@ 0x1db
 8004e0c:	490b      	ldr	r1, [pc, #44]	@ (8004e3c <memp_free+0x48>)
 8004e0e:	480c      	ldr	r0, [pc, #48]	@ (8004e40 <memp_free+0x4c>)
 8004e10:	f008 fe8e 	bl	800db30 <iprintf>
 8004e14:	e00c      	b.n	8004e30 <memp_free+0x3c>

  if (mem == NULL) {
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	4a09      	ldr	r2, [pc, #36]	@ (8004e44 <memp_free+0x50>)
 8004e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff ffbe 	bl	8004da8 <do_memp_free_pool>
 8004e2c:	e000      	b.n	8004e30 <memp_free+0x3c>
    return;
 8004e2e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	0800ed68 	.word	0x0800ed68
 8004e3c:	0800ee38 	.word	0x0800ee38
 8004e40:	0800edbc 	.word	0x0800edbc
 8004e44:	080118a8 	.word	0x080118a8

08004e48 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004e4c:	bf00      	nop
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr

08004e54 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
 8004e60:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <netif_add+0x20>
 8004e68:	4b21      	ldr	r3, [pc, #132]	@ (8004ef0 <netif_add+0x9c>)
 8004e6a:	22fb      	movs	r2, #251	@ 0xfb
 8004e6c:	4921      	ldr	r1, [pc, #132]	@ (8004ef4 <netif_add+0xa0>)
 8004e6e:	4822      	ldr	r0, [pc, #136]	@ (8004ef8 <netif_add+0xa4>)
 8004e70:	f008 fe5e 	bl	800db30 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2203      	movs	r2, #3
 8004e92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8004ea2:	4b16      	ldr	r3, [pc, #88]	@ (8004efc <netif_add+0xa8>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	b2d1      	uxtb	r1, r2
 8004eaa:	4a14      	ldr	r2, [pc, #80]	@ (8004efc <netif_add+0xa8>)
 8004eac:	7011      	strb	r1, [r2, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
  netif->input = input;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a3a      	ldr	r2, [r7, #32]
 8004eb8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f81f 	bl	8004f04 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	4798      	blx	r3
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <netif_add+0x82>
    return NULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e007      	b.n	8004ee6 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <netif_add+0xac>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004ede:	4a08      	ldr	r2, [pc, #32]	@ (8004f00 <netif_add+0xac>)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	0800ee54 	.word	0x0800ee54
 8004ef4:	0800ee88 	.word	0x0800ee88
 8004ef8:	0800eea0 	.word	0x0800eea0
 8004efc:	20008304 	.word	0x20008304
 8004f00:	200082fc 	.word	0x200082fc

08004f04 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <netif_set_addr+0x1c>
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10c      	bne.n	8004f3a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f81a 	bl	8004f5c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f861 	bl	8004ff2 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f84a 	bl	8004fcc <netif_set_gw>
 8004f38:	e00c      	b.n	8004f54 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 f858 	bl	8004ff2 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f841 	bl	8004fcc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f805 	bl	8004f5c <netif_set_ipaddr>
  }
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <netif_set_ipaddr+0x18>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e002      	b.n	8004f7a <netif_set_ipaddr+0x1e>
 8004f74:	4b14      	ldr	r3, [pc, #80]	@ (8004fc8 <netif_set_ipaddr+0x6c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d01c      	beq.n	8004fc0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	f107 020c 	add.w	r2, r7, #12
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f002 faa3 	bl	80074dc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	f107 020c 	add.w	r2, r7, #12
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f006 faff 	bl	800b5a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <netif_set_ipaddr+0x56>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	e000      	b.n	8004fb4 <netif_set_ipaddr+0x58>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004fb8:	2101      	movs	r1, #1
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f85d 	bl	800507a <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8004fc0:	bf00      	nop
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	0801190c 	.word	0x0801190c

08004fcc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <netif_set_gw+0x16>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	e000      	b.n	8004fe4 <netif_set_gw+0x18>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr

08004ff2 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <netif_set_netmask+0x16>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	e000      	b.n	800500a <netif_set_netmask+0x18>
 8005008:	2300      	movs	r3, #0
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005020:	4a03      	ldr	r2, [pc, #12]	@ (8005030 <netif_set_default+0x18>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr
 8005030:	20008300 	.word	0x20008300

08005034 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d113      	bne.n	8005072 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	b2da      	uxtb	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005062:	f003 0304 	and.w	r3, r3, #4
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800506a:	2103      	movs	r1, #3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f804 	bl	800507a <netif_issue_reports>
    }
  }
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d011      	beq.n	80050b4 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d005      	beq.n	80050b4 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f007 f978 	bl	800c3a4 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80050b4:	bf00      	nop
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  if (netif) {
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	61da      	str	r2, [r3, #28]
  }
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80050e2:	4b0e      	ldr	r3, [pc, #56]	@ (800511c <pbuf_free_ooseq+0x40>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80050e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005120 <pbuf_free_ooseq+0x44>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	e00f      	b.n	8005110 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fc:	4618      	mov	r0, r3
 80050fe:	f001 fe60 	bl	8006dc2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 8005108:	e005      	b.n	8005116 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	607b      	str	r3, [r7, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1ec      	bne.n	80050f0 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20008305 	.word	0x20008305
 8005120:	20008314 	.word	0x20008314

08005124 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005128:	4b03      	ldr	r3, [pc, #12]	@ (8005138 <pbuf_pool_is_empty+0x14>)
 800512a:	2201      	movs	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800512e:	bf00      	nop
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20008305 	.word	0x20008305

0800513c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
 8005146:	460b      	mov	r3, r1
 8005148:	80bb      	strh	r3, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	2b04      	cmp	r3, #4
 8005152:	d81c      	bhi.n	800518e <pbuf_alloc+0x52>
 8005154:	a201      	add	r2, pc, #4	@ (adr r2, 800515c <pbuf_alloc+0x20>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	08005171 	.word	0x08005171
 8005160:	08005177 	.word	0x08005177
 8005164:	0800517d 	.word	0x0800517d
 8005168:	08005183 	.word	0x08005183
 800516c:	08005189 	.word	0x08005189
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005170:	2336      	movs	r3, #54	@ 0x36
 8005172:	82fb      	strh	r3, [r7, #22]
    break;
 8005174:	e014      	b.n	80051a0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005176:	2322      	movs	r3, #34	@ 0x22
 8005178:	82fb      	strh	r3, [r7, #22]
    break;
 800517a:	e011      	b.n	80051a0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800517c:	230e      	movs	r3, #14
 800517e:	82fb      	strh	r3, [r7, #22]
    break;
 8005180:	e00e      	b.n	80051a0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8005182:	2300      	movs	r3, #0
 8005184:	82fb      	strh	r3, [r7, #22]
    break;
 8005186:	e00b      	b.n	80051a0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	82fb      	strh	r3, [r7, #22]
    break;
 800518c:	e008      	b.n	80051a0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800518e:	4ba1      	ldr	r3, [pc, #644]	@ (8005414 <pbuf_alloc+0x2d8>)
 8005190:	f44f 728b 	mov.w	r2, #278	@ 0x116
 8005194:	49a0      	ldr	r1, [pc, #640]	@ (8005418 <pbuf_alloc+0x2dc>)
 8005196:	48a1      	ldr	r0, [pc, #644]	@ (800541c <pbuf_alloc+0x2e0>)
 8005198:	f008 fcca 	bl	800db30 <iprintf>
    return NULL;
 800519c:	2300      	movs	r3, #0
 800519e:	e15c      	b.n	800545a <pbuf_alloc+0x31e>
  }

  switch (type) {
 80051a0:	79bb      	ldrb	r3, [r7, #6]
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d00d      	beq.n	80051c2 <pbuf_alloc+0x86>
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	f300 8146 	bgt.w	8005438 <pbuf_alloc+0x2fc>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80d0 	beq.w	8005352 <pbuf_alloc+0x216>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f2c0 8140 	blt.w	8005438 <pbuf_alloc+0x2fc>
 80051b8:	3b01      	subs	r3, #1
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	f200 813c 	bhi.w	8005438 <pbuf_alloc+0x2fc>
 80051c0:	e10d      	b.n	80053de <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80051c2:	2008      	movs	r0, #8
 80051c4:	f7ff fdca 	bl	8004d5c <memp_malloc>
 80051c8:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d103      	bne.n	80051d8 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 80051d0:	f7ff ffa8 	bl	8005124 <pbuf_pool_is_empty>
      return NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e140      	b.n	800545a <pbuf_alloc+0x31e>
    }
    p->type = type;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	79ba      	ldrb	r2, [r7, #6]
 80051dc:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80051e4:	8afb      	ldrh	r3, [r7, #22]
 80051e6:	3310      	adds	r3, #16
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	3303      	adds	r3, #3
 80051ee:	f023 0303 	bic.w	r3, r3, #3
 80051f2:	461a      	mov	r2, r3
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <pbuf_alloc+0xd6>
 8005204:	4b83      	ldr	r3, [pc, #524]	@ (8005414 <pbuf_alloc+0x2d8>)
 8005206:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800520a:	4985      	ldr	r1, [pc, #532]	@ (8005420 <pbuf_alloc+0x2e4>)
 800520c:	4883      	ldr	r0, [pc, #524]	@ (800541c <pbuf_alloc+0x2e0>)
 800520e:	f008 fc8f 	bl	800db30 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	88ba      	ldrh	r2, [r7, #4]
 8005216:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8005218:	8afb      	ldrh	r3, [r7, #22]
 800521a:	3303      	adds	r3, #3
 800521c:	f023 0303 	bic.w	r3, r3, #3
 8005220:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 8005224:	88bb      	ldrh	r3, [r7, #4]
 8005226:	4293      	cmp	r3, r2
 8005228:	bf28      	it	cs
 800522a:	4613      	movcs	r3, r2
 800522c:	b29a      	uxth	r2, r3
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	8952      	ldrh	r2, [r2, #10]
 800523a:	441a      	add	r2, r3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005242:	429a      	cmp	r2, r3
 8005244:	d906      	bls.n	8005254 <pbuf_alloc+0x118>
 8005246:	4b73      	ldr	r3, [pc, #460]	@ (8005414 <pbuf_alloc+0x2d8>)
 8005248:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800524c:	4975      	ldr	r1, [pc, #468]	@ (8005424 <pbuf_alloc+0x2e8>)
 800524e:	4873      	ldr	r0, [pc, #460]	@ (800541c <pbuf_alloc+0x2e0>)
 8005250:	f008 fc6e 	bl	800db30 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005254:	8afb      	ldrh	r3, [r7, #22]
 8005256:	3303      	adds	r3, #3
 8005258:	f023 0303 	bic.w	r3, r3, #3
 800525c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8005260:	d106      	bne.n	8005270 <pbuf_alloc+0x134>
 8005262:	4b6c      	ldr	r3, [pc, #432]	@ (8005414 <pbuf_alloc+0x2d8>)
 8005264:	f240 1231 	movw	r2, #305	@ 0x131
 8005268:	496f      	ldr	r1, [pc, #444]	@ (8005428 <pbuf_alloc+0x2ec>)
 800526a:	486c      	ldr	r0, [pc, #432]	@ (800541c <pbuf_alloc+0x2e0>)
 800526c:	f008 fc60 	bl	800db30 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2201      	movs	r2, #1
 8005274:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800527a:	88bb      	ldrh	r3, [r7, #4]
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	8952      	ldrh	r2, [r2, #10]
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8005284:	e061      	b.n	800534a <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005286:	2008      	movs	r0, #8
 8005288:	f7ff fd68 	bl	8004d5c <memp_malloc>
 800528c:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8005294:	f7ff ff46 	bl	8005124 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8005298:	69f8      	ldr	r0, [r7, #28]
 800529a:	f000 fac7 	bl	800582c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	e0db      	b.n	800545a <pbuf_alloc+0x31e>
      }
      q->type = type;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	79ba      	ldrb	r2, [r7, #6]
 80052a6:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80052c0:	4293      	cmp	r3, r2
 80052c2:	dd06      	ble.n	80052d2 <pbuf_alloc+0x196>
 80052c4:	4b53      	ldr	r3, [pc, #332]	@ (8005414 <pbuf_alloc+0x2d8>)
 80052c6:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 80052ca:	4958      	ldr	r1, [pc, #352]	@ (800542c <pbuf_alloc+0x2f0>)
 80052cc:	4853      	ldr	r0, [pc, #332]	@ (800541c <pbuf_alloc+0x2e0>)
 80052ce:	f008 fc2f 	bl	800db30 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80052e2:	bf28      	it	cs
 80052e4:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f103 0210 	add.w	r2, r3, #16
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d006      	beq.n	8005312 <pbuf_alloc+0x1d6>
 8005304:	4b43      	ldr	r3, [pc, #268]	@ (8005414 <pbuf_alloc+0x2d8>)
 8005306:	f240 1251 	movw	r2, #337	@ 0x151
 800530a:	4949      	ldr	r1, [pc, #292]	@ (8005430 <pbuf_alloc+0x2f4>)
 800530c:	4843      	ldr	r0, [pc, #268]	@ (800541c <pbuf_alloc+0x2e0>)
 800530e:	f008 fc0f 	bl	800db30 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	8952      	ldrh	r2, [r2, #10]
 800531a:	441a      	add	r2, r3
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005322:	429a      	cmp	r2, r3
 8005324:	d906      	bls.n	8005334 <pbuf_alloc+0x1f8>
 8005326:	4b3b      	ldr	r3, [pc, #236]	@ (8005414 <pbuf_alloc+0x2d8>)
 8005328:	f240 1253 	movw	r2, #339	@ 0x153
 800532c:	493d      	ldr	r1, [pc, #244]	@ (8005424 <pbuf_alloc+0x2e8>)
 800532e:	483b      	ldr	r0, [pc, #236]	@ (800541c <pbuf_alloc+0x2e0>)
 8005330:	f008 fbfe 	bl	800db30 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	895b      	ldrh	r3, [r3, #10]
 800533e:	461a      	mov	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	dc9a      	bgt.n	8005286 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8005350:	e07c      	b.n	800544c <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8005352:	8afb      	ldrh	r3, [r7, #22]
 8005354:	3313      	adds	r3, #19
 8005356:	b29b      	uxth	r3, r3
 8005358:	f023 0303 	bic.w	r3, r3, #3
 800535c:	b29a      	uxth	r2, r3
 800535e:	88bb      	ldrh	r3, [r7, #4]
 8005360:	3303      	adds	r3, #3
 8005362:	b29b      	uxth	r3, r3
 8005364:	f023 0303 	bic.w	r3, r3, #3
 8005368:	b29b      	uxth	r3, r3
 800536a:	4413      	add	r3, r2
 800536c:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800536e:	897a      	ldrh	r2, [r7, #10]
 8005370:	88bb      	ldrh	r3, [r7, #4]
 8005372:	3303      	adds	r3, #3
 8005374:	f023 0303 	bic.w	r3, r3, #3
 8005378:	429a      	cmp	r2, r3
 800537a:	d201      	bcs.n	8005380 <pbuf_alloc+0x244>
        return NULL;
 800537c:	2300      	movs	r3, #0
 800537e:	e06c      	b.n	800545a <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8005380:	897b      	ldrh	r3, [r7, #10]
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fb8e 	bl	8004aa4 <mem_malloc>
 8005388:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <pbuf_alloc+0x258>
      return NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	e062      	b.n	800545a <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005394:	8afb      	ldrh	r3, [r7, #22]
 8005396:	3310      	adds	r3, #16
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	3303      	adds	r3, #3
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	461a      	mov	r2, r3
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	88ba      	ldrh	r2, [r7, #4]
 80053ac:	811a      	strh	r2, [r3, #8]
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	891a      	ldrh	r2, [r3, #8]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
    p->type = type;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	79ba      	ldrb	r2, [r7, #6]
 80053c0:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d03d      	beq.n	800544a <pbuf_alloc+0x30e>
 80053ce:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <pbuf_alloc+0x2d8>)
 80053d0:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 80053d4:	4917      	ldr	r1, [pc, #92]	@ (8005434 <pbuf_alloc+0x2f8>)
 80053d6:	4811      	ldr	r0, [pc, #68]	@ (800541c <pbuf_alloc+0x2e0>)
 80053d8:	f008 fbaa 	bl	800db30 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80053dc:	e035      	b.n	800544a <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80053de:	2007      	movs	r0, #7
 80053e0:	f7ff fcbc 	bl	8004d5c <memp_malloc>
 80053e4:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	e034      	b.n	800545a <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2200      	movs	r2, #0
 80053f4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	88ba      	ldrh	r2, [r7, #4]
 80053fa:	811a      	strh	r2, [r3, #8]
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	891a      	ldrh	r2, [r3, #8]
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
    p->type = type;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	79ba      	ldrb	r2, [r7, #6]
 800540e:	731a      	strb	r2, [r3, #12]
    break;
 8005410:	e01c      	b.n	800544c <pbuf_alloc+0x310>
 8005412:	bf00      	nop
 8005414:	0800eec8 	.word	0x0800eec8
 8005418:	0800eef8 	.word	0x0800eef8
 800541c:	0800ef14 	.word	0x0800ef14
 8005420:	0800ef3c 	.word	0x0800ef3c
 8005424:	0800ef6c 	.word	0x0800ef6c
 8005428:	0800efa0 	.word	0x0800efa0
 800542c:	0800efd4 	.word	0x0800efd4
 8005430:	0800efe8 	.word	0x0800efe8
 8005434:	0800f018 	.word	0x0800f018
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005438:	4b0a      	ldr	r3, [pc, #40]	@ (8005464 <pbuf_alloc+0x328>)
 800543a:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800543e:	490a      	ldr	r1, [pc, #40]	@ (8005468 <pbuf_alloc+0x32c>)
 8005440:	480a      	ldr	r0, [pc, #40]	@ (800546c <pbuf_alloc+0x330>)
 8005442:	f008 fb75 	bl	800db30 <iprintf>
    return NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	e007      	b.n	800545a <pbuf_alloc+0x31e>
    break;
 800544a:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2201      	movs	r2, #1
 8005450:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	2200      	movs	r2, #0
 8005456:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005458:	69fb      	ldr	r3, [r7, #28]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	0800eec8 	.word	0x0800eec8
 8005468:	0800f044 	.word	0x0800f044
 800546c:	0800ef14 	.word	0x0800ef14

08005470 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4603      	mov	r3, r0
 800547a:	71fb      	strb	r3, [r7, #7]
 800547c:	460b      	mov	r3, r1
 800547e:	80bb      	strh	r3, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	2b04      	cmp	r3, #4
 8005488:	d81b      	bhi.n	80054c2 <pbuf_alloced_custom+0x52>
 800548a:	a201      	add	r2, pc, #4	@ (adr r2, 8005490 <pbuf_alloced_custom+0x20>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054a5 	.word	0x080054a5
 8005494:	080054ab 	.word	0x080054ab
 8005498:	080054b1 	.word	0x080054b1
 800549c:	080054b7 	.word	0x080054b7
 80054a0:	080054bd 	.word	0x080054bd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80054a4:	2336      	movs	r3, #54	@ 0x36
 80054a6:	81fb      	strh	r3, [r7, #14]
    break;
 80054a8:	e014      	b.n	80054d4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80054aa:	2322      	movs	r3, #34	@ 0x22
 80054ac:	81fb      	strh	r3, [r7, #14]
    break;
 80054ae:	e011      	b.n	80054d4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80054b0:	230e      	movs	r3, #14
 80054b2:	81fb      	strh	r3, [r7, #14]
    break;
 80054b4:	e00e      	b.n	80054d4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80054b6:	2300      	movs	r3, #0
 80054b8:	81fb      	strh	r3, [r7, #14]
    break;
 80054ba:	e00b      	b.n	80054d4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80054bc:	2300      	movs	r3, #0
 80054be:	81fb      	strh	r3, [r7, #14]
    break;
 80054c0:	e008      	b.n	80054d4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80054c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005538 <pbuf_alloced_custom+0xc8>)
 80054c4:	f240 12c5 	movw	r2, #453	@ 0x1c5
 80054c8:	491c      	ldr	r1, [pc, #112]	@ (800553c <pbuf_alloced_custom+0xcc>)
 80054ca:	481d      	ldr	r0, [pc, #116]	@ (8005540 <pbuf_alloced_custom+0xd0>)
 80054cc:	f008 fb30 	bl	800db30 <iprintf>
    return NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	e02d      	b.n	8005530 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80054d4:	89fb      	ldrh	r3, [r7, #14]
 80054d6:	3303      	adds	r3, #3
 80054d8:	f023 0203 	bic.w	r2, r3, #3
 80054dc:	88bb      	ldrh	r3, [r7, #4]
 80054de:	441a      	add	r2, r3
 80054e0:	8bbb      	ldrh	r3, [r7, #28]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d901      	bls.n	80054ea <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e022      	b.n	8005530 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d008      	beq.n	8005508 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80054f6:	89fb      	ldrh	r3, [r7, #14]
 80054f8:	3303      	adds	r3, #3
 80054fa:	f023 0303 	bic.w	r3, r3, #3
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	441a      	add	r2, r3
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	e002      	b.n	800550e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2202      	movs	r2, #2
 8005512:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	88ba      	ldrh	r2, [r7, #4]
 8005518:	811a      	strh	r2, [r3, #8]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	891a      	ldrh	r2, [r3, #8]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	79ba      	ldrb	r2, [r7, #6]
 8005526:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2201      	movs	r2, #1
 800552c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800552e:	683b      	ldr	r3, [r7, #0]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	0800eec8 	.word	0x0800eec8
 800553c:	0800f060 	.word	0x0800f060
 8005540:	0800ef14 	.word	0x0800ef14

08005544 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <pbuf_realloc+0x20>
 8005556:	4b4b      	ldr	r3, [pc, #300]	@ (8005684 <pbuf_realloc+0x140>)
 8005558:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800555c:	494a      	ldr	r1, [pc, #296]	@ (8005688 <pbuf_realloc+0x144>)
 800555e:	484b      	ldr	r0, [pc, #300]	@ (800568c <pbuf_realloc+0x148>)
 8005560:	f008 fae6 	bl	800db30 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	7b1b      	ldrb	r3, [r3, #12]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d012      	beq.n	8005592 <pbuf_realloc+0x4e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7b1b      	ldrb	r3, [r3, #12]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d00e      	beq.n	8005592 <pbuf_realloc+0x4e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	7b1b      	ldrb	r3, [r3, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00a      	beq.n	8005592 <pbuf_realloc+0x4e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	7b1b      	ldrb	r3, [r3, #12]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d006      	beq.n	8005592 <pbuf_realloc+0x4e>
 8005584:	4b3f      	ldr	r3, [pc, #252]	@ (8005684 <pbuf_realloc+0x140>)
 8005586:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800558a:	4941      	ldr	r1, [pc, #260]	@ (8005690 <pbuf_realloc+0x14c>)
 800558c:	483f      	ldr	r0, [pc, #252]	@ (800568c <pbuf_realloc+0x148>)
 800558e:	f008 facf 	bl	800db30 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	891b      	ldrh	r3, [r3, #8]
 8005596:	887a      	ldrh	r2, [r7, #2]
 8005598:	429a      	cmp	r2, r3
 800559a:	d26e      	bcs.n	800567a <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800559c:	887b      	ldrh	r3, [r7, #2]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	8912      	ldrh	r2, [r2, #8]
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80055a6:	887b      	ldrh	r3, [r7, #2]
 80055a8:	827b      	strh	r3, [r7, #18]
  q = p;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80055ae:	e025      	b.n	80055fc <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	895b      	ldrh	r3, [r3, #10]
 80055b4:	8a7a      	ldrh	r2, [r7, #18]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80055c0:	4293      	cmp	r3, r2
 80055c2:	dd06      	ble.n	80055d2 <pbuf_realloc+0x8e>
 80055c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005684 <pbuf_realloc+0x140>)
 80055c6:	f240 220b 	movw	r2, #523	@ 0x20b
 80055ca:	4932      	ldr	r1, [pc, #200]	@ (8005694 <pbuf_realloc+0x150>)
 80055cc:	482f      	ldr	r0, [pc, #188]	@ (800568c <pbuf_realloc+0x148>)
 80055ce:	f008 faaf 	bl	800db30 <iprintf>
    q->tot_len += (u16_t)grow;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	891a      	ldrh	r2, [r3, #8]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4413      	add	r3, r2
 80055dc:	b29a      	uxth	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d106      	bne.n	80055fc <pbuf_realloc+0xb8>
 80055ee:	4b25      	ldr	r3, [pc, #148]	@ (8005684 <pbuf_realloc+0x140>)
 80055f0:	f240 220f 	movw	r2, #527	@ 0x20f
 80055f4:	4928      	ldr	r1, [pc, #160]	@ (8005698 <pbuf_realloc+0x154>)
 80055f6:	4825      	ldr	r0, [pc, #148]	@ (800568c <pbuf_realloc+0x148>)
 80055f8:	f008 fa9a 	bl	800db30 <iprintf>
  while (rem_len > q->len) {
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	895b      	ldrh	r3, [r3, #10]
 8005600:	8a7a      	ldrh	r2, [r7, #18]
 8005602:	429a      	cmp	r2, r3
 8005604:	d8d4      	bhi.n	80055b0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	7b1b      	ldrb	r3, [r3, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d121      	bne.n	8005652 <pbuf_realloc+0x10e>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	895b      	ldrh	r3, [r3, #10]
 8005612:	8a7a      	ldrh	r2, [r7, #18]
 8005614:	429a      	cmp	r2, r3
 8005616:	d01c      	beq.n	8005652 <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	7b5b      	ldrb	r3, [r3, #13]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d116      	bne.n	8005652 <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	b29a      	uxth	r2, r3
 800562e:	8a7b      	ldrh	r3, [r7, #18]
 8005630:	4413      	add	r3, r2
 8005632:	b29b      	uxth	r3, r3
 8005634:	4619      	mov	r1, r3
 8005636:	6978      	ldr	r0, [r7, #20]
 8005638:	f7ff f958 	bl	80048ec <mem_trim>
 800563c:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <pbuf_realloc+0x10e>
 8005644:	4b0f      	ldr	r3, [pc, #60]	@ (8005684 <pbuf_realloc+0x140>)
 8005646:	f240 221d 	movw	r2, #541	@ 0x21d
 800564a:	4914      	ldr	r1, [pc, #80]	@ (800569c <pbuf_realloc+0x158>)
 800564c:	480f      	ldr	r0, [pc, #60]	@ (800568c <pbuf_realloc+0x148>)
 800564e:	f008 fa6f 	bl	800db30 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	8a7a      	ldrh	r2, [r7, #18]
 8005656:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	895a      	ldrh	r2, [r3, #10]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d004      	beq.n	8005672 <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 f8dd 	bl	800582c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e000      	b.n	800567c <pbuf_realloc+0x138>
    return;
 800567a:	bf00      	nop

}
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	0800eec8 	.word	0x0800eec8
 8005688:	0800f084 	.word	0x0800f084
 800568c:	0800ef14 	.word	0x0800ef14
 8005690:	0800f09c 	.word	0x0800f09c
 8005694:	0800f0b8 	.word	0x0800f0b8
 8005698:	0800f0cc 	.word	0x0800f0cc
 800569c:	0800f0e4 	.word	0x0800f0e4

080056a0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	807b      	strh	r3, [r7, #2]
 80056ac:	4613      	mov	r3, r2
 80056ae:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <pbuf_header_impl+0x24>
 80056b6:	4b46      	ldr	r3, [pc, #280]	@ (80057d0 <pbuf_header_impl+0x130>)
 80056b8:	f240 223f 	movw	r2, #575	@ 0x23f
 80056bc:	4945      	ldr	r1, [pc, #276]	@ (80057d4 <pbuf_header_impl+0x134>)
 80056be:	4846      	ldr	r0, [pc, #280]	@ (80057d8 <pbuf_header_impl+0x138>)
 80056c0:	f008 fa36 	bl	800db30 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80056c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <pbuf_header_impl+0x32>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <pbuf_header_impl+0x36>
    return 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e078      	b.n	80057c8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80056d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	da10      	bge.n	8005700 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80056de:	887b      	ldrh	r3, [r7, #2]
 80056e0:	425b      	negs	r3, r3
 80056e2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	895b      	ldrh	r3, [r3, #10]
 80056e8:	89fa      	ldrh	r2, [r7, #14]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d90a      	bls.n	8005704 <pbuf_header_impl+0x64>
 80056ee:	4b38      	ldr	r3, [pc, #224]	@ (80057d0 <pbuf_header_impl+0x130>)
 80056f0:	f240 2247 	movw	r2, #583	@ 0x247
 80056f4:	4939      	ldr	r1, [pc, #228]	@ (80057dc <pbuf_header_impl+0x13c>)
 80056f6:	4838      	ldr	r0, [pc, #224]	@ (80057d8 <pbuf_header_impl+0x138>)
 80056f8:	f008 fa1a 	bl	800db30 <iprintf>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e063      	b.n	80057c8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8005700:	887b      	ldrh	r3, [r7, #2]
 8005702:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	7b1b      	ldrb	r3, [r3, #12]
 8005708:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8005710:	89bb      	ldrh	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <pbuf_header_impl+0x7c>
 8005716:	89bb      	ldrh	r3, [r7, #12]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d112      	bne.n	8005742 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005724:	425b      	negs	r3, r3
 8005726:	441a      	add	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3310      	adds	r3, #16
 8005734:	429a      	cmp	r2, r3
 8005736:	d238      	bcs.n	80057aa <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800573e:	2301      	movs	r3, #1
 8005740:	e042      	b.n	80057c8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8005742:	89bb      	ldrh	r3, [r7, #12]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d002      	beq.n	800574e <pbuf_header_impl+0xae>
 8005748:	89bb      	ldrh	r3, [r7, #12]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d124      	bne.n	8005798 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800574e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005752:	2b00      	cmp	r3, #0
 8005754:	da0d      	bge.n	8005772 <pbuf_header_impl+0xd2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	895b      	ldrh	r3, [r3, #10]
 800575a:	89fa      	ldrh	r2, [r7, #14]
 800575c:	429a      	cmp	r2, r3
 800575e:	d808      	bhi.n	8005772 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005768:	425b      	negs	r3, r3
 800576a:	441a      	add	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	605a      	str	r2, [r3, #4]
 8005770:	e011      	b.n	8005796 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8005772:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005776:	2b00      	cmp	r3, #0
 8005778:	dd0b      	ble.n	8005792 <pbuf_header_impl+0xf2>
 800577a:	787b      	ldrb	r3, [r7, #1]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005788:	425b      	negs	r3, r3
 800578a:	441a      	add	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	605a      	str	r2, [r3, #4]
 8005790:	e001      	b.n	8005796 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005792:	2301      	movs	r3, #1
 8005794:	e018      	b.n	80057c8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005796:	e008      	b.n	80057aa <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8005798:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <pbuf_header_impl+0x130>)
 800579a:	f240 2277 	movw	r2, #631	@ 0x277
 800579e:	4910      	ldr	r1, [pc, #64]	@ (80057e0 <pbuf_header_impl+0x140>)
 80057a0:	480d      	ldr	r0, [pc, #52]	@ (80057d8 <pbuf_header_impl+0x138>)
 80057a2:	f008 f9c5 	bl	800db30 <iprintf>
    return 1;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e00e      	b.n	80057c8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	895a      	ldrh	r2, [r3, #10]
 80057ae:	887b      	ldrh	r3, [r7, #2]
 80057b0:	4413      	add	r3, r2
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	891a      	ldrh	r2, [r3, #8]
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	4413      	add	r3, r2
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	0800eec8 	.word	0x0800eec8
 80057d4:	0800f100 	.word	0x0800f100
 80057d8:	0800ef14 	.word	0x0800ef14
 80057dc:	0800f10c 	.word	0x0800f10c
 80057e0:	0800f12c 	.word	0x0800f12c

080057e4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80057f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057f4:	2200      	movs	r2, #0
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff ff51 	bl	80056a0 <pbuf_header_impl>
 80057fe:	4603      	mov	r3, r0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8005814:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005818:	2201      	movs	r2, #1
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff3f 	bl	80056a0 <pbuf_header_impl>
 8005822:	4603      	mov	r3, r0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <pbuf_free+0x22>
 8005840:	4b3e      	ldr	r3, [pc, #248]	@ (800593c <pbuf_free+0x110>)
 8005842:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8005846:	493e      	ldr	r1, [pc, #248]	@ (8005940 <pbuf_free+0x114>)
 8005848:	483e      	ldr	r0, [pc, #248]	@ (8005944 <pbuf_free+0x118>)
 800584a:	f008 f971 	bl	800db30 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800584e:	2300      	movs	r3, #0
 8005850:	e070      	b.n	8005934 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	7b1b      	ldrb	r3, [r3, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d012      	beq.n	8005880 <pbuf_free+0x54>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	7b1b      	ldrb	r3, [r3, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d00e      	beq.n	8005880 <pbuf_free+0x54>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	7b1b      	ldrb	r3, [r3, #12]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d00a      	beq.n	8005880 <pbuf_free+0x54>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	7b1b      	ldrb	r3, [r3, #12]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d006      	beq.n	8005880 <pbuf_free+0x54>
 8005872:	4b32      	ldr	r3, [pc, #200]	@ (800593c <pbuf_free+0x110>)
 8005874:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8005878:	4933      	ldr	r1, [pc, #204]	@ (8005948 <pbuf_free+0x11c>)
 800587a:	4832      	ldr	r0, [pc, #200]	@ (8005944 <pbuf_free+0x118>)
 800587c:	f008 f958 	bl	800db30 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005884:	e052      	b.n	800592c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	89db      	ldrh	r3, [r3, #14]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <pbuf_free+0x70>
 800588e:	4b2b      	ldr	r3, [pc, #172]	@ (800593c <pbuf_free+0x110>)
 8005890:	f240 22eb 	movw	r2, #747	@ 0x2eb
 8005894:	492d      	ldr	r1, [pc, #180]	@ (800594c <pbuf_free+0x120>)
 8005896:	482b      	ldr	r0, [pc, #172]	@ (8005944 <pbuf_free+0x118>)
 8005898:	f008 f94a 	bl	800db30 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	89db      	ldrh	r3, [r3, #14]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	81da      	strh	r2, [r3, #14]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	89db      	ldrh	r3, [r3, #14]
 80058ac:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80058ae:	8abb      	ldrh	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d139      	bne.n	8005928 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	7b1b      	ldrb	r3, [r3, #12]
 80058be:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	7b5b      	ldrb	r3, [r3, #13]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d011      	beq.n	80058f0 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d106      	bne.n	80058e6 <pbuf_free+0xba>
 80058d8:	4b18      	ldr	r3, [pc, #96]	@ (800593c <pbuf_free+0x110>)
 80058da:	f240 22f9 	movw	r2, #761	@ 0x2f9
 80058de:	491c      	ldr	r1, [pc, #112]	@ (8005950 <pbuf_free+0x124>)
 80058e0:	4818      	ldr	r0, [pc, #96]	@ (8005944 <pbuf_free+0x118>)
 80058e2:	f008 f925 	bl	800db30 <iprintf>
        pc->custom_free_function(p);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
 80058ee:	e015      	b.n	800591c <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80058f0:	89fb      	ldrh	r3, [r7, #14]
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d104      	bne.n	8005900 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	2008      	movs	r0, #8
 80058fa:	f7ff fa7b 	bl	8004df4 <memp_free>
 80058fe:	e00d      	b.n	800591c <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8005900:	89fb      	ldrh	r3, [r7, #14]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d002      	beq.n	800590c <pbuf_free+0xe0>
 8005906:	89fb      	ldrh	r3, [r7, #14]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d104      	bne.n	8005916 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	2007      	movs	r0, #7
 8005910:	f7ff fa70 	bl	8004df4 <memp_free>
 8005914:	e002      	b.n	800591c <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fe ff86 	bl	8004828 <mem_free>
        }
      }
      count++;
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	3301      	adds	r3, #1
 8005920:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	607b      	str	r3, [r7, #4]
 8005926:	e001      	b.n	800592c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005928:	2300      	movs	r3, #0
 800592a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d1a9      	bne.n	8005886 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005932:	7dfb      	ldrb	r3, [r7, #23]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	0800eec8 	.word	0x0800eec8
 8005940:	0800f100 	.word	0x0800f100
 8005944:	0800ef14 	.word	0x0800ef14
 8005948:	0800f13c 	.word	0x0800f13c
 800594c:	0800f154 	.word	0x0800f154
 8005950:	0800f16c 	.word	0x0800f16c

08005954 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800595c:	2300      	movs	r3, #0
 800595e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005960:	e005      	b.n	800596e <pbuf_clen+0x1a>
    ++len;
 8005962:	89fb      	ldrh	r3, [r7, #14]
 8005964:	3301      	adds	r3, #1
 8005966:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f6      	bne.n	8005962 <pbuf_clen+0xe>
  }
  return len;
 8005974:	89fb      	ldrh	r3, [r7, #14]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d010      	beq.n	80059b0 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	89db      	ldrh	r3, [r3, #14]
 8005992:	3301      	adds	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	89db      	ldrh	r3, [r3, #14]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <pbuf_ref+0x30>
 80059a2:	4b05      	ldr	r3, [pc, #20]	@ (80059b8 <pbuf_ref+0x38>)
 80059a4:	f240 3239 	movw	r2, #825	@ 0x339
 80059a8:	4904      	ldr	r1, [pc, #16]	@ (80059bc <pbuf_ref+0x3c>)
 80059aa:	4805      	ldr	r0, [pc, #20]	@ (80059c0 <pbuf_ref+0x40>)
 80059ac:	f008 f8c0 	bl	800db30 <iprintf>
  }
}
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	0800eec8 	.word	0x0800eec8
 80059bc:	0800f190 	.word	0x0800f190
 80059c0:	0800ef14 	.word	0x0800ef14

080059c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <pbuf_cat+0x16>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d107      	bne.n	80059ea <pbuf_cat+0x26>
 80059da:	4b20      	ldr	r3, [pc, #128]	@ (8005a5c <pbuf_cat+0x98>)
 80059dc:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 80059e0:	491f      	ldr	r1, [pc, #124]	@ (8005a60 <pbuf_cat+0x9c>)
 80059e2:	4820      	ldr	r0, [pc, #128]	@ (8005a64 <pbuf_cat+0xa0>)
 80059e4:	f008 f8a4 	bl	800db30 <iprintf>
 80059e8:	e034      	b.n	8005a54 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e00a      	b.n	8005a06 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	891a      	ldrh	r2, [r3, #8]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	891b      	ldrh	r3, [r3, #8]
 80059f8:	4413      	add	r3, r2
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	891a      	ldrh	r2, [r3, #8]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	895b      	ldrh	r3, [r3, #10]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d006      	beq.n	8005a28 <pbuf_cat+0x64>
 8005a1a:	4b10      	ldr	r3, [pc, #64]	@ (8005a5c <pbuf_cat+0x98>)
 8005a1c:	f240 3255 	movw	r2, #853	@ 0x355
 8005a20:	4911      	ldr	r1, [pc, #68]	@ (8005a68 <pbuf_cat+0xa4>)
 8005a22:	4810      	ldr	r0, [pc, #64]	@ (8005a64 <pbuf_cat+0xa0>)
 8005a24:	f008 f884 	bl	800db30 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d006      	beq.n	8005a3e <pbuf_cat+0x7a>
 8005a30:	4b0a      	ldr	r3, [pc, #40]	@ (8005a5c <pbuf_cat+0x98>)
 8005a32:	f240 3256 	movw	r2, #854	@ 0x356
 8005a36:	490d      	ldr	r1, [pc, #52]	@ (8005a6c <pbuf_cat+0xa8>)
 8005a38:	480a      	ldr	r0, [pc, #40]	@ (8005a64 <pbuf_cat+0xa0>)
 8005a3a:	f008 f879 	bl	800db30 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	891a      	ldrh	r2, [r3, #8]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	891b      	ldrh	r3, [r3, #8]
 8005a46:	4413      	add	r3, r2
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	0800eec8 	.word	0x0800eec8
 8005a60:	0800f1a4 	.word	0x0800f1a4
 8005a64:	0800ef14 	.word	0x0800ef14
 8005a68:	0800f1dc 	.word	0x0800f1dc
 8005a6c:	0800f20c 	.word	0x0800f20c

08005a70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	81fb      	strh	r3, [r7, #14]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <pbuf_copy+0x2a>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <pbuf_copy+0x2a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	891a      	ldrh	r2, [r3, #8]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	891b      	ldrh	r3, [r3, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d209      	bcs.n	8005aae <pbuf_copy+0x3e>
 8005a9a:	4b54      	ldr	r3, [pc, #336]	@ (8005bec <pbuf_copy+0x17c>)
 8005a9c:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 8005aa0:	4953      	ldr	r1, [pc, #332]	@ (8005bf0 <pbuf_copy+0x180>)
 8005aa2:	4854      	ldr	r0, [pc, #336]	@ (8005bf4 <pbuf_copy+0x184>)
 8005aa4:	f008 f844 	bl	800db30 <iprintf>
 8005aa8:	f06f 030f 	mvn.w	r3, #15
 8005aac:	e099      	b.n	8005be2 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	895b      	ldrh	r3, [r3, #10]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	89fb      	ldrh	r3, [r7, #14]
 8005ab6:	1ad2      	subs	r2, r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	895b      	ldrh	r3, [r3, #10]
 8005abc:	4619      	mov	r1, r3
 8005abe:	89bb      	ldrh	r3, [r7, #12]
 8005ac0:	1acb      	subs	r3, r1, r3
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	db05      	blt.n	8005ad2 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	895a      	ldrh	r2, [r3, #10]
 8005aca:	89bb      	ldrh	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	817b      	strh	r3, [r7, #10]
 8005ad0:	e004      	b.n	8005adc <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	895a      	ldrh	r2, [r3, #10]
 8005ad6:	89fb      	ldrh	r3, [r7, #14]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	89fb      	ldrh	r3, [r7, #14]
 8005ae2:	18d0      	adds	r0, r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	89bb      	ldrh	r3, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	897a      	ldrh	r2, [r7, #10]
 8005aee:	4619      	mov	r1, r3
 8005af0:	f008 f917 	bl	800dd22 <memcpy>
    offset_to += len;
 8005af4:	89fa      	ldrh	r2, [r7, #14]
 8005af6:	897b      	ldrh	r3, [r7, #10]
 8005af8:	4413      	add	r3, r2
 8005afa:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8005afc:	89ba      	ldrh	r2, [r7, #12]
 8005afe:	897b      	ldrh	r3, [r7, #10]
 8005b00:	4413      	add	r3, r2
 8005b02:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	895b      	ldrh	r3, [r3, #10]
 8005b08:	89fa      	ldrh	r2, [r7, #14]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d906      	bls.n	8005b1c <pbuf_copy+0xac>
 8005b0e:	4b37      	ldr	r3, [pc, #220]	@ (8005bec <pbuf_copy+0x17c>)
 8005b10:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8005b14:	4938      	ldr	r1, [pc, #224]	@ (8005bf8 <pbuf_copy+0x188>)
 8005b16:	4837      	ldr	r0, [pc, #220]	@ (8005bf4 <pbuf_copy+0x184>)
 8005b18:	f008 f80a 	bl	800db30 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	895b      	ldrh	r3, [r3, #10]
 8005b20:	89ba      	ldrh	r2, [r7, #12]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d906      	bls.n	8005b34 <pbuf_copy+0xc4>
 8005b26:	4b31      	ldr	r3, [pc, #196]	@ (8005bec <pbuf_copy+0x17c>)
 8005b28:	f240 32ce 	movw	r2, #974	@ 0x3ce
 8005b2c:	4933      	ldr	r1, [pc, #204]	@ (8005bfc <pbuf_copy+0x18c>)
 8005b2e:	4831      	ldr	r0, [pc, #196]	@ (8005bf4 <pbuf_copy+0x184>)
 8005b30:	f007 fffe 	bl	800db30 <iprintf>
    if (offset_from >= p_from->len) {
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	895b      	ldrh	r3, [r3, #10]
 8005b38:	89ba      	ldrh	r2, [r7, #12]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d304      	bcc.n	8005b48 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	895b      	ldrh	r3, [r3, #10]
 8005b4c:	89fa      	ldrh	r2, [r7, #14]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d114      	bne.n	8005b7c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10c      	bne.n	8005b7c <pbuf_copy+0x10c>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d009      	beq.n	8005b7c <pbuf_copy+0x10c>
 8005b68:	4b20      	ldr	r3, [pc, #128]	@ (8005bec <pbuf_copy+0x17c>)
 8005b6a:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8005b6e:	4924      	ldr	r1, [pc, #144]	@ (8005c00 <pbuf_copy+0x190>)
 8005b70:	4820      	ldr	r0, [pc, #128]	@ (8005bf4 <pbuf_copy+0x184>)
 8005b72:	f007 ffdd 	bl	800db30 <iprintf>
 8005b76:	f06f 030f 	mvn.w	r3, #15
 8005b7a:	e032      	b.n	8005be2 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d013      	beq.n	8005baa <pbuf_copy+0x13a>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	895a      	ldrh	r2, [r3, #10]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	891b      	ldrh	r3, [r3, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d10d      	bne.n	8005baa <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d009      	beq.n	8005baa <pbuf_copy+0x13a>
 8005b96:	4b15      	ldr	r3, [pc, #84]	@ (8005bec <pbuf_copy+0x17c>)
 8005b98:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8005b9c:	4919      	ldr	r1, [pc, #100]	@ (8005c04 <pbuf_copy+0x194>)
 8005b9e:	4815      	ldr	r0, [pc, #84]	@ (8005bf4 <pbuf_copy+0x184>)
 8005ba0:	f007 ffc6 	bl	800db30 <iprintf>
 8005ba4:	f06f 0305 	mvn.w	r3, #5
 8005ba8:	e01b      	b.n	8005be2 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d013      	beq.n	8005bd8 <pbuf_copy+0x168>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	895a      	ldrh	r2, [r3, #10]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	891b      	ldrh	r3, [r3, #8]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d10d      	bne.n	8005bd8 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d009      	beq.n	8005bd8 <pbuf_copy+0x168>
 8005bc4:	4b09      	ldr	r3, [pc, #36]	@ (8005bec <pbuf_copy+0x17c>)
 8005bc6:	f240 32e2 	movw	r2, #994	@ 0x3e2
 8005bca:	490e      	ldr	r1, [pc, #56]	@ (8005c04 <pbuf_copy+0x194>)
 8005bcc:	4809      	ldr	r0, [pc, #36]	@ (8005bf4 <pbuf_copy+0x184>)
 8005bce:	f007 ffaf 	bl	800db30 <iprintf>
 8005bd2:	f06f 0305 	mvn.w	r3, #5
 8005bd6:	e004      	b.n	8005be2 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f47f af67 	bne.w	8005aae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	0800eec8 	.word	0x0800eec8
 8005bf0:	0800f258 	.word	0x0800f258
 8005bf4:	0800ef14 	.word	0x0800ef14
 8005bf8:	0800f288 	.word	0x0800f288
 8005bfc:	0800f2a0 	.word	0x0800f2a0
 8005c00:	0800f2bc 	.word	0x0800f2bc
 8005c04:	0800f2cc 	.word	0x0800f2cc

08005c08 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	4611      	mov	r1, r2
 8005c14:	461a      	mov	r2, r3
 8005c16:	460b      	mov	r3, r1
 8005c18:	80fb      	strh	r3, [r7, #6]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d108      	bne.n	8005c3a <pbuf_copy_partial+0x32>
 8005c28:	4b30      	ldr	r3, [pc, #192]	@ (8005cec <pbuf_copy_partial+0xe4>)
 8005c2a:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8005c2e:	4930      	ldr	r1, [pc, #192]	@ (8005cf0 <pbuf_copy_partial+0xe8>)
 8005c30:	4830      	ldr	r0, [pc, #192]	@ (8005cf4 <pbuf_copy_partial+0xec>)
 8005c32:	f007 ff7d 	bl	800db30 <iprintf>
 8005c36:	2300      	movs	r3, #0
 8005c38:	e054      	b.n	8005ce4 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d108      	bne.n	8005c52 <pbuf_copy_partial+0x4a>
 8005c40:	4b2a      	ldr	r3, [pc, #168]	@ (8005cec <pbuf_copy_partial+0xe4>)
 8005c42:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8005c46:	492c      	ldr	r1, [pc, #176]	@ (8005cf8 <pbuf_copy_partial+0xf0>)
 8005c48:	482a      	ldr	r0, [pc, #168]	@ (8005cf4 <pbuf_copy_partial+0xec>)
 8005c4a:	f007 ff71 	bl	800db30 <iprintf>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e048      	b.n	8005ce4 <pbuf_copy_partial+0xdc>

  left = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <pbuf_copy_partial+0x5a>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <pbuf_copy_partial+0x5e>
    return 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	e03e      	b.n	8005ce4 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	e034      	b.n	8005cd6 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8005c6c:	88bb      	ldrh	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <pbuf_copy_partial+0x80>
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	895b      	ldrh	r3, [r3, #10]
 8005c76:	88ba      	ldrh	r2, [r7, #4]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d305      	bcc.n	8005c88 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	895b      	ldrh	r3, [r3, #10]
 8005c80:	88ba      	ldrh	r2, [r7, #4]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	80bb      	strh	r3, [r7, #4]
 8005c86:	e023      	b.n	8005cd0 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	895a      	ldrh	r2, [r3, #10]
 8005c8c:	88bb      	ldrh	r3, [r7, #4]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005c92:	8b3a      	ldrh	r2, [r7, #24]
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d901      	bls.n	8005c9e <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005c9e:	8b7b      	ldrh	r3, [r7, #26]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	18d0      	adds	r0, r2, r3
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	88bb      	ldrh	r3, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	8b3a      	ldrh	r2, [r7, #24]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f008 f837 	bl	800dd22 <memcpy>
      copied_total += buf_copy_len;
 8005cb4:	8afa      	ldrh	r2, [r7, #22]
 8005cb6:	8b3b      	ldrh	r3, [r7, #24]
 8005cb8:	4413      	add	r3, r2
 8005cba:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005cbc:	8b7a      	ldrh	r2, [r7, #26]
 8005cbe:	8b3b      	ldrh	r3, [r7, #24]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	8b3b      	ldrh	r3, [r7, #24]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	61fb      	str	r3, [r7, #28]
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <pbuf_copy_partial+0xda>
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1c4      	bne.n	8005c6c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8005ce2:	8afb      	ldrh	r3, [r7, #22]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3720      	adds	r7, #32
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	0800eec8 	.word	0x0800eec8
 8005cf0:	0800f2f8 	.word	0x0800f2f8
 8005cf4:	0800ef14 	.word	0x0800ef14
 8005cf8:	0800f318 	.word	0x0800f318

08005cfc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005d00:	bf00      	nop
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005d0c:	f000 ff8c 	bl	8006c28 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005d10:	4b07      	ldr	r3, [pc, #28]	@ (8005d30 <tcp_tmr+0x28>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	4b05      	ldr	r3, [pc, #20]	@ (8005d30 <tcp_tmr+0x28>)
 8005d1a:	701a      	strb	r2, [r3, #0]
 8005d1c:	4b04      	ldr	r3, [pc, #16]	@ (8005d30 <tcp_tmr+0x28>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005d28:	f000 fcba 	bl	80066a0 <tcp_slowtmr>
  }
}
 8005d2c:	bf00      	nop
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	2000831d 	.word	0x2000831d

08005d34 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e00a      	b.n	8005d5a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d102      	bne.n	8005d54 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f1      	bne.n	8005d44 <tcp_remove_listener+0x10>
      }
   }
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d105      	bne.n	8005d86 <tcp_listen_closed+0x1a>
 8005d7a:	4b13      	ldr	r3, [pc, #76]	@ (8005dc8 <tcp_listen_closed+0x5c>)
 8005d7c:	22c0      	movs	r2, #192	@ 0xc0
 8005d7e:	4913      	ldr	r1, [pc, #76]	@ (8005dcc <tcp_listen_closed+0x60>)
 8005d80:	4813      	ldr	r0, [pc, #76]	@ (8005dd0 <tcp_listen_closed+0x64>)
 8005d82:	f007 fed5 	bl	800db30 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	7d1b      	ldrb	r3, [r3, #20]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d005      	beq.n	8005d9a <tcp_listen_closed+0x2e>
 8005d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc8 <tcp_listen_closed+0x5c>)
 8005d90:	22c1      	movs	r2, #193	@ 0xc1
 8005d92:	4910      	ldr	r1, [pc, #64]	@ (8005dd4 <tcp_listen_closed+0x68>)
 8005d94:	480e      	ldr	r0, [pc, #56]	@ (8005dd0 <tcp_listen_closed+0x64>)
 8005d96:	f007 fecb 	bl	800db30 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e00b      	b.n	8005db8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005da0:	4a0d      	ldr	r2, [pc, #52]	@ (8005dd8 <tcp_listen_closed+0x6c>)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff ffc1 	bl	8005d34 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3301      	adds	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b03      	cmp	r3, #3
 8005dbc:	d9f0      	bls.n	8005da0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005dbe:	bf00      	nop
 8005dc0:	bf00      	nop
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	0800f44c 	.word	0x0800f44c
 8005dcc:	0800f47c 	.word	0x0800f47c
 8005dd0:	0800f488 	.word	0x0800f488
 8005dd4:	0800f4b0 	.word	0x0800f4b0
 8005dd8:	080118e4 	.word	0x080118e4

08005ddc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005ddc:	b5b0      	push	{r4, r5, r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d075      	beq.n	8005eda <tcp_close_shutdown+0xfe>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	7d1b      	ldrb	r3, [r3, #20]
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d003      	beq.n	8005dfe <tcp_close_shutdown+0x22>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7d1b      	ldrb	r3, [r3, #20]
 8005dfa:	2b07      	cmp	r3, #7
 8005dfc:	d16d      	bne.n	8005eda <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <tcp_close_shutdown+0x34>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e0a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005e0e:	d064      	beq.n	8005eda <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	7e9b      	ldrb	r3, [r3, #26]
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <tcp_close_shutdown+0x4e>
 8005e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8005f8c <tcp_close_shutdown+0x1b0>)
 8005e1e:	f240 120f 	movw	r2, #271	@ 0x10f
 8005e22:	495b      	ldr	r1, [pc, #364]	@ (8005f90 <tcp_close_shutdown+0x1b4>)
 8005e24:	485b      	ldr	r0, [pc, #364]	@ (8005f94 <tcp_close_shutdown+0x1b8>)
 8005e26:	f007 fe83 	bl	800db30 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005e32:	687c      	ldr	r4, [r7, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	1d1d      	adds	r5, r3, #4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8adb      	ldrh	r3, [r3, #22]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	8b12      	ldrh	r2, [r2, #24]
 8005e40:	9201      	str	r2, [sp, #4]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	462b      	mov	r3, r5
 8005e46:	4622      	mov	r2, r4
 8005e48:	f004 feea 	bl	800ac20 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 fa2b 	bl	80072a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005e52:	4b51      	ldr	r3, [pc, #324]	@ (8005f98 <tcp_close_shutdown+0x1bc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d105      	bne.n	8005e68 <tcp_close_shutdown+0x8c>
 8005e5c:	4b4e      	ldr	r3, [pc, #312]	@ (8005f98 <tcp_close_shutdown+0x1bc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	4a4d      	ldr	r2, [pc, #308]	@ (8005f98 <tcp_close_shutdown+0x1bc>)
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e013      	b.n	8005e90 <tcp_close_shutdown+0xb4>
 8005e68:	4b4b      	ldr	r3, [pc, #300]	@ (8005f98 <tcp_close_shutdown+0x1bc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	e00c      	b.n	8005e8a <tcp_close_shutdown+0xae>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d104      	bne.n	8005e84 <tcp_close_shutdown+0xa8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	60da      	str	r2, [r3, #12]
 8005e82:	e005      	b.n	8005e90 <tcp_close_shutdown+0xb4>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1ef      	bne.n	8005e70 <tcp_close_shutdown+0x94>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	60da      	str	r2, [r3, #12]
 8005e96:	4b41      	ldr	r3, [pc, #260]	@ (8005f9c <tcp_close_shutdown+0x1c0>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	7d1b      	ldrb	r3, [r3, #20]
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d10c      	bne.n	8005ebe <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	220a      	movs	r2, #10
 8005ea8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8005fa0 <tcp_close_shutdown+0x1c4>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	60da      	str	r2, [r3, #12]
 8005eb2:	4a3b      	ldr	r2, [pc, #236]	@ (8005fa0 <tcp_close_shutdown+0x1c4>)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	f005 f8fa 	bl	800b0b0 <tcp_timer_needed>
 8005ebc:	e00b      	b.n	8005ed6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8005ebe:	4b39      	ldr	r3, [pc, #228]	@ (8005fa4 <tcp_close_shutdown+0x1c8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d102      	bne.n	8005ece <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8005ec8:	f003 fd4c 	bl	8009964 <tcp_trigger_input_pcb_close>
 8005ecc:	e003      	b.n	8005ed6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	f7fe ff8f 	bl	8004df4 <memp_free>
        }
      }
      return ERR_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e053      	b.n	8005f82 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	7d1b      	ldrb	r3, [r3, #20]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d03d      	beq.n	8005f5e <tcp_close_shutdown+0x182>
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	dc47      	bgt.n	8005f76 <tcp_close_shutdown+0x19a>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <tcp_close_shutdown+0x114>
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d02b      	beq.n	8005f46 <tcp_close_shutdown+0x16a>
 8005eee:	e042      	b.n	8005f76 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	8adb      	ldrh	r3, [r3, #22]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d021      	beq.n	8005f3c <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8005fa8 <tcp_close_shutdown+0x1cc>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d105      	bne.n	8005f0e <tcp_close_shutdown+0x132>
 8005f02:	4b29      	ldr	r3, [pc, #164]	@ (8005fa8 <tcp_close_shutdown+0x1cc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4a27      	ldr	r2, [pc, #156]	@ (8005fa8 <tcp_close_shutdown+0x1cc>)
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	e013      	b.n	8005f36 <tcp_close_shutdown+0x15a>
 8005f0e:	4b26      	ldr	r3, [pc, #152]	@ (8005fa8 <tcp_close_shutdown+0x1cc>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	e00c      	b.n	8005f30 <tcp_close_shutdown+0x154>
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d104      	bne.n	8005f2a <tcp_close_shutdown+0x14e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	60da      	str	r2, [r3, #12]
 8005f28:	e005      	b.n	8005f36 <tcp_close_shutdown+0x15a>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	60bb      	str	r3, [r7, #8]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1ef      	bne.n	8005f16 <tcp_close_shutdown+0x13a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	2001      	movs	r0, #1
 8005f40:	f7fe ff58 	bl	8004df4 <memp_free>
    break;
 8005f44:	e01c      	b.n	8005f80 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff ff10 	bl	8005d6c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4817      	ldr	r0, [pc, #92]	@ (8005fac <tcp_close_shutdown+0x1d0>)
 8005f50:	f001 f9ec 	bl	800732c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	2002      	movs	r0, #2
 8005f58:	f7fe ff4c 	bl	8004df4 <memp_free>
    break;
 8005f5c:	e010      	b.n	8005f80 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	480d      	ldr	r0, [pc, #52]	@ (8005f98 <tcp_close_shutdown+0x1bc>)
 8005f62:	f001 f9e3 	bl	800732c <tcp_pcb_remove>
 8005f66:	4b0d      	ldr	r3, [pc, #52]	@ (8005f9c <tcp_close_shutdown+0x1c0>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	2001      	movs	r0, #1
 8005f70:	f7fe ff40 	bl	8004df4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8005f74:	e004      	b.n	8005f80 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f81a 	bl	8005fb0 <tcp_close_shutdown_fin>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	e000      	b.n	8005f82 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bdb0      	pop	{r4, r5, r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	0800f44c 	.word	0x0800f44c
 8005f90:	0800f4c8 	.word	0x0800f4c8
 8005f94:	0800f488 	.word	0x0800f488
 8005f98:	20008314 	.word	0x20008314
 8005f9c:	2000831c 	.word	0x2000831c
 8005fa0:	20008318 	.word	0x20008318
 8005fa4:	20008354 	.word	0x20008354
 8005fa8:	2000830c 	.word	0x2000830c
 8005fac:	20008310 	.word	0x20008310

08005fb0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <tcp_close_shutdown_fin+0x1c>
 8005fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8006078 <tcp_close_shutdown_fin+0xc8>)
 8005fc0:	f240 124d 	movw	r2, #333	@ 0x14d
 8005fc4:	492d      	ldr	r1, [pc, #180]	@ (800607c <tcp_close_shutdown_fin+0xcc>)
 8005fc6:	482e      	ldr	r0, [pc, #184]	@ (8006080 <tcp_close_shutdown_fin+0xd0>)
 8005fc8:	f007 fdb2 	bl	800db30 <iprintf>

  switch (pcb->state) {
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	7d1b      	ldrb	r3, [r3, #20]
 8005fd0:	2b07      	cmp	r3, #7
 8005fd2:	d020      	beq.n	8006016 <tcp_close_shutdown_fin+0x66>
 8005fd4:	2b07      	cmp	r3, #7
 8005fd6:	dc2b      	bgt.n	8006030 <tcp_close_shutdown_fin+0x80>
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d002      	beq.n	8005fe2 <tcp_close_shutdown_fin+0x32>
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d00d      	beq.n	8005ffc <tcp_close_shutdown_fin+0x4c>
 8005fe0:	e026      	b.n	8006030 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f003 fd48 	bl	8009a78 <tcp_send_fin>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d11f      	bne.n	8006034 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2205      	movs	r2, #5
 8005ff8:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005ffa:	e01b      	b.n	8006034 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f003 fd3b 	bl	8009a78 <tcp_send_fin>
 8006002:	4603      	mov	r3, r0
 8006004:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d114      	bne.n	8006038 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2205      	movs	r2, #5
 8006012:	751a      	strb	r2, [r3, #20]
    }
    break;
 8006014:	e010      	b.n	8006038 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f003 fd2e 	bl	8009a78 <tcp_send_fin>
 800601c:	4603      	mov	r3, r0
 800601e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d109      	bne.n	800603c <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2209      	movs	r2, #9
 800602c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800602e:	e005      	b.n	800603c <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e01c      	b.n	800606e <tcp_close_shutdown_fin+0xbe>
    break;
 8006034:	bf00      	nop
 8006036:	e002      	b.n	800603e <tcp_close_shutdown_fin+0x8e>
    break;
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <tcp_close_shutdown_fin+0x8e>
    break;
 800603c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800603e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f004 fb66 	bl	800a718 <tcp_output>
 800604c:	e00d      	b.n	800606a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800604e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006056:	d108      	bne.n	800606a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	7e9b      	ldrb	r3, [r3, #26]
 800605c:	f043 0308 	orr.w	r3, r3, #8
 8006060:	b2da      	uxtb	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e001      	b.n	800606e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800606a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	0800f44c 	.word	0x0800f44c
 800607c:	0800f47c 	.word	0x0800f47c
 8006080:	0800f488 	.word	0x0800f488

08006084 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	7d1b      	ldrb	r3, [r3, #20]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d006      	beq.n	80060a2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	7e9b      	ldrb	r3, [r3, #26]
 8006098:	f043 0310 	orr.w	r3, r3, #16
 800609c:	b2da      	uxtb	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80060a2:	2101      	movs	r1, #1
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff fe99 	bl	8005ddc <tcp_close_shutdown>
 80060aa:	4603      	mov	r3, r0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08c      	sub	sp, #48	@ 0x30
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	7d1b      	ldrb	r3, [r3, #20]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d106      	bne.n	80060d4 <tcp_abandon+0x20>
 80060c6:	4b4d      	ldr	r3, [pc, #308]	@ (80061fc <tcp_abandon+0x148>)
 80060c8:	f240 12df 	movw	r2, #479	@ 0x1df
 80060cc:	494c      	ldr	r1, [pc, #304]	@ (8006200 <tcp_abandon+0x14c>)
 80060ce:	484d      	ldr	r0, [pc, #308]	@ (8006204 <tcp_abandon+0x150>)
 80060d0:	f007 fd2e 	bl	800db30 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	7d1b      	ldrb	r3, [r3, #20]
 80060d8:	2b0a      	cmp	r3, #10
 80060da:	d108      	bne.n	80060ee <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	484a      	ldr	r0, [pc, #296]	@ (8006208 <tcp_abandon+0x154>)
 80060e0:	f001 f924 	bl	800732c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	2001      	movs	r0, #1
 80060e8:	f7fe fe84 	bl	8004df4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80060ec:	e081      	b.n	80061f2 <tcp_abandon+0x13e>
    int send_rst = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80060f2:	2300      	movs	r3, #0
 80060f4:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060fa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006100:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006108:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	7d1b      	ldrb	r3, [r3, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d126      	bne.n	8006166 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	8adb      	ldrh	r3, [r3, #22]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d02e      	beq.n	800617e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006120:	4b3a      	ldr	r3, [pc, #232]	@ (800620c <tcp_abandon+0x158>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	429a      	cmp	r2, r3
 8006128:	d105      	bne.n	8006136 <tcp_abandon+0x82>
 800612a:	4b38      	ldr	r3, [pc, #224]	@ (800620c <tcp_abandon+0x158>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	4a36      	ldr	r2, [pc, #216]	@ (800620c <tcp_abandon+0x158>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e013      	b.n	800615e <tcp_abandon+0xaa>
 8006136:	4b35      	ldr	r3, [pc, #212]	@ (800620c <tcp_abandon+0x158>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	e00c      	b.n	8006158 <tcp_abandon+0xa4>
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d104      	bne.n	8006152 <tcp_abandon+0x9e>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	60da      	str	r2, [r3, #12]
 8006150:	e005      	b.n	800615e <tcp_abandon+0xaa>
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	61fb      	str	r3, [r7, #28]
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1ef      	bne.n	800613e <tcp_abandon+0x8a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	60da      	str	r2, [r3, #12]
 8006164:	e00b      	b.n	800617e <tcp_abandon+0xca>
      send_rst = reset;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	8adb      	ldrh	r3, [r3, #22]
 800616e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4827      	ldr	r0, [pc, #156]	@ (8006210 <tcp_abandon+0x15c>)
 8006174:	f001 f8da 	bl	800732c <tcp_pcb_remove>
 8006178:	4b26      	ldr	r3, [pc, #152]	@ (8006214 <tcp_abandon+0x160>)
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d004      	beq.n	8006190 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fe19 	bl	8006dc2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fe10 	bl	8006dc2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d004      	beq.n	80061b4 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fe07 	bl	8006dc2 <tcp_segs_free>
    if (send_rst) {
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00c      	beq.n	80061d4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	1d19      	adds	r1, r3, #4
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8b1b      	ldrh	r3, [r3, #24]
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	460b      	mov	r3, r1
 80061cc:	6979      	ldr	r1, [r7, #20]
 80061ce:	69b8      	ldr	r0, [r7, #24]
 80061d0:	f004 fd26 	bl	800ac20 <tcp_rst>
    last_state = pcb->state;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	7d1b      	ldrb	r3, [r3, #20]
 80061d8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	2001      	movs	r0, #1
 80061de:	f7fe fe09 	bl	8004df4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <tcp_abandon+0x13e>
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f06f 010c 	mvn.w	r1, #12
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	4798      	blx	r3
}
 80061f2:	bf00      	nop
 80061f4:	3728      	adds	r7, #40	@ 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	0800f44c 	.word	0x0800f44c
 8006200:	0800f4e4 	.word	0x0800f4e4
 8006204:	0800f488 	.word	0x0800f488
 8006208:	20008318 	.word	0x20008318
 800620c:	2000830c 	.word	0x2000830c
 8006210:	20008314 	.word	0x20008314
 8006214:	2000831c 	.word	0x2000831c

08006218 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006220:	2101      	movs	r1, #1
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7ff ff46 	bl	80060b4 <tcp_abandon>
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800623e:	2304      	movs	r3, #4
 8006240:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006248:	4b3c      	ldr	r3, [pc, #240]	@ (800633c <tcp_bind+0x10c>)
 800624a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <tcp_bind+0x28>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <tcp_bind+0x2e>
    return ERR_VAL;
 8006258:	f06f 0305 	mvn.w	r3, #5
 800625c:	e06a      	b.n	8006334 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	7d1b      	ldrb	r3, [r3, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <tcp_bind+0x4a>
 8006266:	4b36      	ldr	r3, [pc, #216]	@ (8006340 <tcp_bind+0x110>)
 8006268:	f44f 7211 	mov.w	r2, #580	@ 0x244
 800626c:	4935      	ldr	r1, [pc, #212]	@ (8006344 <tcp_bind+0x114>)
 800626e:	4836      	ldr	r0, [pc, #216]	@ (8006348 <tcp_bind+0x118>)
 8006270:	f007 fc5e 	bl	800db30 <iprintf>
 8006274:	f06f 0305 	mvn.w	r3, #5
 8006278:	e05c      	b.n	8006334 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <tcp_bind+0x64>
    port = tcp_new_port();
 8006280:	f000 f9ca 	bl	8006618 <tcp_new_port>
 8006284:	4603      	mov	r3, r0
 8006286:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d135      	bne.n	80062fa <tcp_bind+0xca>
      return ERR_BUF;
 800628e:	f06f 0301 	mvn.w	r3, #1
 8006292:	e04f      	b.n	8006334 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]
 8006298:	e02b      	b.n	80062f2 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800629a:	4a2c      	ldr	r2, [pc, #176]	@ (800634c <tcp_bind+0x11c>)
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	e01e      	b.n	80062e6 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	8adb      	ldrh	r3, [r3, #22]
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d116      	bne.n	80062e0 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80062b2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d010      	beq.n	80062da <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00c      	beq.n	80062da <tcp_bind+0xaa>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d005      	beq.n	80062da <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d102      	bne.n	80062e0 <tcp_bind+0xb0>
              return ERR_USE;
 80062da:	f06f 0307 	mvn.w	r3, #7
 80062de:	e029      	b.n	8006334 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1dd      	bne.n	80062a8 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	3301      	adds	r3, #1
 80062f0:	61fb      	str	r3, [r7, #28]
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	dbcf      	blt.n	800629a <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00c      	beq.n	800631a <tcp_bind+0xea>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <tcp_bind+0xe4>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	e000      	b.n	8006316 <tcp_bind+0xe6>
 8006314:	2300      	movs	r3, #0
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006320:	4b0b      	ldr	r3, [pc, #44]	@ (8006350 <tcp_bind+0x120>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	60da      	str	r2, [r3, #12]
 8006328:	4a09      	ldr	r2, [pc, #36]	@ (8006350 <tcp_bind+0x120>)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	f004 febf 	bl	800b0b0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	0801190c 	.word	0x0801190c
 8006340:	0800f44c 	.word	0x0800f44c
 8006344:	0800f518 	.word	0x0800f518
 8006348:	0800f488 	.word	0x0800f488
 800634c:	080118e4 	.word	0x080118e4
 8006350:	2000830c 	.word	0x2000830c

08006354 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	4613      	mov	r3, r2
 8006360:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8006362:	68b8      	ldr	r0, [r7, #8]
 8006364:	f7ff ff58 	bl	8006218 <tcp_abort>

  return ERR_ABRT;
 8006368:	f06f 030c 	mvn.w	r3, #12
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	2200      	movs	r2, #0
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f806 	bl	8006398 <tcp_listen_with_backlog_and_err>
 800638c:	4603      	mov	r3, r0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b088      	sub	sp, #32
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	460b      	mov	r3, r1
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	7d1b      	ldrb	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <tcp_listen_with_backlog_and_err+0x2e>
 80063b2:	4b3f      	ldr	r3, [pc, #252]	@ (80064b0 <tcp_listen_with_backlog_and_err+0x118>)
 80063b4:	f44f 722d 	mov.w	r2, #692	@ 0x2b4
 80063b8:	493e      	ldr	r1, [pc, #248]	@ (80064b4 <tcp_listen_with_backlog_and_err+0x11c>)
 80063ba:	483f      	ldr	r0, [pc, #252]	@ (80064b8 <tcp_listen_with_backlog_and_err+0x120>)
 80063bc:	f007 fbb8 	bl	800db30 <iprintf>
 80063c0:	23f1      	movs	r3, #241	@ 0xf1
 80063c2:	76fb      	strb	r3, [r7, #27]
 80063c4:	e069      	b.n	800649a <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	7d1b      	ldrb	r3, [r3, #20]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d104      	bne.n	80063d8 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80063d2:	23f7      	movs	r3, #247	@ 0xf7
 80063d4:	76fb      	strb	r3, [r7, #27]
    goto done;
 80063d6:	e060      	b.n	800649a <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80063d8:	2002      	movs	r0, #2
 80063da:	f7fe fcbf 	bl	8004d5c <memp_malloc>
 80063de:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 80063e6:	23ff      	movs	r3, #255	@ 0xff
 80063e8:	76fb      	strb	r3, [r7, #27]
    goto done;
 80063ea:	e056      	b.n	800649a <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8ada      	ldrh	r2, [r3, #22]
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	2201      	movs	r2, #1
 8006400:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	7d5a      	ldrb	r2, [r3, #21]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	7a1a      	ldrb	r2, [r3, #8]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	7a9a      	ldrb	r2, [r3, #10]
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	7a5a      	ldrb	r2, [r3, #9]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8adb      	ldrh	r3, [r3, #22]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d021      	beq.n	8006476 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006432:	4b22      	ldr	r3, [pc, #136]	@ (80064bc <tcp_listen_with_backlog_and_err+0x124>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	429a      	cmp	r2, r3
 800643a:	d105      	bne.n	8006448 <tcp_listen_with_backlog_and_err+0xb0>
 800643c:	4b1f      	ldr	r3, [pc, #124]	@ (80064bc <tcp_listen_with_backlog_and_err+0x124>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	4a1e      	ldr	r2, [pc, #120]	@ (80064bc <tcp_listen_with_backlog_and_err+0x124>)
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	e013      	b.n	8006470 <tcp_listen_with_backlog_and_err+0xd8>
 8006448:	4b1c      	ldr	r3, [pc, #112]	@ (80064bc <tcp_listen_with_backlog_and_err+0x124>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e00c      	b.n	800646a <tcp_listen_with_backlog_and_err+0xd2>
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	429a      	cmp	r2, r3
 8006458:	d104      	bne.n	8006464 <tcp_listen_with_backlog_and_err+0xcc>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	e005      	b.n	8006470 <tcp_listen_with_backlog_and_err+0xd8>
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1ef      	bne.n	8006450 <tcp_listen_with_backlog_and_err+0xb8>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8006476:	68f9      	ldr	r1, [r7, #12]
 8006478:	2001      	movs	r0, #1
 800647a:	f7fe fcbb 	bl	8004df4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4a0f      	ldr	r2, [pc, #60]	@ (80064c0 <tcp_listen_with_backlog_and_err+0x128>)
 8006482:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006484:	4b0f      	ldr	r3, [pc, #60]	@ (80064c4 <tcp_listen_with_backlog_and_err+0x12c>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	60da      	str	r2, [r3, #12]
 800648c:	4a0d      	ldr	r2, [pc, #52]	@ (80064c4 <tcp_listen_with_backlog_and_err+0x12c>)
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	f004 fe0d 	bl	800b0b0 <tcp_timer_needed>
  res = ERR_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	7efa      	ldrb	r2, [r7, #27]
 80064a4:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80064a6:	69fb      	ldr	r3, [r7, #28]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	0800f44c 	.word	0x0800f44c
 80064b4:	0800f540 	.word	0x0800f540
 80064b8:	0800f488 	.word	0x0800f488
 80064bc:	2000830c 	.word	0x2000830c
 80064c0:	08006355 	.word	0x08006355
 80064c4:	20008310 	.word	0x20008310

080064c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80064d8:	4413      	add	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80064e4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80064e8:	bf28      	it	cs
 80064ea:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80064ee:	b292      	uxth	r2, r2
 80064f0:	4413      	add	r3, r2
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	db08      	blt.n	800650c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	e020      	b.n	800654e <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	dd03      	ble.n	8006522 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006520:	e014      	b.n	800654c <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006534:	d306      	bcc.n	8006544 <tcp_update_rcv_ann_wnd+0x7c>
 8006536:	4b08      	ldr	r3, [pc, #32]	@ (8006558 <tcp_update_rcv_ann_wnd+0x90>)
 8006538:	f44f 7242 	mov.w	r2, #776	@ 0x308
 800653c:	4907      	ldr	r1, [pc, #28]	@ (800655c <tcp_update_rcv_ann_wnd+0x94>)
 800653e:	4808      	ldr	r0, [pc, #32]	@ (8006560 <tcp_update_rcv_ann_wnd+0x98>)
 8006540:	f007 faf6 	bl	800db30 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	b29a      	uxth	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800654c:	2300      	movs	r3, #0
  }
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	0800f44c 	.word	0x0800f44c
 800655c:	0800f564 	.word	0x0800f564
 8006560:	0800f488 	.word	0x0800f488

08006564 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	460b      	mov	r3, r1
 800656e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7d1b      	ldrb	r3, [r3, #20]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d106      	bne.n	8006586 <tcp_recved+0x22>
 8006578:	4b23      	ldr	r3, [pc, #140]	@ (8006608 <tcp_recved+0xa4>)
 800657a:	f240 321f 	movw	r2, #799	@ 0x31f
 800657e:	4923      	ldr	r1, [pc, #140]	@ (800660c <tcp_recved+0xa8>)
 8006580:	4823      	ldr	r0, [pc, #140]	@ (8006610 <tcp_recved+0xac>)
 8006582:	f007 fad5 	bl	800db30 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800658a:	887b      	ldrh	r3, [r7, #2]
 800658c:	4413      	add	r3, r2
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006598:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800659c:	d904      	bls.n	80065a8 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80065a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80065a6:	e017      	b.n	80065d8 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d113      	bne.n	80065d8 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	7d1b      	ldrb	r3, [r3, #20]
 80065b4:	2b07      	cmp	r3, #7
 80065b6:	d003      	beq.n	80065c0 <tcp_recved+0x5c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	7d1b      	ldrb	r3, [r3, #20]
 80065bc:	2b09      	cmp	r3, #9
 80065be:	d104      	bne.n	80065ca <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80065c6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80065c8:	e006      	b.n	80065d8 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80065ca:	4b0f      	ldr	r3, [pc, #60]	@ (8006608 <tcp_recved+0xa4>)
 80065cc:	f240 322d 	movw	r2, #813	@ 0x32d
 80065d0:	4910      	ldr	r1, [pc, #64]	@ (8006614 <tcp_recved+0xb0>)
 80065d2:	480f      	ldr	r0, [pc, #60]	@ (8006610 <tcp_recved+0xac>)
 80065d4:	f007 faac 	bl	800db30 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff ff75 	bl	80064c8 <tcp_update_rcv_ann_wnd>
 80065de:	4603      	mov	r3, r0
 80065e0:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80065e8:	db09      	blt.n	80065fe <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	7e9b      	ldrb	r3, [r3, #26]
 80065ee:	f043 0302 	orr.w	r3, r3, #2
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f004 f88d 	bl	800a718 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	0800f44c 	.word	0x0800f44c
 800660c:	0800f580 	.word	0x0800f580
 8006610:	0800f488 	.word	0x0800f488
 8006614:	0800f5a8 	.word	0x0800f5a8

08006618 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8006622:	4b1d      	ldr	r3, [pc, #116]	@ (8006698 <tcp_new_port+0x80>)
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	b291      	uxth	r1, r2
 800662a:	4a1b      	ldr	r2, [pc, #108]	@ (8006698 <tcp_new_port+0x80>)
 800662c:	8011      	strh	r1, [r2, #0]
 800662e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006632:	4293      	cmp	r3, r2
 8006634:	d103      	bne.n	800663e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006636:	4b18      	ldr	r3, [pc, #96]	@ (8006698 <tcp_new_port+0x80>)
 8006638:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800663c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800663e:	2300      	movs	r3, #0
 8006640:	71fb      	strb	r3, [r7, #7]
 8006642:	e01e      	b.n	8006682 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	4a15      	ldr	r2, [pc, #84]	@ (800669c <tcp_new_port+0x84>)
 8006648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	603b      	str	r3, [r7, #0]
 8006650:	e011      	b.n	8006676 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	8ada      	ldrh	r2, [r3, #22]
 8006656:	4b10      	ldr	r3, [pc, #64]	@ (8006698 <tcp_new_port+0x80>)
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d108      	bne.n	8006670 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800665e:	88bb      	ldrh	r3, [r7, #4]
 8006660:	3301      	adds	r3, #1
 8006662:	80bb      	strh	r3, [r7, #4]
 8006664:	88bb      	ldrh	r3, [r7, #4]
 8006666:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800666a:	d3da      	bcc.n	8006622 <tcp_new_port+0xa>
          return 0;
 800666c:	2300      	movs	r3, #0
 800666e:	e00d      	b.n	800668c <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	603b      	str	r3, [r7, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1ea      	bne.n	8006652 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	3301      	adds	r3, #1
 8006680:	71fb      	strb	r3, [r7, #7]
 8006682:	79fb      	ldrb	r3, [r7, #7]
 8006684:	2b03      	cmp	r3, #3
 8006686:	d9dd      	bls.n	8006644 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006688:	4b03      	ldr	r3, [pc, #12]	@ (8006698 <tcp_new_port+0x80>)
 800668a:	881b      	ldrh	r3, [r3, #0]
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	2000000a 	.word	0x2000000a
 800669c:	080118e4 	.word	0x080118e4

080066a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80066a0:	b5b0      	push	{r4, r5, r7, lr}
 80066a2:	b08c      	sub	sp, #48	@ 0x30
 80066a4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80066aa:	4b98      	ldr	r3, [pc, #608]	@ (800690c <tcp_slowtmr+0x26c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3301      	adds	r3, #1
 80066b0:	4a96      	ldr	r2, [pc, #600]	@ (800690c <tcp_slowtmr+0x26c>)
 80066b2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80066b4:	4b96      	ldr	r3, [pc, #600]	@ (8006910 <tcp_slowtmr+0x270>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	3301      	adds	r3, #1
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	4b94      	ldr	r3, [pc, #592]	@ (8006910 <tcp_slowtmr+0x270>)
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	e000      	b.n	80066c4 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80066c2:	bf00      	nop
  prev = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80066c8:	4b92      	ldr	r3, [pc, #584]	@ (8006914 <tcp_slowtmr+0x274>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 80066ce:	e227      	b.n	8006b20 <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80066d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d2:	7d1b      	ldrb	r3, [r3, #20]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d106      	bne.n	80066e6 <tcp_slowtmr+0x46>
 80066d8:	4b8f      	ldr	r3, [pc, #572]	@ (8006918 <tcp_slowtmr+0x278>)
 80066da:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 80066de:	498f      	ldr	r1, [pc, #572]	@ (800691c <tcp_slowtmr+0x27c>)
 80066e0:	488f      	ldr	r0, [pc, #572]	@ (8006920 <tcp_slowtmr+0x280>)
 80066e2:	f007 fa25 	bl	800db30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	7d1b      	ldrb	r3, [r3, #20]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d106      	bne.n	80066fc <tcp_slowtmr+0x5c>
 80066ee:	4b8a      	ldr	r3, [pc, #552]	@ (8006918 <tcp_slowtmr+0x278>)
 80066f0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80066f4:	498b      	ldr	r1, [pc, #556]	@ (8006924 <tcp_slowtmr+0x284>)
 80066f6:	488a      	ldr	r0, [pc, #552]	@ (8006920 <tcp_slowtmr+0x280>)
 80066f8:	f007 fa1a 	bl	800db30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	7d1b      	ldrb	r3, [r3, #20]
 8006700:	2b0a      	cmp	r3, #10
 8006702:	d106      	bne.n	8006712 <tcp_slowtmr+0x72>
 8006704:	4b84      	ldr	r3, [pc, #528]	@ (8006918 <tcp_slowtmr+0x278>)
 8006706:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 800670a:	4987      	ldr	r1, [pc, #540]	@ (8006928 <tcp_slowtmr+0x288>)
 800670c:	4884      	ldr	r0, [pc, #528]	@ (8006920 <tcp_slowtmr+0x280>)
 800670e:	f007 fa0f 	bl	800db30 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	7f5a      	ldrb	r2, [r3, #29]
 8006716:	4b7e      	ldr	r3, [pc, #504]	@ (8006910 <tcp_slowtmr+0x270>)
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d103      	bne.n	8006726 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 800671e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 8006724:	e1fc      	b.n	8006b20 <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 8006726:	4b7a      	ldr	r3, [pc, #488]	@ (8006910 <tcp_slowtmr+0x270>)
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	7d1b      	ldrb	r3, [r3, #20]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d108      	bne.n	8006750 <tcp_slowtmr+0xb0>
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006744:	2b05      	cmp	r3, #5
 8006746:	d903      	bls.n	8006750 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 8006748:	7ffb      	ldrb	r3, [r7, #31]
 800674a:	3301      	adds	r3, #1
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e0a2      	b.n	8006896 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006756:	2b0b      	cmp	r3, #11
 8006758:	d903      	bls.n	8006762 <tcp_slowtmr+0xc2>
      ++pcb_remove;
 800675a:	7ffb      	ldrb	r3, [r7, #31]
 800675c:	3301      	adds	r3, #1
 800675e:	77fb      	strb	r3, [r7, #31]
 8006760:	e099      	b.n	8006896 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006768:	2b00      	cmp	r3, #0
 800676a:	d032      	beq.n	80067d2 <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006772:	3b01      	subs	r3, #1
 8006774:	4a6d      	ldr	r2, [pc, #436]	@ (800692c <tcp_slowtmr+0x28c>)
 8006776:	5cd3      	ldrb	r3, [r2, r3]
 8006778:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8006780:	7cfa      	ldrb	r2, [r7, #19]
 8006782:	429a      	cmp	r2, r3
 8006784:	d907      	bls.n	8006796 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800678c:	3301      	adds	r3, #1
 800678e:	b2da      	uxtb	r2, r3
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800679c:	7cfa      	ldrb	r2, [r7, #19]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d879      	bhi.n	8006896 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80067a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067a4:	f004 fbc3 	bl	800af2e <tcp_zero_window_probe>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d173      	bne.n	8006896 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80067bc:	2b06      	cmp	r3, #6
 80067be:	d86a      	bhi.n	8006896 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80067c6:	3301      	adds	r3, #1
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 80067d0:	e061      	b.n	8006896 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80067d8:	2b00      	cmp	r3, #0
 80067da:	db08      	blt.n	80067ee <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3301      	adds	r3, #1
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	b21a      	sxth	r2, r3
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d04f      	beq.n	8006896 <tcp_slowtmr+0x1f6>
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006802:	429a      	cmp	r2, r3
 8006804:	db47      	blt.n	8006896 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	7d1b      	ldrb	r3, [r3, #20]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d018      	beq.n	8006840 <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006814:	2b0c      	cmp	r3, #12
 8006816:	bf28      	it	cs
 8006818:	230c      	movcs	r3, #12
 800681a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800681c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006822:	10db      	asrs	r3, r3, #3
 8006824:	b21b      	sxth	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800682e:	4413      	add	r3, r2
 8006830:	7dfa      	ldrb	r2, [r7, #23]
 8006832:	493f      	ldr	r1, [pc, #252]	@ (8006930 <tcp_slowtmr+0x290>)
 8006834:	5c8a      	ldrb	r2, [r1, r2]
 8006836:	4093      	lsls	r3, r2
 8006838:	b21a      	sxth	r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	2200      	movs	r2, #0
 8006844:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800684c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8006852:	4293      	cmp	r3, r2
 8006854:	bf28      	it	cs
 8006856:	4613      	movcs	r3, r2
 8006858:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800685a:	8abb      	ldrh	r3, [r7, #20]
 800685c:	085b      	lsrs	r3, r3, #1
 800685e:	b29a      	uxth	r2, r3
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	b29b      	uxth	r3, r3
 8006874:	429a      	cmp	r2, r3
 8006876:	d206      	bcs.n	8006886 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 8006890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006892:	f004 fa3b 	bl	800ad0c <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	7d1b      	ldrb	r3, [r3, #20]
 800689a:	2b06      	cmp	r3, #6
 800689c:	d10f      	bne.n	80068be <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	7e9b      	ldrb	r3, [r3, #26]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d009      	beq.n	80068be <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068aa:	4b18      	ldr	r3, [pc, #96]	@ (800690c <tcp_slowtmr+0x26c>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b28      	cmp	r3, #40	@ 0x28
 80068b6:	d902      	bls.n	80068be <tcp_slowtmr+0x21e>
          ++pcb_remove;
 80068b8:	7ffb      	ldrb	r3, [r7, #31]
 80068ba:	3301      	adds	r3, #1
 80068bc:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	7a1b      	ldrb	r3, [r3, #8]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d05d      	beq.n	8006986 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d003      	beq.n	80068da <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80068d6:	2b07      	cmp	r3, #7
 80068d8:	d155      	bne.n	8006986 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068da:	4b0c      	ldr	r3, [pc, #48]	@ (800690c <tcp_slowtmr+0x26c>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068ea:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 80068ee:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 80068f2:	4910      	ldr	r1, [pc, #64]	@ (8006934 <tcp_slowtmr+0x294>)
 80068f4:	fba1 1303 	umull	r1, r3, r1, r3
 80068f8:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d91c      	bls.n	8006938 <tcp_slowtmr+0x298>
        ++pcb_remove;
 80068fe:	7ffb      	ldrb	r3, [r7, #31]
 8006900:	3301      	adds	r3, #1
 8006902:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8006904:	7fbb      	ldrb	r3, [r7, #30]
 8006906:	3301      	adds	r3, #1
 8006908:	77bb      	strb	r3, [r7, #30]
 800690a:	e03c      	b.n	8006986 <tcp_slowtmr+0x2e6>
 800690c:	20008308 	.word	0x20008308
 8006910:	2000831e 	.word	0x2000831e
 8006914:	20008314 	.word	0x20008314
 8006918:	0800f44c 	.word	0x0800f44c
 800691c:	0800f5fc 	.word	0x0800f5fc
 8006920:	0800f488 	.word	0x0800f488
 8006924:	0800f628 	.word	0x0800f628
 8006928:	0800f654 	.word	0x0800f654
 800692c:	080118dc 	.word	0x080118dc
 8006930:	080118cc 	.word	0x080118cc
 8006934:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006938:	4b97      	ldr	r3, [pc, #604]	@ (8006b98 <tcp_slowtmr+0x4f8>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800694e:	4618      	mov	r0, r3
 8006950:	4b92      	ldr	r3, [pc, #584]	@ (8006b9c <tcp_slowtmr+0x4fc>)
 8006952:	fb00 f303 	mul.w	r3, r0, r3
 8006956:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8006958:	4991      	ldr	r1, [pc, #580]	@ (8006ba0 <tcp_slowtmr+0x500>)
 800695a:	fba1 1303 	umull	r1, r3, r1, r3
 800695e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006960:	429a      	cmp	r2, r3
 8006962:	d910      	bls.n	8006986 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 8006964:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006966:	f004 faa5 	bl	800aeb4 <tcp_keepalive>
 800696a:	4603      	mov	r3, r0
 800696c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800696e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d107      	bne.n	8006986 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800697c:	3301      	adds	r3, #1
 800697e:	b2da      	uxtb	r2, r3
 8006980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006982:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800698e:	4b82      	ldr	r3, [pc, #520]	@ (8006b98 <tcp_slowtmr+0x4f8>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	1ad2      	subs	r2, r2, r3
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800699e:	4619      	mov	r1, r3
 80069a0:	460b      	mov	r3, r1
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	440b      	add	r3, r1
 80069a6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d307      	bcc.n	80069bc <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 fa06 	bl	8006dc2 <tcp_segs_free>
      pcb->ooseq = NULL;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	2200      	movs	r2, #0
 80069ba:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	7d1b      	ldrb	r3, [r3, #20]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d109      	bne.n	80069d8 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069c4:	4b74      	ldr	r3, [pc, #464]	@ (8006b98 <tcp_slowtmr+0x4f8>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b28      	cmp	r3, #40	@ 0x28
 80069d0:	d902      	bls.n	80069d8 <tcp_slowtmr+0x338>
        ++pcb_remove;
 80069d2:	7ffb      	ldrb	r3, [r7, #31]
 80069d4:	3301      	adds	r3, #1
 80069d6:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	7d1b      	ldrb	r3, [r3, #20]
 80069dc:	2b09      	cmp	r3, #9
 80069de:	d109      	bne.n	80069f4 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80069e0:	4b6d      	ldr	r3, [pc, #436]	@ (8006b98 <tcp_slowtmr+0x4f8>)
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2bf0      	cmp	r3, #240	@ 0xf0
 80069ec:	d902      	bls.n	80069f4 <tcp_slowtmr+0x354>
        ++pcb_remove;
 80069ee:	7ffb      	ldrb	r3, [r7, #31]
 80069f0:	3301      	adds	r3, #1
 80069f2:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 80069f4:	7ffb      	ldrb	r3, [r7, #31]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d05d      	beq.n	8006ab6 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a00:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8006a02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a04:	f000 fc50 	bl	80072a8 <tcp_pcb_purge>
      if (prev != NULL) {
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d010      	beq.n	8006a30 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006a0e:	4b65      	ldr	r3, [pc, #404]	@ (8006ba4 <tcp_slowtmr+0x504>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d106      	bne.n	8006a26 <tcp_slowtmr+0x386>
 8006a18:	4b63      	ldr	r3, [pc, #396]	@ (8006ba8 <tcp_slowtmr+0x508>)
 8006a1a:	f240 4289 	movw	r2, #1161	@ 0x489
 8006a1e:	4963      	ldr	r1, [pc, #396]	@ (8006bac <tcp_slowtmr+0x50c>)
 8006a20:	4863      	ldr	r0, [pc, #396]	@ (8006bb0 <tcp_slowtmr+0x510>)
 8006a22:	f007 f885 	bl	800db30 <iprintf>
        prev->next = pcb->next;
 8006a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	60da      	str	r2, [r3, #12]
 8006a2e:	e00f      	b.n	8006a50 <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006a30:	4b5c      	ldr	r3, [pc, #368]	@ (8006ba4 <tcp_slowtmr+0x504>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d006      	beq.n	8006a48 <tcp_slowtmr+0x3a8>
 8006a3a:	4b5b      	ldr	r3, [pc, #364]	@ (8006ba8 <tcp_slowtmr+0x508>)
 8006a3c:	f240 428d 	movw	r2, #1165	@ 0x48d
 8006a40:	495c      	ldr	r1, [pc, #368]	@ (8006bb4 <tcp_slowtmr+0x514>)
 8006a42:	485b      	ldr	r0, [pc, #364]	@ (8006bb0 <tcp_slowtmr+0x510>)
 8006a44:	f007 f874 	bl	800db30 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	4a55      	ldr	r2, [pc, #340]	@ (8006ba4 <tcp_slowtmr+0x504>)
 8006a4e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8006a50:	7fbb      	ldrb	r3, [r7, #30]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d010      	beq.n	8006a78 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006a5e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	1d1d      	adds	r5, r3, #4
 8006a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a66:	8adb      	ldrh	r3, [r3, #22]
 8006a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a6a:	8b12      	ldrh	r2, [r2, #24]
 8006a6c:	9201      	str	r2, [sp, #4]
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	462b      	mov	r3, r5
 8006a72:	4622      	mov	r2, r4
 8006a74:	f004 f8d4 	bl	800ac20 <tcp_rst>
      err_arg = pcb->callback_arg;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a80:	7d1b      	ldrb	r3, [r3, #20]
 8006a82:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a86:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	2001      	movs	r0, #1
 8006a92:	f7fe f9af 	bl	8004df4 <memp_free>
      tcp_active_pcbs_changed = 0;
 8006a96:	4b48      	ldr	r3, [pc, #288]	@ (8006bb8 <tcp_slowtmr+0x518>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d004      	beq.n	8006aac <tcp_slowtmr+0x40c>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f06f 010c 	mvn.w	r1, #12
 8006aa8:	68b8      	ldr	r0, [r7, #8]
 8006aaa:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006aac:	4b42      	ldr	r3, [pc, #264]	@ (8006bb8 <tcp_slowtmr+0x518>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d035      	beq.n	8006b20 <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 8006ab4:	e606      	b.n	80066c4 <tcp_slowtmr+0x24>
      prev = pcb;
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	7edb      	ldrb	r3, [r3, #27]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	7eda      	ldrb	r2, [r3, #27]
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	7f1b      	ldrb	r3, [r3, #28]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d323      	bcc.n	8006b20 <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	2200      	movs	r2, #0
 8006adc:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 8006ade:	4b36      	ldr	r3, [pc, #216]	@ (8006bb8 <tcp_slowtmr+0x518>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <tcp_slowtmr+0x464>
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af4:	6a3a      	ldr	r2, [r7, #32]
 8006af6:	6912      	ldr	r2, [r2, #16]
 8006af8:	6a39      	ldr	r1, [r7, #32]
 8006afa:	4610      	mov	r0, r2
 8006afc:	4798      	blx	r3
 8006afe:	4603      	mov	r3, r0
 8006b00:	777b      	strb	r3, [r7, #29]
 8006b02:	e001      	b.n	8006b08 <tcp_slowtmr+0x468>
 8006b04:	2300      	movs	r3, #0
 8006b06:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006b08:	4b2b      	ldr	r3, [pc, #172]	@ (8006bb8 <tcp_slowtmr+0x518>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f47f add8 	bne.w	80066c2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006b12:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <tcp_slowtmr+0x480>
          tcp_output(prev);
 8006b1a:	6a38      	ldr	r0, [r7, #32]
 8006b1c:	f003 fdfc 	bl	800a718 <tcp_output>
  while (pcb != NULL) {
 8006b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f47f add4 	bne.w	80066d0 <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8006b2c:	4b23      	ldr	r3, [pc, #140]	@ (8006bbc <tcp_slowtmr+0x51c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8006b32:	e068      	b.n	8006c06 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	7d1b      	ldrb	r3, [r3, #20]
 8006b38:	2b0a      	cmp	r3, #10
 8006b3a:	d006      	beq.n	8006b4a <tcp_slowtmr+0x4aa>
 8006b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba8 <tcp_slowtmr+0x508>)
 8006b3e:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8006b42:	491f      	ldr	r1, [pc, #124]	@ (8006bc0 <tcp_slowtmr+0x520>)
 8006b44:	481a      	ldr	r0, [pc, #104]	@ (8006bb0 <tcp_slowtmr+0x510>)
 8006b46:	f006 fff3 	bl	800db30 <iprintf>
    pcb_remove = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006b4e:	4b12      	ldr	r3, [pc, #72]	@ (8006b98 <tcp_slowtmr+0x4f8>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2bf0      	cmp	r3, #240	@ 0xf0
 8006b5a:	d902      	bls.n	8006b62 <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 8006b5c:	7ffb      	ldrb	r3, [r7, #31]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006b62:	7ffb      	ldrb	r3, [r7, #31]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d049      	beq.n	8006bfc <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006b68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006b6a:	f000 fb9d 	bl	80072a8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d029      	beq.n	8006bc8 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006b74:	4b11      	ldr	r3, [pc, #68]	@ (8006bbc <tcp_slowtmr+0x51c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d106      	bne.n	8006b8c <tcp_slowtmr+0x4ec>
 8006b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba8 <tcp_slowtmr+0x508>)
 8006b80:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8006b84:	490f      	ldr	r1, [pc, #60]	@ (8006bc4 <tcp_slowtmr+0x524>)
 8006b86:	480a      	ldr	r0, [pc, #40]	@ (8006bb0 <tcp_slowtmr+0x510>)
 8006b88:	f006 ffd2 	bl	800db30 <iprintf>
        prev->next = pcb->next;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	60da      	str	r2, [r3, #12]
 8006b94:	e028      	b.n	8006be8 <tcp_slowtmr+0x548>
 8006b96:	bf00      	nop
 8006b98:	20008308 	.word	0x20008308
 8006b9c:	000124f8 	.word	0x000124f8
 8006ba0:	10624dd3 	.word	0x10624dd3
 8006ba4:	20008314 	.word	0x20008314
 8006ba8:	0800f44c 	.word	0x0800f44c
 8006bac:	0800f684 	.word	0x0800f684
 8006bb0:	0800f488 	.word	0x0800f488
 8006bb4:	0800f6b0 	.word	0x0800f6b0
 8006bb8:	2000831c 	.word	0x2000831c
 8006bbc:	20008318 	.word	0x20008318
 8006bc0:	0800f6dc 	.word	0x0800f6dc
 8006bc4:	0800f70c 	.word	0x0800f70c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006bc8:	4b13      	ldr	r3, [pc, #76]	@ (8006c18 <tcp_slowtmr+0x578>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d006      	beq.n	8006be0 <tcp_slowtmr+0x540>
 8006bd2:	4b12      	ldr	r3, [pc, #72]	@ (8006c1c <tcp_slowtmr+0x57c>)
 8006bd4:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8006bd8:	4911      	ldr	r1, [pc, #68]	@ (8006c20 <tcp_slowtmr+0x580>)
 8006bda:	4812      	ldr	r0, [pc, #72]	@ (8006c24 <tcp_slowtmr+0x584>)
 8006bdc:	f006 ffa8 	bl	800db30 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4a0c      	ldr	r2, [pc, #48]	@ (8006c18 <tcp_slowtmr+0x578>)
 8006be6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bea:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006bf2:	69b9      	ldr	r1, [r7, #24]
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	f7fe f8fd 	bl	8004df4 <memp_free>
 8006bfa:	e004      	b.n	8006c06 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d193      	bne.n	8006b34 <tcp_slowtmr+0x494>
    }
  }
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	3728      	adds	r7, #40	@ 0x28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bdb0      	pop	{r4, r5, r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20008318 	.word	0x20008318
 8006c1c:	0800f44c 	.word	0x0800f44c
 8006c20:	0800f734 	.word	0x0800f734
 8006c24:	0800f488 	.word	0x0800f488

08006c28 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ce4 <tcp_fasttmr+0xbc>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce4 <tcp_fasttmr+0xbc>)
 8006c38:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce8 <tcp_fasttmr+0xc0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006c40:	e048      	b.n	8006cd4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7f5a      	ldrb	r2, [r3, #29]
 8006c46:	4b27      	ldr	r3, [pc, #156]	@ (8006ce4 <tcp_fasttmr+0xbc>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d03f      	beq.n	8006cce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006c4e:	4b25      	ldr	r3, [pc, #148]	@ (8006ce4 <tcp_fasttmr+0xbc>)
 8006c50:	781a      	ldrb	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	7e9b      	ldrb	r3, [r3, #26]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d010      	beq.n	8006c84 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7e9b      	ldrb	r3, [r3, #26]
 8006c66:	f043 0302 	orr.w	r3, r3, #2
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f003 fd51 	bl	800a718 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	7e9b      	ldrb	r3, [r3, #26]
 8006c7a:	f023 0303 	bic.w	r3, r3, #3
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	7e9b      	ldrb	r3, [r3, #26]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d009      	beq.n	8006ca4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7e9b      	ldrb	r3, [r3, #26]
 8006c94:	f023 0308 	bic.w	r3, r3, #8
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff f986 	bl	8005fb0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8006cec <tcp_fasttmr+0xc4>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f819 	bl	8006cf0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8006cec <tcp_fasttmr+0xc4>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d000      	beq.n	8006cc8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006cc6:	e7b8      	b.n	8006c3a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	607b      	str	r3, [r7, #4]
 8006ccc:	e002      	b.n	8006cd4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1b3      	bne.n	8006c42 <tcp_fasttmr+0x1a>
    }
  }
}
 8006cda:	bf00      	nop
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	2000831e 	.word	0x2000831e
 8006ce8:	20008314 	.word	0x20008314
 8006cec:	2000831c 	.word	0x2000831c

08006cf0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006cf0:	b590      	push	{r4, r7, lr}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cfc:	7b5b      	ldrb	r3, [r3, #13]
 8006cfe:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d04:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <tcp_process_refused_data+0x3e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6918      	ldr	r0, [r3, #16]
 8006d20:	2300      	movs	r3, #0
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	6879      	ldr	r1, [r7, #4]
 8006d26:	47a0      	blx	r4
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
 8006d2c:	e007      	b.n	8006d3e <tcp_process_refused_data+0x4e>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	2000      	movs	r0, #0
 8006d36:	f000 f89b 	bl	8006e70 <tcp_recv_null>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d12a      	bne.n	8006d9c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d033      	beq.n	8006db8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d54:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006d58:	d005      	beq.n	8006d66 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d5e:	3301      	adds	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <tcp_process_refused_data+0x98>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6918      	ldr	r0, [r3, #16]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	47a0      	blx	r4
 8006d82:	4603      	mov	r3, r0
 8006d84:	73fb      	strb	r3, [r7, #15]
 8006d86:	e001      	b.n	8006d8c <tcp_process_refused_data+0x9c>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d90:	f113 0f0d 	cmn.w	r3, #13
 8006d94:	d110      	bne.n	8006db8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8006d96:	f06f 030c 	mvn.w	r3, #12
 8006d9a:	e00e      	b.n	8006dba <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8006d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006da0:	f113 0f0d 	cmn.w	r3, #13
 8006da4:	d102      	bne.n	8006dac <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006da6:	f06f 030c 	mvn.w	r3, #12
 8006daa:	e006      	b.n	8006dba <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 8006db2:	f06f 0304 	mvn.w	r3, #4
 8006db6:	e000      	b.n	8006dba <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd90      	pop	{r4, r7, pc}

08006dc2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006dca:	e007      	b.n	8006ddc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f80a 	bl	8006dec <tcp_seg_free>
    seg = next;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1f4      	bne.n	8006dcc <tcp_segs_free+0xa>
  }
}
 8006de2:	bf00      	nop
 8006de4:	bf00      	nop
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00c      	beq.n	8006e14 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe fd10 	bl	800582c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	2003      	movs	r0, #3
 8006e10:	f7fd fff0 	bl	8004df4 <memp_free>
  }
}
 8006e14:	bf00      	nop
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	78fa      	ldrb	r2, [r7, #3]
 8006e2c:	755a      	strb	r2, [r3, #21]
}
 8006e2e:	bf00      	nop
 8006e30:	370c      	adds	r7, #12
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bc80      	pop	{r7}
 8006e36:	4770      	bx	lr

08006e38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006e40:	2003      	movs	r0, #3
 8006e42:	f7fd ff8b 	bl	8004d5c <memp_malloc>
 8006e46:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <tcp_seg_copy+0x1a>
    return NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	e00a      	b.n	8006e68 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006e52:	2210      	movs	r2, #16
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f006 ff63 	bl	800dd22 <memcpy>
  pbuf_ref(cseg->p);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fe fd8d 	bl	8005980 <pbuf_ref>
  return cseg;
 8006e66:	68fb      	ldr	r3, [r7, #12]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	891b      	ldrh	r3, [r3, #8]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	68b8      	ldr	r0, [r7, #8]
 8006e8c:	f7ff fb6a 	bl	8006564 <tcp_recved>
    pbuf_free(p);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fe fccb 	bl	800582c <pbuf_free>
 8006e96:	e008      	b.n	8006eaa <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006e98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8006ea0:	68b8      	ldr	r0, [r7, #8]
 8006ea2:	f7ff f8ef 	bl	8006084 <tcp_close>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	e000      	b.n	8006eac <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	db01      	blt.n	8006eca <tcp_kill_prio+0x16>
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	e000      	b.n	8006ecc <tcp_kill_prio+0x18>
 8006eca:	237f      	movs	r3, #127	@ 0x7f
 8006ecc:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ed6:	4b16      	ldr	r3, [pc, #88]	@ (8006f30 <tcp_kill_prio+0x7c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	e01a      	b.n	8006f14 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	7d5b      	ldrb	r3, [r3, #21]
 8006ee2:	7afa      	ldrb	r2, [r7, #11]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d312      	bcc.n	8006f0e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006ee8:	4b12      	ldr	r3, [pc, #72]	@ (8006f34 <tcp_kill_prio+0x80>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d80a      	bhi.n	8006f0e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8006ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f34 <tcp_kill_prio+0x80>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	7d5b      	ldrb	r3, [r3, #21]
 8006f0c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e1      	bne.n	8006ede <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006f20:	6938      	ldr	r0, [r7, #16]
 8006f22:	f7ff f979 	bl	8006218 <tcp_abort>
  }
}
 8006f26:	bf00      	nop
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20008314 	.word	0x20008314
 8006f34:	20008308 	.word	0x20008308

08006f38 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d009      	beq.n	8006f5c <tcp_kill_state+0x24>
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	d006      	beq.n	8006f5c <tcp_kill_state+0x24>
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb8 <tcp_kill_state+0x80>)
 8006f50:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006f54:	4919      	ldr	r1, [pc, #100]	@ (8006fbc <tcp_kill_state+0x84>)
 8006f56:	481a      	ldr	r0, [pc, #104]	@ (8006fc0 <tcp_kill_state+0x88>)
 8006f58:	f006 fdea 	bl	800db30 <iprintf>

  inactivity = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f64:	4b17      	ldr	r3, [pc, #92]	@ (8006fc4 <tcp_kill_state+0x8c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	e017      	b.n	8006f9c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	7d1b      	ldrb	r3, [r3, #20]
 8006f70:	79fa      	ldrb	r2, [r7, #7]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d10f      	bne.n	8006f96 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006f76:	4b14      	ldr	r3, [pc, #80]	@ (8006fc8 <tcp_kill_state+0x90>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d807      	bhi.n	8006f96 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006f86:	4b10      	ldr	r3, [pc, #64]	@ (8006fc8 <tcp_kill_state+0x90>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e4      	bne.n	8006f6c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6938      	ldr	r0, [r7, #16]
 8006fac:	f7ff f882 	bl	80060b4 <tcp_abandon>
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	0800f44c 	.word	0x0800f44c
 8006fbc:	0800f75c 	.word	0x0800f75c
 8006fc0:	0800f488 	.word	0x0800f488
 8006fc4:	20008314 	.word	0x20008314
 8006fc8:	20008308 	.word	0x20008308

08006fcc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fda:	4b12      	ldr	r3, [pc, #72]	@ (8007024 <tcp_kill_timewait+0x58>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e012      	b.n	8007008 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006fe2:	4b11      	ldr	r3, [pc, #68]	@ (8007028 <tcp_kill_timewait+0x5c>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d807      	bhi.n	8007002 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8007028 <tcp_kill_timewait+0x5c>)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e9      	bne.n	8006fe2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007014:	68b8      	ldr	r0, [r7, #8]
 8007016:	f7ff f8ff 	bl	8006218 <tcp_abort>
  }
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20008318 	.word	0x20008318
 8007028:	20008308 	.word	0x20008308

0800702c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007036:	2001      	movs	r0, #1
 8007038:	f7fd fe90 	bl	8004d5c <memp_malloc>
 800703c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d124      	bne.n	800708e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007044:	f7ff ffc2 	bl	8006fcc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007048:	2001      	movs	r0, #1
 800704a:	f7fd fe87 	bl	8004d5c <memp_malloc>
 800704e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d11b      	bne.n	800708e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007056:	2009      	movs	r0, #9
 8007058:	f7ff ff6e 	bl	8006f38 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800705c:	2001      	movs	r0, #1
 800705e:	f7fd fe7d 	bl	8004d5c <memp_malloc>
 8007062:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d111      	bne.n	800708e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800706a:	2008      	movs	r0, #8
 800706c:	f7ff ff64 	bl	8006f38 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007070:	2001      	movs	r0, #1
 8007072:	f7fd fe73 	bl	8004d5c <memp_malloc>
 8007076:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d107      	bne.n	800708e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff ff17 	bl	8006eb4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007086:	2001      	movs	r0, #1
 8007088:	f7fd fe68 	bl	8004d5c <memp_malloc>
 800708c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d03f      	beq.n	8007114 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007094:	2298      	movs	r2, #152	@ 0x98
 8007096:	2100      	movs	r1, #0
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f006 fdae 	bl	800dbfa <memset>
    pcb->prio = prio;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	79fa      	ldrb	r2, [r7, #7]
 80070a2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80070aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80070b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	22ff      	movs	r2, #255	@ 0xff
 80070c2:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80070ca:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2206      	movs	r2, #6
 80070d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2206      	movs	r2, #6
 80070d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070e0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80070ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007120 <tcp_alloc+0xf4>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80070f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <tcp_alloc+0xf8>)
 80070f4:	781a      	ldrb	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007100:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4a08      	ldr	r2, [pc, #32]	@ (8007128 <tcp_alloc+0xfc>)
 8007108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4a07      	ldr	r2, [pc, #28]	@ (800712c <tcp_alloc+0x100>)
 8007110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007114:	68fb      	ldr	r3, [r7, #12]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20008308 	.word	0x20008308
 8007124:	2000831e 	.word	0x2000831e
 8007128:	08006e71 	.word	0x08006e71
 800712c:	006ddd00 	.word	0x006ddd00

08007130 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800713a:	2040      	movs	r0, #64	@ 0x40
 800713c:	f7ff ff76 	bl	800702c <tcp_alloc>
 8007140:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8007142:	68fb      	ldr	r3, [r7, #12]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	611a      	str	r2, [r3, #16]
  }
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00e      	beq.n	800719a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	7d1b      	ldrb	r3, [r3, #20]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d106      	bne.n	8007192 <tcp_recv+0x26>
 8007184:	4b07      	ldr	r3, [pc, #28]	@ (80071a4 <tcp_recv+0x38>)
 8007186:	f240 62bb 	movw	r2, #1723	@ 0x6bb
 800718a:	4907      	ldr	r1, [pc, #28]	@ (80071a8 <tcp_recv+0x3c>)
 800718c:	4807      	ldr	r0, [pc, #28]	@ (80071ac <tcp_recv+0x40>)
 800718e:	f006 fccf 	bl	800db30 <iprintf>
    pcb->recv = recv;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	0800f44c 	.word	0x0800f44c
 80071a8:	0800f76c 	.word	0x0800f76c
 80071ac:	0800f488 	.word	0x0800f488

080071b0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00d      	beq.n	80071dc <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	7d1b      	ldrb	r3, [r3, #20]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d106      	bne.n	80071d6 <tcp_sent+0x26>
 80071c8:	4b06      	ldr	r3, [pc, #24]	@ (80071e4 <tcp_sent+0x34>)
 80071ca:	f240 62cc 	movw	r2, #1740	@ 0x6cc
 80071ce:	4906      	ldr	r1, [pc, #24]	@ (80071e8 <tcp_sent+0x38>)
 80071d0:	4806      	ldr	r0, [pc, #24]	@ (80071ec <tcp_sent+0x3c>)
 80071d2:	f006 fcad 	bl	800db30 <iprintf>
    pcb->sent = sent;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	0800f44c 	.word	0x0800f44c
 80071e8:	0800f794 	.word	0x0800f794
 80071ec:	0800f488 	.word	0x0800f488

080071f0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00e      	beq.n	800721e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7d1b      	ldrb	r3, [r3, #20]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d106      	bne.n	8007216 <tcp_err+0x26>
 8007208:	4b07      	ldr	r3, [pc, #28]	@ (8007228 <tcp_err+0x38>)
 800720a:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 800720e:	4907      	ldr	r1, [pc, #28]	@ (800722c <tcp_err+0x3c>)
 8007210:	4807      	ldr	r0, [pc, #28]	@ (8007230 <tcp_err+0x40>)
 8007212:	f006 fc8d 	bl	800db30 <iprintf>
    pcb->errf = err;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 800721e:	bf00      	nop
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	0800f44c 	.word	0x0800f44c
 800722c:	0800f7bc 	.word	0x0800f7bc
 8007230:	0800f488 	.word	0x0800f488

08007234 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d008      	beq.n	8007256 <tcp_accept+0x22>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	7d1b      	ldrb	r3, [r3, #20]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d104      	bne.n	8007256 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	619a      	str	r2, [r3, #24]
  }
}
 8007256:	bf00      	nop
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr

08007260 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4613      	mov	r3, r2
 800726c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	7d1b      	ldrb	r3, [r3, #20]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d106      	bne.n	8007284 <tcp_poll+0x24>
 8007276:	4b09      	ldr	r3, [pc, #36]	@ (800729c <tcp_poll+0x3c>)
 8007278:	f240 7203 	movw	r2, #1795	@ 0x703
 800727c:	4908      	ldr	r1, [pc, #32]	@ (80072a0 <tcp_poll+0x40>)
 800727e:	4809      	ldr	r0, [pc, #36]	@ (80072a4 <tcp_poll+0x44>)
 8007280:	f006 fc56 	bl	800db30 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	79fa      	ldrb	r2, [r7, #7]
 8007290:	771a      	strb	r2, [r3, #28]
}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	0800f44c 	.word	0x0800f44c
 80072a0:	0800f7e4 	.word	0x0800f7e4
 80072a4:	0800f488 	.word	0x0800f488

080072a8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	7d1b      	ldrb	r3, [r3, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d034      	beq.n	8007322 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80072bc:	2b0a      	cmp	r3, #10
 80072be:	d030      	beq.n	8007322 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d02c      	beq.n	8007322 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d4:	4618      	mov	r0, r3
 80072d6:	f7fe faa9 	bl	800582c <pbuf_free>
      pcb->refused_data = NULL;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff fd6c 	bl	8006dc2 <tcp_segs_free>
    pcb->ooseq = NULL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80072f6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff fd60 	bl	8006dc2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff fd5b 	bl	8006dc2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	669a      	str	r2, [r3, #104]	@ 0x68
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d105      	bne.n	800734c <tcp_pcb_remove+0x20>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	e013      	b.n	8007374 <tcp_pcb_remove+0x48>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	e00c      	b.n	800736e <tcp_pcb_remove+0x42>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d104      	bne.n	8007368 <tcp_pcb_remove+0x3c>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	60da      	str	r2, [r3, #12]
 8007366:	e005      	b.n	8007374 <tcp_pcb_remove+0x48>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1ef      	bne.n	8007354 <tcp_pcb_remove+0x28>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2200      	movs	r2, #0
 8007378:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800737a:	6838      	ldr	r0, [r7, #0]
 800737c:	f7ff ff94 	bl	80072a8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	7d1b      	ldrb	r3, [r3, #20]
 8007384:	2b0a      	cmp	r3, #10
 8007386:	d013      	beq.n	80073b0 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800738c:	2b01      	cmp	r3, #1
 800738e:	d00f      	beq.n	80073b0 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	7e9b      	ldrb	r3, [r3, #26]
 8007394:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8007398:	2b00      	cmp	r3, #0
 800739a:	d009      	beq.n	80073b0 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	7e9b      	ldrb	r3, [r3, #26]
 80073a0:	f043 0302 	orr.w	r3, r3, #2
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80073aa:	6838      	ldr	r0, [r7, #0]
 80073ac:	f003 f9b4 	bl	800a718 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	7d1b      	ldrb	r3, [r3, #20]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d020      	beq.n	80073fa <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d006      	beq.n	80073ce <tcp_pcb_remove+0xa2>
 80073c0:	4b13      	ldr	r3, [pc, #76]	@ (8007410 <tcp_pcb_remove+0xe4>)
 80073c2:	f240 7253 	movw	r2, #1875	@ 0x753
 80073c6:	4913      	ldr	r1, [pc, #76]	@ (8007414 <tcp_pcb_remove+0xe8>)
 80073c8:	4813      	ldr	r0, [pc, #76]	@ (8007418 <tcp_pcb_remove+0xec>)
 80073ca:	f006 fbb1 	bl	800db30 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d006      	beq.n	80073e4 <tcp_pcb_remove+0xb8>
 80073d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007410 <tcp_pcb_remove+0xe4>)
 80073d8:	f240 7254 	movw	r2, #1876	@ 0x754
 80073dc:	490f      	ldr	r1, [pc, #60]	@ (800741c <tcp_pcb_remove+0xf0>)
 80073de:	480e      	ldr	r0, [pc, #56]	@ (8007418 <tcp_pcb_remove+0xec>)
 80073e0:	f006 fba6 	bl	800db30 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d006      	beq.n	80073fa <tcp_pcb_remove+0xce>
 80073ec:	4b08      	ldr	r3, [pc, #32]	@ (8007410 <tcp_pcb_remove+0xe4>)
 80073ee:	f240 7256 	movw	r2, #1878	@ 0x756
 80073f2:	490b      	ldr	r1, [pc, #44]	@ (8007420 <tcp_pcb_remove+0xf4>)
 80073f4:	4808      	ldr	r0, [pc, #32]	@ (8007418 <tcp_pcb_remove+0xec>)
 80073f6:	f006 fb9b 	bl	800db30 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2200      	movs	r2, #0
 80073fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	0800f44c 	.word	0x0800f44c
 8007414:	0800f804 	.word	0x0800f804
 8007418:	0800f488 	.word	0x0800f488
 800741c:	0800f81c 	.word	0x0800f81c
 8007420:	0800f838 	.word	0x0800f838

08007424 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800742c:	4b06      	ldr	r3, [pc, #24]	@ (8007448 <tcp_next_iss+0x24>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	4b06      	ldr	r3, [pc, #24]	@ (800744c <tcp_next_iss+0x28>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4413      	add	r3, r2
 8007436:	4a04      	ldr	r2, [pc, #16]	@ (8007448 <tcp_next_iss+0x24>)
 8007438:	6013      	str	r3, [r2, #0]
  return iss;
 800743a:	4b03      	ldr	r3, [pc, #12]	@ (8007448 <tcp_next_iss+0x24>)
 800743c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800743e:	4618      	mov	r0, r3
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr
 8007448:	2000000c 	.word	0x2000000c
 800744c:	20008308 	.word	0x20008308

08007450 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	6039      	str	r1, [r7, #0]
 800745a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800745c:	6838      	ldr	r0, [r7, #0]
 800745e:	f005 f941 	bl	800c6e4 <ip4_route>
 8007462:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800746a:	88fb      	ldrh	r3, [r7, #6]
 800746c:	e010      	b.n	8007490 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007472:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007474:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d008      	beq.n	800748e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800747c:	897b      	ldrh	r3, [r7, #10]
 800747e:	3b28      	subs	r3, #40	@ 0x28
 8007480:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007482:	893a      	ldrh	r2, [r7, #8]
 8007484:	88fb      	ldrh	r3, [r7, #6]
 8007486:	4293      	cmp	r3, r2
 8007488:	bf28      	it	cs
 800748a:	4613      	movcs	r3, r2
 800748c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800748e:	88fb      	ldrh	r3, [r7, #6]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80074a6:	e011      	b.n	80074cc <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d108      	bne.n	80074c6 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7fe feac 	bl	8006218 <tcp_abort>
      pcb = next;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e002      	b.n	80074cc <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1ea      	bne.n	80074a8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d02c      	beq.n	8007546 <tcp_netif_ip_addr_changed+0x6a>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d028      	beq.n	8007546 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80074f4:	4b16      	ldr	r3, [pc, #88]	@ (8007550 <tcp_netif_ip_addr_changed+0x74>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4619      	mov	r1, r3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff ffcc 	bl	8007498 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007500:	4b14      	ldr	r3, [pc, #80]	@ (8007554 <tcp_netif_ip_addr_changed+0x78>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff ffc6 	bl	8007498 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d019      	beq.n	8007546 <tcp_netif_ip_addr_changed+0x6a>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d015      	beq.n	8007546 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800751a:	4b0f      	ldr	r3, [pc, #60]	@ (8007558 <tcp_netif_ip_addr_changed+0x7c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e00e      	b.n	8007540 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d103      	bne.n	800753c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1ed      	bne.n	8007522 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007546:	bf00      	nop
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	20008314 	.word	0x20008314
 8007554:	2000830c 	.word	0x2000830c
 8007558:	20008310 	.word	0x20008310

0800755c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b08b      	sub	sp, #44	@ 0x2c
 8007560:	af02      	add	r7, sp, #8
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	4a81      	ldr	r2, [pc, #516]	@ (8007770 <tcp_input+0x214>)
 800756c:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	895b      	ldrh	r3, [r3, #10]
 8007572:	2b13      	cmp	r3, #19
 8007574:	f240 8396 	bls.w	8007ca4 <tcp_input+0x748>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007578:	4b7e      	ldr	r3, [pc, #504]	@ (8007774 <tcp_input+0x218>)
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	4a7d      	ldr	r2, [pc, #500]	@ (8007774 <tcp_input+0x218>)
 800757e:	6812      	ldr	r2, [r2, #0]
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f005 fb28 	bl	800cbd8 <ip4_addr_isbroadcast_u32>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	f040 838c 	bne.w	8007ca8 <tcp_input+0x74c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007590:	4b78      	ldr	r3, [pc, #480]	@ (8007774 <tcp_input+0x218>)
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007598:	2be0      	cmp	r3, #224	@ 0xe0
 800759a:	f000 8385 	beq.w	8007ca8 <tcp_input+0x74c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800759e:	4b74      	ldr	r3, [pc, #464]	@ (8007770 <tcp_input+0x214>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	899b      	ldrh	r3, [r3, #12]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fc fffa 	bl	80045a0 <lwip_htons>
 80075ac:	4603      	mov	r3, r0
 80075ae:	0b1b      	lsrs	r3, r3, #12
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80075b8:	7cbb      	ldrb	r3, [r7, #18]
 80075ba:	2b13      	cmp	r3, #19
 80075bc:	f240 8376 	bls.w	8007cac <tcp_input+0x750>
 80075c0:	7cbb      	ldrb	r3, [r7, #18]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	891b      	ldrh	r3, [r3, #8]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	f200 836f 	bhi.w	8007cac <tcp_input+0x750>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80075ce:	7cbb      	ldrb	r3, [r7, #18]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3b14      	subs	r3, #20
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	4b68      	ldr	r3, [pc, #416]	@ (8007778 <tcp_input+0x21c>)
 80075d8:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80075da:	4b68      	ldr	r3, [pc, #416]	@ (800777c <tcp_input+0x220>)
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	895a      	ldrh	r2, [r3, #10]
 80075e4:	7cbb      	ldrb	r3, [r7, #18]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d30d      	bcc.n	8007608 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80075ec:	4b62      	ldr	r3, [pc, #392]	@ (8007778 <tcp_input+0x21c>)
 80075ee:	881a      	ldrh	r2, [r3, #0]
 80075f0:	4b63      	ldr	r3, [pc, #396]	@ (8007780 <tcp_input+0x224>)
 80075f2:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 80075f4:	7cbb      	ldrb	r3, [r7, #18]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	425b      	negs	r3, r3
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	b21b      	sxth	r3, r3
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7fe f8ef 	bl	80057e4 <pbuf_header>
 8007606:	e055      	b.n	80076b4 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <tcp_input+0xc0>
 8007610:	4b5c      	ldr	r3, [pc, #368]	@ (8007784 <tcp_input+0x228>)
 8007612:	22b2      	movs	r2, #178	@ 0xb2
 8007614:	495c      	ldr	r1, [pc, #368]	@ (8007788 <tcp_input+0x22c>)
 8007616:	485d      	ldr	r0, [pc, #372]	@ (800778c <tcp_input+0x230>)
 8007618:	f006 fa8a 	bl	800db30 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800761c:	f06f 0113 	mvn.w	r1, #19
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fe f8df 	bl	80057e4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	895a      	ldrh	r2, [r3, #10]
 800762a:	4b55      	ldr	r3, [pc, #340]	@ (8007780 <tcp_input+0x224>)
 800762c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800762e:	4b52      	ldr	r3, [pc, #328]	@ (8007778 <tcp_input+0x21c>)
 8007630:	881a      	ldrh	r2, [r3, #0]
 8007632:	4b53      	ldr	r3, [pc, #332]	@ (8007780 <tcp_input+0x224>)
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800763a:	4b51      	ldr	r3, [pc, #324]	@ (8007780 <tcp_input+0x224>)
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	425b      	negs	r3, r3
 8007640:	b29b      	uxth	r3, r3
 8007642:	b21b      	sxth	r3, r3
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7fe f8cc 	bl	80057e4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	895b      	ldrh	r3, [r3, #10]
 8007652:	8a3a      	ldrh	r2, [r7, #16]
 8007654:	429a      	cmp	r2, r3
 8007656:	f200 832b 	bhi.w	8007cb0 <tcp_input+0x754>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	4a46      	ldr	r2, [pc, #280]	@ (800777c <tcp_input+0x220>)
 8007662:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	8a3b      	ldrh	r3, [r7, #16]
 800766a:	425b      	negs	r3, r3
 800766c:	b29b      	uxth	r3, r3
 800766e:	b21b      	sxth	r3, r3
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7fe f8b6 	bl	80057e4 <pbuf_header>
    p->tot_len -= opt2len;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	891a      	ldrh	r2, [r3, #8]
 800767c:	8a3b      	ldrh	r3, [r7, #16]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	b29a      	uxth	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	895b      	ldrh	r3, [r3, #10]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <tcp_input+0x13e>
 800768e:	4b3d      	ldr	r3, [pc, #244]	@ (8007784 <tcp_input+0x228>)
 8007690:	22cf      	movs	r2, #207	@ 0xcf
 8007692:	493f      	ldr	r1, [pc, #252]	@ (8007790 <tcp_input+0x234>)
 8007694:	483d      	ldr	r0, [pc, #244]	@ (800778c <tcp_input+0x230>)
 8007696:	f006 fa4b 	bl	800db30 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	891a      	ldrh	r2, [r3, #8]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	891b      	ldrh	r3, [r3, #8]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d005      	beq.n	80076b4 <tcp_input+0x158>
 80076a8:	4b36      	ldr	r3, [pc, #216]	@ (8007784 <tcp_input+0x228>)
 80076aa:	22d0      	movs	r2, #208	@ 0xd0
 80076ac:	4939      	ldr	r1, [pc, #228]	@ (8007794 <tcp_input+0x238>)
 80076ae:	4837      	ldr	r0, [pc, #220]	@ (800778c <tcp_input+0x230>)
 80076b0:	f006 fa3e 	bl	800db30 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80076b4:	4b2e      	ldr	r3, [pc, #184]	@ (8007770 <tcp_input+0x214>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	4a2c      	ldr	r2, [pc, #176]	@ (8007770 <tcp_input+0x214>)
 80076be:	6814      	ldr	r4, [r2, #0]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fc ff6d 	bl	80045a0 <lwip_htons>
 80076c6:	4603      	mov	r3, r0
 80076c8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80076ca:	4b29      	ldr	r3, [pc, #164]	@ (8007770 <tcp_input+0x214>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	885b      	ldrh	r3, [r3, #2]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	4a27      	ldr	r2, [pc, #156]	@ (8007770 <tcp_input+0x214>)
 80076d4:	6814      	ldr	r4, [r2, #0]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fc ff62 	bl	80045a0 <lwip_htons>
 80076dc:	4603      	mov	r3, r0
 80076de:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80076e0:	4b23      	ldr	r3, [pc, #140]	@ (8007770 <tcp_input+0x214>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	4a22      	ldr	r2, [pc, #136]	@ (8007770 <tcp_input+0x214>)
 80076e8:	6814      	ldr	r4, [r2, #0]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fc ff65 	bl	80045ba <lwip_htonl>
 80076f0:	4603      	mov	r3, r0
 80076f2:	6063      	str	r3, [r4, #4]
 80076f4:	6863      	ldr	r3, [r4, #4]
 80076f6:	4a28      	ldr	r2, [pc, #160]	@ (8007798 <tcp_input+0x23c>)
 80076f8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80076fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007770 <tcp_input+0x214>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	4a1b      	ldr	r2, [pc, #108]	@ (8007770 <tcp_input+0x214>)
 8007702:	6814      	ldr	r4, [r2, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f7fc ff58 	bl	80045ba <lwip_htonl>
 800770a:	4603      	mov	r3, r0
 800770c:	60a3      	str	r3, [r4, #8]
 800770e:	68a3      	ldr	r3, [r4, #8]
 8007710:	4a22      	ldr	r2, [pc, #136]	@ (800779c <tcp_input+0x240>)
 8007712:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007714:	4b16      	ldr	r3, [pc, #88]	@ (8007770 <tcp_input+0x214>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	89db      	ldrh	r3, [r3, #14]
 800771a:	b29b      	uxth	r3, r3
 800771c:	4a14      	ldr	r2, [pc, #80]	@ (8007770 <tcp_input+0x214>)
 800771e:	6814      	ldr	r4, [r2, #0]
 8007720:	4618      	mov	r0, r3
 8007722:	f7fc ff3d 	bl	80045a0 <lwip_htons>
 8007726:	4603      	mov	r3, r0
 8007728:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800772a:	4b11      	ldr	r3, [pc, #68]	@ (8007770 <tcp_input+0x214>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	899b      	ldrh	r3, [r3, #12]
 8007730:	b29b      	uxth	r3, r3
 8007732:	4618      	mov	r0, r3
 8007734:	f7fc ff34 	bl	80045a0 <lwip_htons>
 8007738:	4603      	mov	r3, r0
 800773a:	b2db      	uxtb	r3, r3
 800773c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007740:	b2da      	uxtb	r2, r3
 8007742:	4b17      	ldr	r3, [pc, #92]	@ (80077a0 <tcp_input+0x244>)
 8007744:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	891b      	ldrh	r3, [r3, #8]
 800774a:	4a15      	ldr	r2, [pc, #84]	@ (80077a0 <tcp_input+0x244>)
 800774c:	7812      	ldrb	r2, [r2, #0]
 800774e:	f002 0203 	and.w	r2, r2, #3
 8007752:	2a00      	cmp	r2, #0
 8007754:	bf14      	ite	ne
 8007756:	2201      	movne	r2, #1
 8007758:	2200      	moveq	r2, #0
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	4413      	add	r3, r2
 800775e:	b29a      	uxth	r2, r3
 8007760:	4b10      	ldr	r3, [pc, #64]	@ (80077a4 <tcp_input+0x248>)
 8007762:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007768:	4b0f      	ldr	r3, [pc, #60]	@ (80077a8 <tcp_input+0x24c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	e081      	b.n	8007874 <tcp_input+0x318>
 8007770:	20008330 	.word	0x20008330
 8007774:	20004dac 	.word	0x20004dac
 8007778:	20008334 	.word	0x20008334
 800777c:	20008338 	.word	0x20008338
 8007780:	20008336 	.word	0x20008336
 8007784:	0800f850 	.word	0x0800f850
 8007788:	0800f884 	.word	0x0800f884
 800778c:	0800f894 	.word	0x0800f894
 8007790:	0800f8bc 	.word	0x0800f8bc
 8007794:	0800f8c8 	.word	0x0800f8c8
 8007798:	20008340 	.word	0x20008340
 800779c:	20008344 	.word	0x20008344
 80077a0:	2000834c 	.word	0x2000834c
 80077a4:	2000834a 	.word	0x2000834a
 80077a8:	20008314 	.word	0x20008314
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	7d1b      	ldrb	r3, [r3, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d105      	bne.n	80077c0 <tcp_input+0x264>
 80077b4:	4b6e      	ldr	r3, [pc, #440]	@ (8007970 <tcp_input+0x414>)
 80077b6:	22e2      	movs	r2, #226	@ 0xe2
 80077b8:	496e      	ldr	r1, [pc, #440]	@ (8007974 <tcp_input+0x418>)
 80077ba:	486f      	ldr	r0, [pc, #444]	@ (8007978 <tcp_input+0x41c>)
 80077bc:	f006 f9b8 	bl	800db30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	7d1b      	ldrb	r3, [r3, #20]
 80077c4:	2b0a      	cmp	r3, #10
 80077c6:	d105      	bne.n	80077d4 <tcp_input+0x278>
 80077c8:	4b69      	ldr	r3, [pc, #420]	@ (8007970 <tcp_input+0x414>)
 80077ca:	22e3      	movs	r2, #227	@ 0xe3
 80077cc:	496b      	ldr	r1, [pc, #428]	@ (800797c <tcp_input+0x420>)
 80077ce:	486a      	ldr	r0, [pc, #424]	@ (8007978 <tcp_input+0x41c>)
 80077d0:	f006 f9ae 	bl	800db30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	7d1b      	ldrb	r3, [r3, #20]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d105      	bne.n	80077e8 <tcp_input+0x28c>
 80077dc:	4b64      	ldr	r3, [pc, #400]	@ (8007970 <tcp_input+0x414>)
 80077de:	22e4      	movs	r2, #228	@ 0xe4
 80077e0:	4967      	ldr	r1, [pc, #412]	@ (8007980 <tcp_input+0x424>)
 80077e2:	4865      	ldr	r0, [pc, #404]	@ (8007978 <tcp_input+0x41c>)
 80077e4:	f006 f9a4 	bl	800db30 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	8b1a      	ldrh	r2, [r3, #24]
 80077ec:	4b65      	ldr	r3, [pc, #404]	@ (8007984 <tcp_input+0x428>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d138      	bne.n	800786a <tcp_input+0x30e>
        pcb->local_port == tcphdr->dest &&
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	8ada      	ldrh	r2, [r3, #22]
 80077fc:	4b61      	ldr	r3, [pc, #388]	@ (8007984 <tcp_input+0x428>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	885b      	ldrh	r3, [r3, #2]
 8007802:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007804:	429a      	cmp	r2, r3
 8007806:	d130      	bne.n	800786a <tcp_input+0x30e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	4b5e      	ldr	r3, [pc, #376]	@ (8007988 <tcp_input+0x42c>)
 800780e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007810:	429a      	cmp	r2, r3
 8007812:	d12a      	bne.n	800786a <tcp_input+0x30e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	4b5b      	ldr	r3, [pc, #364]	@ (8007988 <tcp_input+0x42c>)
 800781a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800781c:	429a      	cmp	r2, r3
 800781e:	d124      	bne.n	800786a <tcp_input+0x30e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	69fa      	ldr	r2, [r7, #28]
 8007826:	429a      	cmp	r2, r3
 8007828:	d105      	bne.n	8007836 <tcp_input+0x2da>
 800782a:	4b51      	ldr	r3, [pc, #324]	@ (8007970 <tcp_input+0x414>)
 800782c:	22ec      	movs	r2, #236	@ 0xec
 800782e:	4957      	ldr	r1, [pc, #348]	@ (800798c <tcp_input+0x430>)
 8007830:	4851      	ldr	r0, [pc, #324]	@ (8007978 <tcp_input+0x41c>)
 8007832:	f006 f97d 	bl	800db30 <iprintf>
      if (prev != NULL) {
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <tcp_input+0x2f6>
        prev->next = pcb->next;
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007844:	4b52      	ldr	r3, [pc, #328]	@ (8007990 <tcp_input+0x434>)
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800784c:	4a50      	ldr	r2, [pc, #320]	@ (8007990 <tcp_input+0x434>)
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	429a      	cmp	r2, r3
 800785a:	d10f      	bne.n	800787c <tcp_input+0x320>
 800785c:	4b44      	ldr	r3, [pc, #272]	@ (8007970 <tcp_input+0x414>)
 800785e:	22f4      	movs	r2, #244	@ 0xf4
 8007860:	494c      	ldr	r1, [pc, #304]	@ (8007994 <tcp_input+0x438>)
 8007862:	4845      	ldr	r0, [pc, #276]	@ (8007978 <tcp_input+0x41c>)
 8007864:	f006 f964 	bl	800db30 <iprintf>
      break;
 8007868:	e008      	b.n	800787c <tcp_input+0x320>
    }
    prev = pcb;
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	61fb      	str	r3, [r7, #28]
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d198      	bne.n	80077ac <tcp_input+0x250>
 800787a:	e000      	b.n	800787e <tcp_input+0x322>
      break;
 800787c:	bf00      	nop
  }

  if (pcb == NULL) {
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	2b00      	cmp	r3, #0
 8007882:	f040 808f 	bne.w	80079a4 <tcp_input+0x448>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007886:	4b44      	ldr	r3, [pc, #272]	@ (8007998 <tcp_input+0x43c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	61fb      	str	r3, [r7, #28]
 800788c:	e02f      	b.n	80078ee <tcp_input+0x392>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	7d1b      	ldrb	r3, [r3, #20]
 8007892:	2b0a      	cmp	r3, #10
 8007894:	d005      	beq.n	80078a2 <tcp_input+0x346>
 8007896:	4b36      	ldr	r3, [pc, #216]	@ (8007970 <tcp_input+0x414>)
 8007898:	22fe      	movs	r2, #254	@ 0xfe
 800789a:	4940      	ldr	r1, [pc, #256]	@ (800799c <tcp_input+0x440>)
 800789c:	4836      	ldr	r0, [pc, #216]	@ (8007978 <tcp_input+0x41c>)
 800789e:	f006 f947 	bl	800db30 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	8b1a      	ldrh	r2, [r3, #24]
 80078a6:	4b37      	ldr	r3, [pc, #220]	@ (8007984 <tcp_input+0x428>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d11a      	bne.n	80078e8 <tcp_input+0x38c>
          pcb->local_port == tcphdr->dest &&
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	8ada      	ldrh	r2, [r3, #22]
 80078b6:	4b33      	ldr	r3, [pc, #204]	@ (8007984 <tcp_input+0x428>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	885b      	ldrh	r3, [r3, #2]
 80078bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80078be:	429a      	cmp	r2, r3
 80078c0:	d112      	bne.n	80078e8 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	4b30      	ldr	r3, [pc, #192]	@ (8007988 <tcp_input+0x42c>)
 80078c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d10c      	bne.n	80078e8 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	4b2d      	ldr	r3, [pc, #180]	@ (8007988 <tcp_input+0x42c>)
 80078d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d106      	bne.n	80078e8 <tcp_input+0x38c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80078da:	69f8      	ldr	r0, [r7, #28]
 80078dc:	f000 fb16 	bl	8007f0c <tcp_timewait_input>
        pbuf_free(p);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7fd ffa3 	bl	800582c <pbuf_free>
        return;
 80078e6:	e1e9      	b.n	8007cbc <tcp_input+0x760>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	61fb      	str	r3, [r7, #28]
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1cc      	bne.n	800788e <tcp_input+0x332>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80078f8:	4b29      	ldr	r3, [pc, #164]	@ (80079a0 <tcp_input+0x444>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	e019      	b.n	8007934 <tcp_input+0x3d8>
      if (lpcb->local_port == tcphdr->dest) {
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	8ada      	ldrh	r2, [r3, #22]
 8007904:	4b1f      	ldr	r3, [pc, #124]	@ (8007984 <tcp_input+0x428>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	885b      	ldrh	r3, [r3, #2]
 800790a:	b29b      	uxth	r3, r3
 800790c:	429a      	cmp	r2, r3
 800790e:	d10c      	bne.n	800792a <tcp_input+0x3ce>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	4b1c      	ldr	r3, [pc, #112]	@ (8007988 <tcp_input+0x42c>)
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	429a      	cmp	r2, r3
 800791a:	d00f      	beq.n	800793c <tcp_input+0x3e0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00d      	beq.n	800793e <tcp_input+0x3e2>
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <tcp_input+0x3e2>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1e2      	bne.n	8007900 <tcp_input+0x3a4>
 800793a:	e000      	b.n	800793e <tcp_input+0x3e2>
            break;
 800793c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d02f      	beq.n	80079a4 <tcp_input+0x448>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <tcp_input+0x404>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007952:	4b13      	ldr	r3, [pc, #76]	@ (80079a0 <tcp_input+0x444>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800795a:	4a11      	ldr	r2, [pc, #68]	@ (80079a0 <tcp_input+0x444>)
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8007960:	6978      	ldr	r0, [r7, #20]
 8007962:	f000 f9f3 	bl	8007d4c <tcp_listen_input>
      pbuf_free(p);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7fd ff60 	bl	800582c <pbuf_free>
      return;
 800796c:	e1a6      	b.n	8007cbc <tcp_input+0x760>
 800796e:	bf00      	nop
 8007970:	0800f850 	.word	0x0800f850
 8007974:	0800f8e8 	.word	0x0800f8e8
 8007978:	0800f894 	.word	0x0800f894
 800797c:	0800f910 	.word	0x0800f910
 8007980:	0800f93c 	.word	0x0800f93c
 8007984:	20008330 	.word	0x20008330
 8007988:	20004dac 	.word	0x20004dac
 800798c:	0800f964 	.word	0x0800f964
 8007990:	20008314 	.word	0x20008314
 8007994:	0800f990 	.word	0x0800f990
 8007998:	20008318 	.word	0x20008318
 800799c:	0800f9bc 	.word	0x0800f9bc
 80079a0:	20008310 	.word	0x20008310
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 8156 	beq.w	8007c58 <tcp_input+0x6fc>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80079ac:	4b94      	ldr	r3, [pc, #592]	@ (8007c00 <tcp_input+0x6a4>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	891a      	ldrh	r2, [r3, #8]
 80079b6:	4b92      	ldr	r3, [pc, #584]	@ (8007c00 <tcp_input+0x6a4>)
 80079b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80079ba:	4a91      	ldr	r2, [pc, #580]	@ (8007c00 <tcp_input+0x6a4>)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80079c0:	4b90      	ldr	r3, [pc, #576]	@ (8007c04 <tcp_input+0x6a8>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007c00 <tcp_input+0x6a4>)
 80079c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80079c8:	4b8f      	ldr	r3, [pc, #572]	@ (8007c08 <tcp_input+0x6ac>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80079ce:	4b8f      	ldr	r3, [pc, #572]	@ (8007c0c <tcp_input+0x6b0>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80079d4:	4b8e      	ldr	r3, [pc, #568]	@ (8007c10 <tcp_input+0x6b4>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80079da:	4b8e      	ldr	r3, [pc, #568]	@ (8007c14 <tcp_input+0x6b8>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	f003 0308 	and.w	r3, r3, #8
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d006      	beq.n	80079f4 <tcp_input+0x498>
      p->flags |= PBUF_FLAG_PUSH;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7b5b      	ldrb	r3, [r3, #13]
 80079ea:	f043 0301 	orr.w	r3, r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d017      	beq.n	8007a2c <tcp_input+0x4d0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80079fc:	69f8      	ldr	r0, [r7, #28]
 80079fe:	f7ff f977 	bl	8006cf0 <tcp_process_refused_data>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f113 0f0d 	cmn.w	r3, #13
 8007a08:	d007      	beq.n	8007a1a <tcp_input+0x4be>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00c      	beq.n	8007a2c <tcp_input+0x4d0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007a12:	4b81      	ldr	r3, [pc, #516]	@ (8007c18 <tcp_input+0x6bc>)
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d008      	beq.n	8007a2c <tcp_input+0x4d0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 80e2 	bne.w	8007be8 <tcp_input+0x68c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007a24:	69f8      	ldr	r0, [r7, #28]
 8007a26:	f002 fe1b 	bl	800a660 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007a2a:	e0dd      	b.n	8007be8 <tcp_input+0x68c>
      }
    }
    tcp_input_pcb = pcb;
 8007a2c:	4a7b      	ldr	r2, [pc, #492]	@ (8007c1c <tcp_input+0x6c0>)
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007a32:	69f8      	ldr	r0, [r7, #28]
 8007a34:	f000 fad2 	bl	8007fdc <tcp_process>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007a3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a40:	f113 0f0d 	cmn.w	r3, #13
 8007a44:	f000 80d2 	beq.w	8007bec <tcp_input+0x690>
      if (recv_flags & TF_RESET) {
 8007a48:	4b70      	ldr	r3, [pc, #448]	@ (8007c0c <tcp_input+0x6b0>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d016      	beq.n	8007a82 <tcp_input+0x526>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <tcp_input+0x514>
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	6912      	ldr	r2, [r2, #16]
 8007a68:	f06f 010d 	mvn.w	r1, #13
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007a70:	69f9      	ldr	r1, [r7, #28]
 8007a72:	486b      	ldr	r0, [pc, #428]	@ (8007c20 <tcp_input+0x6c4>)
 8007a74:	f7ff fc5a 	bl	800732c <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007a78:	69f9      	ldr	r1, [r7, #28]
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	f7fd f9ba 	bl	8004df4 <memp_free>
 8007a80:	e0d7      	b.n	8007c32 <tcp_input+0x6d6>
      } else {
        err = ERR_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007a86:	4b62      	ldr	r3, [pc, #392]	@ (8007c10 <tcp_input+0x6b4>)
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01b      	beq.n	8007ac6 <tcp_input+0x56a>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007a8e:	4b60      	ldr	r3, [pc, #384]	@ (8007c10 <tcp_input+0x6b4>)
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d009      	beq.n	8007ab0 <tcp_input+0x554>
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	6910      	ldr	r0, [r2, #16]
 8007aa4:	89fa      	ldrh	r2, [r7, #14]
 8007aa6:	69f9      	ldr	r1, [r7, #28]
 8007aa8:	4798      	blx	r3
 8007aaa:	4603      	mov	r3, r0
 8007aac:	74fb      	strb	r3, [r7, #19]
 8007aae:	e001      	b.n	8007ab4 <tcp_input+0x558>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007ab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ab8:	f113 0f0d 	cmn.w	r3, #13
 8007abc:	f000 8098 	beq.w	8007bf0 <tcp_input+0x694>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007ac0:	4b53      	ldr	r3, [pc, #332]	@ (8007c10 <tcp_input+0x6b4>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007ac6:	69f8      	ldr	r0, [r7, #28]
 8007ac8:	f000 f90e 	bl	8007ce8 <tcp_input_delayed_close>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f040 8090 	bne.w	8007bf4 <tcp_input+0x698>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8007c08 <tcp_input+0x6ac>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d041      	beq.n	8007b60 <tcp_input+0x604>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d006      	beq.n	8007af2 <tcp_input+0x596>
 8007ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8007c24 <tcp_input+0x6c8>)
 8007ae6:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8007aea:	494f      	ldr	r1, [pc, #316]	@ (8007c28 <tcp_input+0x6cc>)
 8007aec:	484f      	ldr	r0, [pc, #316]	@ (8007c2c <tcp_input+0x6d0>)
 8007aee:	f006 f81f 	bl	800db30 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	7e9b      	ldrb	r3, [r3, #26]
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d008      	beq.n	8007b10 <tcp_input+0x5b4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007afe:	4b42      	ldr	r3, [pc, #264]	@ (8007c08 <tcp_input+0x6ac>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fd fe92 	bl	800582c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007b08:	69f8      	ldr	r0, [r7, #28]
 8007b0a:	f7fe fb85 	bl	8006218 <tcp_abort>
            goto aborted;
 8007b0e:	e090      	b.n	8007c32 <tcp_input+0x6d6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00c      	beq.n	8007b34 <tcp_input+0x5d8>
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	6918      	ldr	r0, [r3, #16]
 8007b24:	4b38      	ldr	r3, [pc, #224]	@ (8007c08 <tcp_input+0x6ac>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	2300      	movs	r3, #0
 8007b2a:	69f9      	ldr	r1, [r7, #28]
 8007b2c:	47a0      	blx	r4
 8007b2e:	4603      	mov	r3, r0
 8007b30:	74fb      	strb	r3, [r7, #19]
 8007b32:	e008      	b.n	8007b46 <tcp_input+0x5ea>
 8007b34:	4b34      	ldr	r3, [pc, #208]	@ (8007c08 <tcp_input+0x6ac>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	69f9      	ldr	r1, [r7, #28]
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f7ff f997 	bl	8006e70 <tcp_recv_null>
 8007b42:	4603      	mov	r3, r0
 8007b44:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007b46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b4a:	f113 0f0d 	cmn.w	r3, #13
 8007b4e:	d053      	beq.n	8007bf8 <tcp_input+0x69c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007b50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <tcp_input+0x604>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007b58:	4b2b      	ldr	r3, [pc, #172]	@ (8007c08 <tcp_input+0x6ac>)
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007b60:	4b2a      	ldr	r3, [pc, #168]	@ (8007c0c <tcp_input+0x6b0>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d030      	beq.n	8007bce <tcp_input+0x672>
          if (pcb->refused_data != NULL) {
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d009      	beq.n	8007b88 <tcp_input+0x62c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b78:	7b5a      	ldrb	r2, [r3, #13]
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b7e:	f042 0220 	orr.w	r2, r2, #32
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	735a      	strb	r2, [r3, #13]
 8007b86:	e022      	b.n	8007bce <tcp_input+0x672>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b8c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007b90:	d005      	beq.n	8007b9e <tcp_input+0x642>
              pcb->rcv_wnd++;
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b96:	3301      	adds	r3, #1
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <tcp_input+0x664>
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	6918      	ldr	r0, [r3, #16]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	69f9      	ldr	r1, [r7, #28]
 8007bb8:	47a0      	blx	r4
 8007bba:	4603      	mov	r3, r0
 8007bbc:	74fb      	strb	r3, [r7, #19]
 8007bbe:	e001      	b.n	8007bc4 <tcp_input+0x668>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007bc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007bc8:	f113 0f0d 	cmn.w	r3, #13
 8007bcc:	d016      	beq.n	8007bfc <tcp_input+0x6a0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007bce:	4b13      	ldr	r3, [pc, #76]	@ (8007c1c <tcp_input+0x6c0>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007bd4:	69f8      	ldr	r0, [r7, #28]
 8007bd6:	f000 f887 	bl	8007ce8 <tcp_input_delayed_close>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d127      	bne.n	8007c30 <tcp_input+0x6d4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007be0:	69f8      	ldr	r0, [r7, #28]
 8007be2:	f002 fd99 	bl	800a718 <tcp_output>
 8007be6:	e024      	b.n	8007c32 <tcp_input+0x6d6>
        goto aborted;
 8007be8:	bf00      	nop
 8007bea:	e022      	b.n	8007c32 <tcp_input+0x6d6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007bec:	bf00      	nop
 8007bee:	e020      	b.n	8007c32 <tcp_input+0x6d6>
              goto aborted;
 8007bf0:	bf00      	nop
 8007bf2:	e01e      	b.n	8007c32 <tcp_input+0x6d6>
          goto aborted;
 8007bf4:	bf00      	nop
 8007bf6:	e01c      	b.n	8007c32 <tcp_input+0x6d6>
            goto aborted;
 8007bf8:	bf00      	nop
 8007bfa:	e01a      	b.n	8007c32 <tcp_input+0x6d6>
              goto aborted;
 8007bfc:	bf00      	nop
 8007bfe:	e018      	b.n	8007c32 <tcp_input+0x6d6>
 8007c00:	20008320 	.word	0x20008320
 8007c04:	20008330 	.word	0x20008330
 8007c08:	20008350 	.word	0x20008350
 8007c0c:	2000834d 	.word	0x2000834d
 8007c10:	20008348 	.word	0x20008348
 8007c14:	2000834c 	.word	0x2000834c
 8007c18:	2000834a 	.word	0x2000834a
 8007c1c:	20008354 	.word	0x20008354
 8007c20:	20008314 	.word	0x20008314
 8007c24:	0800f850 	.word	0x0800f850
 8007c28:	0800f9ec 	.word	0x0800f9ec
 8007c2c:	0800f894 	.word	0x0800f894
          goto aborted;
 8007c30:	bf00      	nop
    tcp_input_pcb = NULL;
 8007c32:	4b24      	ldr	r3, [pc, #144]	@ (8007cc4 <tcp_input+0x768>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007c38:	4b23      	ldr	r3, [pc, #140]	@ (8007cc8 <tcp_input+0x76c>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8007c3e:	4b23      	ldr	r3, [pc, #140]	@ (8007ccc <tcp_input+0x770>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d039      	beq.n	8007cba <tcp_input+0x75e>
    {
      pbuf_free(inseg.p);
 8007c46:	4b21      	ldr	r3, [pc, #132]	@ (8007ccc <tcp_input+0x770>)
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fd fdee 	bl	800582c <pbuf_free>
      inseg.p = NULL;
 8007c50:	4b1e      	ldr	r3, [pc, #120]	@ (8007ccc <tcp_input+0x770>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007c56:	e030      	b.n	8007cba <tcp_input+0x75e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007c58:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd0 <tcp_input+0x774>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	899b      	ldrh	r3, [r3, #12]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fc fc9d 	bl	80045a0 <lwip_htons>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d115      	bne.n	8007c9c <tcp_input+0x740>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c70:	4b18      	ldr	r3, [pc, #96]	@ (8007cd4 <tcp_input+0x778>)
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	4b18      	ldr	r3, [pc, #96]	@ (8007cd8 <tcp_input+0x77c>)
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4b18      	ldr	r3, [pc, #96]	@ (8007cdc <tcp_input+0x780>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c80:	4b13      	ldr	r3, [pc, #76]	@ (8007cd0 <tcp_input+0x774>)
 8007c82:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c84:	885b      	ldrh	r3, [r3, #2]
 8007c86:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c88:	4a11      	ldr	r2, [pc, #68]	@ (8007cd0 <tcp_input+0x774>)
 8007c8a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c8c:	8812      	ldrh	r2, [r2, #0]
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	9201      	str	r2, [sp, #4]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	4b12      	ldr	r3, [pc, #72]	@ (8007ce0 <tcp_input+0x784>)
 8007c96:	4a13      	ldr	r2, [pc, #76]	@ (8007ce4 <tcp_input+0x788>)
 8007c98:	f002 ffc2 	bl	800ac20 <tcp_rst>
    pbuf_free(p);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7fd fdc5 	bl	800582c <pbuf_free>
  return;
 8007ca2:	e00a      	b.n	8007cba <tcp_input+0x75e>
    goto dropped;
 8007ca4:	bf00      	nop
 8007ca6:	e004      	b.n	8007cb2 <tcp_input+0x756>
    goto dropped;
 8007ca8:	bf00      	nop
 8007caa:	e002      	b.n	8007cb2 <tcp_input+0x756>
    goto dropped;
 8007cac:	bf00      	nop
 8007cae:	e000      	b.n	8007cb2 <tcp_input+0x756>
      goto dropped;
 8007cb0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7fd fdba 	bl	800582c <pbuf_free>
 8007cb8:	e000      	b.n	8007cbc <tcp_input+0x760>
  return;
 8007cba:	bf00      	nop
}
 8007cbc:	3724      	adds	r7, #36	@ 0x24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd90      	pop	{r4, r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20008354 	.word	0x20008354
 8007cc8:	20008350 	.word	0x20008350
 8007ccc:	20008320 	.word	0x20008320
 8007cd0:	20008330 	.word	0x20008330
 8007cd4:	20008344 	.word	0x20008344
 8007cd8:	2000834a 	.word	0x2000834a
 8007cdc:	20008340 	.word	0x20008340
 8007ce0:	20004dbc 	.word	0x20004dbc
 8007ce4:	20004dc0 	.word	0x20004dc0

08007ce8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8007cf0:	4b14      	ldr	r3, [pc, #80]	@ (8007d44 <tcp_input_delayed_close+0x5c>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01d      	beq.n	8007d38 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	7e9b      	ldrb	r3, [r3, #26]
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10d      	bne.n	8007d24 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <tcp_input_delayed_close+0x3c>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6912      	ldr	r2, [r2, #16]
 8007d1c:	f06f 010e 	mvn.w	r1, #14
 8007d20:	4610      	mov	r0, r2
 8007d22:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	4808      	ldr	r0, [pc, #32]	@ (8007d48 <tcp_input_delayed_close+0x60>)
 8007d28:	f7ff fb00 	bl	800732c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	2001      	movs	r0, #1
 8007d30:	f7fd f860 	bl	8004df4 <memp_free>
    return 1;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <tcp_input_delayed_close+0x52>
  }
  return 0;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	2000834d 	.word	0x2000834d
 8007d48:	20008314 	.word	0x20008314

08007d4c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007d54:	4b63      	ldr	r3, [pc, #396]	@ (8007ee4 <tcp_listen_input+0x198>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 80bb 	bne.w	8007ed8 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007d62:	4b60      	ldr	r3, [pc, #384]	@ (8007ee4 <tcp_listen_input+0x198>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	f003 0310 	and.w	r3, r3, #16
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d016      	beq.n	8007d9c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d6e:	4b5e      	ldr	r3, [pc, #376]	@ (8007ee8 <tcp_listen_input+0x19c>)
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	4b5e      	ldr	r3, [pc, #376]	@ (8007eec <tcp_listen_input+0x1a0>)
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	4b5d      	ldr	r3, [pc, #372]	@ (8007ef0 <tcp_listen_input+0x1a4>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8007ef4 <tcp_listen_input+0x1a8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d82:	885b      	ldrh	r3, [r3, #2]
 8007d84:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007d86:	4a5b      	ldr	r2, [pc, #364]	@ (8007ef4 <tcp_listen_input+0x1a8>)
 8007d88:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007d8a:	8812      	ldrh	r2, [r2, #0]
 8007d8c:	b292      	uxth	r2, r2
 8007d8e:	9201      	str	r2, [sp, #4]
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	4b59      	ldr	r3, [pc, #356]	@ (8007ef8 <tcp_listen_input+0x1ac>)
 8007d94:	4a59      	ldr	r2, [pc, #356]	@ (8007efc <tcp_listen_input+0x1b0>)
 8007d96:	f002 ff43 	bl	800ac20 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007d9a:	e09f      	b.n	8007edc <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8007d9c:	4b51      	ldr	r3, [pc, #324]	@ (8007ee4 <tcp_listen_input+0x198>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 8099 	beq.w	8007edc <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7d5b      	ldrb	r3, [r3, #21]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff f93c 	bl	800702c <tcp_alloc>
 8007db4:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d111      	bne.n	8007de0 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00a      	beq.n	8007dda <tcp_listen_input+0x8e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6910      	ldr	r0, [r2, #16]
 8007dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	4798      	blx	r3
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73bb      	strb	r3, [r7, #14]
      return;
 8007dd8:	e081      	b.n	8007ede <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007dda:	23f0      	movs	r3, #240	@ 0xf0
 8007ddc:	73bb      	strb	r3, [r7, #14]
      return;
 8007dde:	e07e      	b.n	8007ede <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007de0:	4b47      	ldr	r3, [pc, #284]	@ (8007f00 <tcp_listen_input+0x1b4>)
 8007de2:	695a      	ldr	r2, [r3, #20]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007de8:	4b45      	ldr	r3, [pc, #276]	@ (8007f00 <tcp_listen_input+0x1b4>)
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8ada      	ldrh	r2, [r3, #22]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007df8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ef4 <tcp_listen_input+0x1a8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	2203      	movs	r2, #3
 8007e08:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007e0a:	4b39      	ldr	r3, [pc, #228]	@ (8007ef0 <tcp_listen_input+0x1a4>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8007e1c:	6978      	ldr	r0, [r7, #20]
 8007e1e:	f7ff fb01 	bl	8007424 <tcp_next_iss>
 8007e22:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	693a      	ldr	r2, [r7, #16]
 8007e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8007ef0 <tcp_listen_input+0x1a4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	1e5a      	subs	r2, r3, #1
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	7a1b      	ldrb	r3, [r3, #8]
 8007e58:	f003 030c 	and.w	r3, r3, #12
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007e62:	4b28      	ldr	r3, [pc, #160]	@ (8007f04 <tcp_listen_input+0x1b8>)
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	60da      	str	r2, [r3, #12]
 8007e6a:	4a26      	ldr	r2, [pc, #152]	@ (8007f04 <tcp_listen_input+0x1b8>)
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	f003 f91e 	bl	800b0b0 <tcp_timer_needed>
 8007e74:	4b24      	ldr	r3, [pc, #144]	@ (8007f08 <tcp_listen_input+0x1bc>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007e7a:	6978      	ldr	r0, [r7, #20]
 8007e7c:	f001 fd0c 	bl	8009898 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007e80:	4b1c      	ldr	r3, [pc, #112]	@ (8007ef4 <tcp_listen_input+0x1a8>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	89db      	ldrh	r3, [r3, #14]
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f7ff fad3 	bl	8007450 <tcp_eff_send_mss_impl>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	461a      	mov	r2, r3
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007eb2:	2112      	movs	r1, #18
 8007eb4:	6978      	ldr	r0, [r7, #20]
 8007eb6:	f002 fad7 	bl	800a468 <tcp_enqueue_flags>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	6978      	ldr	r0, [r7, #20]
 8007eca:	f7fe f8f3 	bl	80060b4 <tcp_abandon>
      return;
 8007ece:	e006      	b.n	8007ede <tcp_listen_input+0x192>
    tcp_output(npcb);
 8007ed0:	6978      	ldr	r0, [r7, #20]
 8007ed2:	f002 fc21 	bl	800a718 <tcp_output>
  return;
 8007ed6:	e001      	b.n	8007edc <tcp_listen_input+0x190>
    return;
 8007ed8:	bf00      	nop
 8007eda:	e000      	b.n	8007ede <tcp_listen_input+0x192>
  return;
 8007edc:	bf00      	nop
}
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	2000834c 	.word	0x2000834c
 8007ee8:	20008344 	.word	0x20008344
 8007eec:	2000834a 	.word	0x2000834a
 8007ef0:	20008340 	.word	0x20008340
 8007ef4:	20008330 	.word	0x20008330
 8007ef8:	20004dbc 	.word	0x20004dbc
 8007efc:	20004dc0 	.word	0x20004dc0
 8007f00:	20004dac 	.word	0x20004dac
 8007f04:	20008314 	.word	0x20008314
 8007f08:	2000831c 	.word	0x2000831c

08007f0c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007f14:	4b29      	ldr	r3, [pc, #164]	@ (8007fbc <tcp_timewait_input+0xb0>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d146      	bne.n	8007fae <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007f20:	4b26      	ldr	r3, [pc, #152]	@ (8007fbc <tcp_timewait_input+0xb0>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d027      	beq.n	8007f7c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007f2c:	4b24      	ldr	r3, [pc, #144]	@ (8007fc0 <tcp_timewait_input+0xb4>)
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	db2a      	blt.n	8007f90 <tcp_timewait_input+0x84>
 8007f3a:	4b21      	ldr	r3, [pc, #132]	@ (8007fc0 <tcp_timewait_input+0xb4>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007f46:	440b      	add	r3, r1
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	dc20      	bgt.n	8007f90 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007fc4 <tcp_timewait_input+0xb8>)
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	4b1d      	ldr	r3, [pc, #116]	@ (8007fc8 <tcp_timewait_input+0xbc>)
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	4b19      	ldr	r3, [pc, #100]	@ (8007fc0 <tcp_timewait_input+0xb4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f5e:	4b1b      	ldr	r3, [pc, #108]	@ (8007fcc <tcp_timewait_input+0xc0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f62:	885b      	ldrh	r3, [r3, #2]
 8007f64:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f66:	4a19      	ldr	r2, [pc, #100]	@ (8007fcc <tcp_timewait_input+0xc0>)
 8007f68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f6a:	8812      	ldrh	r2, [r2, #0]
 8007f6c:	b292      	uxth	r2, r2
 8007f6e:	9201      	str	r2, [sp, #4]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	4b17      	ldr	r3, [pc, #92]	@ (8007fd0 <tcp_timewait_input+0xc4>)
 8007f74:	4a17      	ldr	r2, [pc, #92]	@ (8007fd4 <tcp_timewait_input+0xc8>)
 8007f76:	f002 fe53 	bl	800ac20 <tcp_rst>
      return;
 8007f7a:	e01b      	b.n	8007fb4 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fbc <tcp_timewait_input+0xb0>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007f88:	4b13      	ldr	r3, [pc, #76]	@ (8007fd8 <tcp_timewait_input+0xcc>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007f90:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc8 <tcp_timewait_input+0xbc>)
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00c      	beq.n	8007fb2 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	7e9b      	ldrb	r3, [r3, #26]
 8007f9c:	f043 0302 	orr.w	r3, r3, #2
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f002 fbb6 	bl	800a718 <tcp_output>
  }
  return;
 8007fac:	e001      	b.n	8007fb2 <tcp_timewait_input+0xa6>
    return;
 8007fae:	bf00      	nop
 8007fb0:	e000      	b.n	8007fb4 <tcp_timewait_input+0xa8>
  return;
 8007fb2:	bf00      	nop
}
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	2000834c 	.word	0x2000834c
 8007fc0:	20008340 	.word	0x20008340
 8007fc4:	20008344 	.word	0x20008344
 8007fc8:	2000834a 	.word	0x2000834a
 8007fcc:	20008330 	.word	0x20008330
 8007fd0:	20004dbc 	.word	0x20004dbc
 8007fd4:	20004dc0 	.word	0x20004dc0
 8007fd8:	20008308 	.word	0x20008308

08007fdc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08a      	sub	sp, #40	@ 0x28
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007fec:	4b93      	ldr	r3, [pc, #588]	@ (800823c <tcp_process+0x260>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d04e      	beq.n	8008096 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	7d1b      	ldrb	r3, [r3, #20]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d108      	bne.n	8008012 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008004:	4b8e      	ldr	r3, [pc, #568]	@ (8008240 <tcp_process+0x264>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	429a      	cmp	r2, r3
 800800a:	d123      	bne.n	8008054 <tcp_process+0x78>
        acceptable = 1;
 800800c:	2301      	movs	r3, #1
 800800e:	76fb      	strb	r3, [r7, #27]
 8008010:	e020      	b.n	8008054 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008016:	4b8b      	ldr	r3, [pc, #556]	@ (8008244 <tcp_process+0x268>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d102      	bne.n	8008024 <tcp_process+0x48>
        acceptable = 1;
 800801e:	2301      	movs	r3, #1
 8008020:	76fb      	strb	r3, [r7, #27]
 8008022:	e017      	b.n	8008054 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008024:	4b87      	ldr	r3, [pc, #540]	@ (8008244 <tcp_process+0x268>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	db10      	blt.n	8008054 <tcp_process+0x78>
 8008032:	4b84      	ldr	r3, [pc, #528]	@ (8008244 <tcp_process+0x268>)
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800803e:	440b      	add	r3, r1
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	dc06      	bgt.n	8008054 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	7e9b      	ldrb	r3, [r3, #26]
 800804a:	f043 0302 	orr.w	r3, r3, #2
 800804e:	b2da      	uxtb	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008054:	7efb      	ldrb	r3, [r7, #27]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d01b      	beq.n	8008092 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7d1b      	ldrb	r3, [r3, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d106      	bne.n	8008070 <tcp_process+0x94>
 8008062:	4b79      	ldr	r3, [pc, #484]	@ (8008248 <tcp_process+0x26c>)
 8008064:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8008068:	4978      	ldr	r1, [pc, #480]	@ (800824c <tcp_process+0x270>)
 800806a:	4879      	ldr	r0, [pc, #484]	@ (8008250 <tcp_process+0x274>)
 800806c:	f005 fd60 	bl	800db30 <iprintf>
      recv_flags |= TF_RESET;
 8008070:	4b78      	ldr	r3, [pc, #480]	@ (8008254 <tcp_process+0x278>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	f043 0308 	orr.w	r3, r3, #8
 8008078:	b2da      	uxtb	r2, r3
 800807a:	4b76      	ldr	r3, [pc, #472]	@ (8008254 <tcp_process+0x278>)
 800807c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	7e9b      	ldrb	r3, [r3, #26]
 8008082:	f023 0301 	bic.w	r3, r3, #1
 8008086:	b2da      	uxtb	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800808c:	f06f 030d 	mvn.w	r3, #13
 8008090:	e348      	b.n	8008724 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	e346      	b.n	8008724 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008096:	4b69      	ldr	r3, [pc, #420]	@ (800823c <tcp_process+0x260>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d010      	beq.n	80080c4 <tcp_process+0xe8>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	7d1b      	ldrb	r3, [r3, #20]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d00c      	beq.n	80080c4 <tcp_process+0xe8>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	7d1b      	ldrb	r3, [r3, #20]
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d008      	beq.n	80080c4 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	7e9b      	ldrb	r3, [r3, #26]
 80080b6:	f043 0302 	orr.w	r3, r3, #2
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e32f      	b.n	8008724 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	7e9b      	ldrb	r3, [r3, #26]
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d103      	bne.n	80080d8 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80080d0:	4b61      	ldr	r3, [pc, #388]	@ (8008258 <tcp_process+0x27c>)
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 fbd9 	bl	8009898 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	7d1b      	ldrb	r3, [r3, #20]
 80080ea:	3b02      	subs	r3, #2
 80080ec:	2b07      	cmp	r3, #7
 80080ee:	f200 8309 	bhi.w	8008704 <tcp_process+0x728>
 80080f2:	a201      	add	r2, pc, #4	@ (adr r2, 80080f8 <tcp_process+0x11c>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008119 	.word	0x08008119
 80080fc:	0800830f 	.word	0x0800830f
 8008100:	08008467 	.word	0x08008467
 8008104:	08008491 	.word	0x08008491
 8008108:	080085b3 	.word	0x080085b3
 800810c:	08008467 	.word	0x08008467
 8008110:	0800863f 	.word	0x0800863f
 8008114:	080086cf 	.word	0x080086cf
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008118:	4b48      	ldr	r3, [pc, #288]	@ (800823c <tcp_process+0x260>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 0310 	and.w	r3, r3, #16
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 80ca 	beq.w	80082ba <tcp_process+0x2de>
 8008126:	4b45      	ldr	r3, [pc, #276]	@ (800823c <tcp_process+0x260>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 80c3 	beq.w	80082ba <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	4b41      	ldr	r3, [pc, #260]	@ (8008240 <tcp_process+0x264>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	f040 80bb 	bne.w	80082ba <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8008144:	4b3f      	ldr	r3, [pc, #252]	@ (8008244 <tcp_process+0x268>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 8008156:	4b3a      	ldr	r3, [pc, #232]	@ (8008240 <tcp_process+0x264>)
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800815e:	4b3f      	ldr	r3, [pc, #252]	@ (800825c <tcp_process+0x280>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	89db      	ldrh	r3, [r3, #14]
 8008164:	b29a      	uxth	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008178:	4b32      	ldr	r3, [pc, #200]	@ (8008244 <tcp_process+0x268>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	1e5a      	subs	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2204      	movs	r2, #4
 8008186:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3304      	adds	r3, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4610      	mov	r0, r2
 8008194:	f7ff f95c 	bl	8007450 <tcp_eff_send_mss_impl>
 8008198:	4603      	mov	r3, r0
 800819a:	461a      	mov	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80081a4:	005b      	lsls	r3, r3, #1
 80081a6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80081aa:	429a      	cmp	r2, r3
 80081ac:	bf38      	it	cc
 80081ae:	461a      	movcc	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4293      	cmp	r3, r2
 80081b8:	bf28      	it	cs
 80081ba:	4613      	movcs	r3, r2
 80081bc:	b29a      	uxth	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d106      	bne.n	80081dc <tcp_process+0x200>
 80081ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008248 <tcp_process+0x26c>)
 80081d0:	f240 321a 	movw	r2, #794	@ 0x31a
 80081d4:	4922      	ldr	r1, [pc, #136]	@ (8008260 <tcp_process+0x284>)
 80081d6:	481e      	ldr	r0, [pc, #120]	@ (8008250 <tcp_process+0x274>)
 80081d8:	f005 fcaa 	bl	800db30 <iprintf>
      --pcb->snd_queuelen;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081f0:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d111      	bne.n	800821c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081fc:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <tcp_process+0x236>
 8008204:	4b10      	ldr	r3, [pc, #64]	@ (8008248 <tcp_process+0x26c>)
 8008206:	f240 3222 	movw	r2, #802	@ 0x322
 800820a:	4916      	ldr	r1, [pc, #88]	@ (8008264 <tcp_process+0x288>)
 800820c:	4810      	ldr	r0, [pc, #64]	@ (8008250 <tcp_process+0x274>)
 800820e:	f005 fc8f 	bl	800db30 <iprintf>
        pcb->unsent = rseg->next;
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	669a      	str	r2, [r3, #104]	@ 0x68
 800821a:	e003      	b.n	8008224 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 8008224:	69f8      	ldr	r0, [r7, #28]
 8008226:	f7fe fde1 	bl	8006dec <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d11a      	bne.n	8008268 <tcp_process+0x28c>
        pcb->rtime = -1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008238:	861a      	strh	r2, [r3, #48]	@ 0x30
 800823a:	e01c      	b.n	8008276 <tcp_process+0x29a>
 800823c:	2000834c 	.word	0x2000834c
 8008240:	20008344 	.word	0x20008344
 8008244:	20008340 	.word	0x20008340
 8008248:	0800f850 	.word	0x0800f850
 800824c:	0800fa08 	.word	0x0800fa08
 8008250:	0800f894 	.word	0x0800f894
 8008254:	2000834d 	.word	0x2000834d
 8008258:	20008308 	.word	0x20008308
 800825c:	20008330 	.word	0x20008330
 8008260:	0800fa28 	.word	0x0800fa28
 8008264:	0800fa40 	.word	0x0800fa40
      } else {
        pcb->rtime = 0;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00a      	beq.n	8008296 <tcp_process+0x2ba>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6910      	ldr	r0, [r2, #16]
 800828a:	2200      	movs	r2, #0
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	4798      	blx	r3
 8008290:	4603      	mov	r3, r0
 8008292:	76bb      	strb	r3, [r7, #26]
 8008294:	e001      	b.n	800829a <tcp_process+0x2be>
 8008296:	2300      	movs	r3, #0
 8008298:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800829a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800829e:	f113 0f0d 	cmn.w	r3, #13
 80082a2:	d102      	bne.n	80082aa <tcp_process+0x2ce>
        return ERR_ABRT;
 80082a4:	f06f 030c 	mvn.w	r3, #12
 80082a8:	e23c      	b.n	8008724 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	7e9b      	ldrb	r3, [r3, #26]
 80082ae:	f043 0302 	orr.w	r3, r3, #2
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80082b8:	e226      	b.n	8008708 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 80082ba:	4b93      	ldr	r3, [pc, #588]	@ (8008508 <tcp_process+0x52c>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	f003 0310 	and.w	r3, r3, #16
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8220 	beq.w	8008708 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80082c8:	4b90      	ldr	r3, [pc, #576]	@ (800850c <tcp_process+0x530>)
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	4b90      	ldr	r3, [pc, #576]	@ (8008510 <tcp_process+0x534>)
 80082ce:	881b      	ldrh	r3, [r3, #0]
 80082d0:	461a      	mov	r2, r3
 80082d2:	4b90      	ldr	r3, [pc, #576]	@ (8008514 <tcp_process+0x538>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082d8:	4b8f      	ldr	r3, [pc, #572]	@ (8008518 <tcp_process+0x53c>)
 80082da:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80082dc:	885b      	ldrh	r3, [r3, #2]
 80082de:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082e0:	4a8d      	ldr	r2, [pc, #564]	@ (8008518 <tcp_process+0x53c>)
 80082e2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80082e4:	8812      	ldrh	r2, [r2, #0]
 80082e6:	b292      	uxth	r2, r2
 80082e8:	9201      	str	r2, [sp, #4]
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	4b8b      	ldr	r3, [pc, #556]	@ (800851c <tcp_process+0x540>)
 80082ee:	4a8c      	ldr	r2, [pc, #560]	@ (8008520 <tcp_process+0x544>)
 80082f0:	f002 fc96 	bl	800ac20 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	f200 8204 	bhi.w	8008708 <tcp_process+0x72c>
        pcb->rtime = 0;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f002 fd00 	bl	800ad0c <tcp_rexmit_rto>
    break;
 800830c:	e1fc      	b.n	8008708 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800830e:	4b7e      	ldr	r3, [pc, #504]	@ (8008508 <tcp_process+0x52c>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	f003 0310 	and.w	r3, r3, #16
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 8091 	beq.w	800843e <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800831c:	4b7b      	ldr	r3, [pc, #492]	@ (800850c <tcp_process+0x530>)
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	db71      	blt.n	8008410 <tcp_process+0x434>
 800832c:	4b77      	ldr	r3, [pc, #476]	@ (800850c <tcp_process+0x530>)
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	dc6a      	bgt.n	8008410 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2204      	movs	r2, #4
 800833e:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00b      	beq.n	8008360 <tcp_process+0x384>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <tcp_process+0x384>
 8008352:	4b74      	ldr	r3, [pc, #464]	@ (8008524 <tcp_process+0x548>)
 8008354:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8008358:	4973      	ldr	r1, [pc, #460]	@ (8008528 <tcp_process+0x54c>)
 800835a:	4874      	ldr	r0, [pc, #464]	@ (800852c <tcp_process+0x550>)
 800835c:	f005 fbe8 	bl	800db30 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008364:	2b00      	cmp	r3, #0
 8008366:	d102      	bne.n	800836e <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8008368:	23fa      	movs	r3, #250	@ 0xfa
 800836a:	76bb      	strb	r3, [r7, #26]
 800836c:	e011      	b.n	8008392 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <tcp_process+0x3b2>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6910      	ldr	r0, [r2, #16]
 8008382:	2200      	movs	r2, #0
 8008384:	6879      	ldr	r1, [r7, #4]
 8008386:	4798      	blx	r3
 8008388:	4603      	mov	r3, r0
 800838a:	76bb      	strb	r3, [r7, #26]
 800838c:	e001      	b.n	8008392 <tcp_process+0x3b6>
 800838e:	23f0      	movs	r3, #240	@ 0xf0
 8008390:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8008392:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800839a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800839e:	f113 0f0d 	cmn.w	r3, #13
 80083a2:	d002      	beq.n	80083aa <tcp_process+0x3ce>
            tcp_abort(pcb);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7fd ff37 	bl	8006218 <tcp_abort>
          }
          return ERR_ABRT;
 80083aa:	f06f 030c 	mvn.w	r3, #12
 80083ae:	e1b9      	b.n	8008724 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fa3d 	bl	8008830 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80083b6:	4b5e      	ldr	r3, [pc, #376]	@ (8008530 <tcp_process+0x554>)
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d005      	beq.n	80083ca <tcp_process+0x3ee>
          recv_acked--;
 80083be:	4b5c      	ldr	r3, [pc, #368]	@ (8008530 <tcp_process+0x554>)
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	4b5a      	ldr	r3, [pc, #360]	@ (8008530 <tcp_process+0x554>)
 80083c8:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	f241 121c 	movw	r2, #4380	@ 0x111c
 80083d4:	429a      	cmp	r2, r3
 80083d6:	bf38      	it	cc
 80083d8:	461a      	movcc	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4293      	cmp	r3, r2
 80083e2:	bf28      	it	cs
 80083e4:	4613      	movcs	r3, r2
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80083ee:	4b51      	ldr	r3, [pc, #324]	@ (8008534 <tcp_process+0x558>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d034      	beq.n	8008464 <tcp_process+0x488>
          tcp_ack_now(pcb);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	7e9b      	ldrb	r3, [r3, #26]
 80083fe:	f043 0302 	orr.w	r3, r3, #2
 8008402:	b2da      	uxtb	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2207      	movs	r2, #7
 800840c:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800840e:	e029      	b.n	8008464 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008410:	4b3e      	ldr	r3, [pc, #248]	@ (800850c <tcp_process+0x530>)
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	4b3e      	ldr	r3, [pc, #248]	@ (8008510 <tcp_process+0x534>)
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	4b3e      	ldr	r3, [pc, #248]	@ (8008514 <tcp_process+0x538>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008420:	4b3d      	ldr	r3, [pc, #244]	@ (8008518 <tcp_process+0x53c>)
 8008422:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008424:	885b      	ldrh	r3, [r3, #2]
 8008426:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008428:	4a3b      	ldr	r2, [pc, #236]	@ (8008518 <tcp_process+0x53c>)
 800842a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800842c:	8812      	ldrh	r2, [r2, #0]
 800842e:	b292      	uxth	r2, r2
 8008430:	9201      	str	r2, [sp, #4]
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4b39      	ldr	r3, [pc, #228]	@ (800851c <tcp_process+0x540>)
 8008436:	4a3a      	ldr	r2, [pc, #232]	@ (8008520 <tcp_process+0x544>)
 8008438:	f002 fbf2 	bl	800ac20 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800843c:	e166      	b.n	800870c <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800843e:	4b32      	ldr	r3, [pc, #200]	@ (8008508 <tcp_process+0x52c>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 8160 	beq.w	800870c <tcp_process+0x730>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008450:	1e5a      	subs	r2, r3, #1
 8008452:	4b30      	ldr	r3, [pc, #192]	@ (8008514 <tcp_process+0x538>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	f040 8158 	bne.w	800870c <tcp_process+0x730>
      tcp_rexmit(pcb);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f002 fc8b 	bl	800ad78 <tcp_rexmit>
    break;
 8008462:	e153      	b.n	800870c <tcp_process+0x730>
 8008464:	e152      	b.n	800870c <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f9e2 	bl	8008830 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800846c:	4b31      	ldr	r3, [pc, #196]	@ (8008534 <tcp_process+0x558>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	f000 814b 	beq.w	8008710 <tcp_process+0x734>
      tcp_ack_now(pcb);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	7e9b      	ldrb	r3, [r3, #26]
 800847e:	f043 0302 	orr.w	r3, r3, #2
 8008482:	b2da      	uxtb	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2207      	movs	r2, #7
 800848c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800848e:	e13f      	b.n	8008710 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f9cd 	bl	8008830 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8008496:	4b27      	ldr	r3, [pc, #156]	@ (8008534 <tcp_process+0x558>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d070      	beq.n	8008584 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084a2:	4b19      	ldr	r3, [pc, #100]	@ (8008508 <tcp_process+0x52c>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	f003 0310 	and.w	r3, r3, #16
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d05f      	beq.n	800856e <tcp_process+0x592>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084b2:	4b16      	ldr	r3, [pc, #88]	@ (800850c <tcp_process+0x530>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d159      	bne.n	800856e <tcp_process+0x592>
          pcb->unsent == NULL) {
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d155      	bne.n	800856e <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	7e9b      	ldrb	r3, [r3, #26]
 80084c6:	f043 0302 	orr.w	r3, r3, #2
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7fe fee9 	bl	80072a8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80084d6:	4b18      	ldr	r3, [pc, #96]	@ (8008538 <tcp_process+0x55c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d105      	bne.n	80084ec <tcp_process+0x510>
 80084e0:	4b15      	ldr	r3, [pc, #84]	@ (8008538 <tcp_process+0x55c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	4a14      	ldr	r2, [pc, #80]	@ (8008538 <tcp_process+0x55c>)
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	e02d      	b.n	8008548 <tcp_process+0x56c>
 80084ec:	4b12      	ldr	r3, [pc, #72]	@ (8008538 <tcp_process+0x55c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	617b      	str	r3, [r7, #20]
 80084f2:	e026      	b.n	8008542 <tcp_process+0x566>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d11e      	bne.n	800853c <tcp_process+0x560>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68da      	ldr	r2, [r3, #12]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	60da      	str	r2, [r3, #12]
 8008506:	e01f      	b.n	8008548 <tcp_process+0x56c>
 8008508:	2000834c 	.word	0x2000834c
 800850c:	20008344 	.word	0x20008344
 8008510:	2000834a 	.word	0x2000834a
 8008514:	20008340 	.word	0x20008340
 8008518:	20008330 	.word	0x20008330
 800851c:	20004dbc 	.word	0x20004dbc
 8008520:	20004dc0 	.word	0x20004dc0
 8008524:	0800f850 	.word	0x0800f850
 8008528:	0800fa54 	.word	0x0800fa54
 800852c:	0800f894 	.word	0x0800f894
 8008530:	20008348 	.word	0x20008348
 8008534:	2000834d 	.word	0x2000834d
 8008538:	20008314 	.word	0x20008314
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1d5      	bne.n	80084f4 <tcp_process+0x518>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	60da      	str	r2, [r3, #12]
 800854e:	4b77      	ldr	r3, [pc, #476]	@ (800872c <tcp_process+0x750>)
 8008550:	2201      	movs	r2, #1
 8008552:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	220a      	movs	r2, #10
 8008558:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800855a:	4b75      	ldr	r3, [pc, #468]	@ (8008730 <tcp_process+0x754>)
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60da      	str	r2, [r3, #12]
 8008562:	4a73      	ldr	r2, [pc, #460]	@ (8008730 <tcp_process+0x754>)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	f002 fda2 	bl	800b0b0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800856c:	e0d2      	b.n	8008714 <tcp_process+0x738>
        tcp_ack_now(pcb);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	7e9b      	ldrb	r3, [r3, #26]
 8008572:	f043 0302 	orr.w	r3, r3, #2
 8008576:	b2da      	uxtb	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2208      	movs	r2, #8
 8008580:	751a      	strb	r2, [r3, #20]
    break;
 8008582:	e0c7      	b.n	8008714 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008584:	4b6b      	ldr	r3, [pc, #428]	@ (8008734 <tcp_process+0x758>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 80c1 	beq.w	8008714 <tcp_process+0x738>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008596:	4b68      	ldr	r3, [pc, #416]	@ (8008738 <tcp_process+0x75c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	f040 80ba 	bne.w	8008714 <tcp_process+0x738>
               pcb->unsent == NULL) {
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f040 80b5 	bne.w	8008714 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2206      	movs	r2, #6
 80085ae:	751a      	strb	r2, [r3, #20]
    break;
 80085b0:	e0b0      	b.n	8008714 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f93c 	bl	8008830 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80085b8:	4b60      	ldr	r3, [pc, #384]	@ (800873c <tcp_process+0x760>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 80a9 	beq.w	8008718 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	7e9b      	ldrb	r3, [r3, #26]
 80085ca:	f043 0302 	orr.w	r3, r3, #2
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7fe fe67 	bl	80072a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80085da:	4b59      	ldr	r3, [pc, #356]	@ (8008740 <tcp_process+0x764>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d105      	bne.n	80085f0 <tcp_process+0x614>
 80085e4:	4b56      	ldr	r3, [pc, #344]	@ (8008740 <tcp_process+0x764>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	4a55      	ldr	r2, [pc, #340]	@ (8008740 <tcp_process+0x764>)
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	e013      	b.n	8008618 <tcp_process+0x63c>
 80085f0:	4b53      	ldr	r3, [pc, #332]	@ (8008740 <tcp_process+0x764>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	e00c      	b.n	8008612 <tcp_process+0x636>
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d104      	bne.n	800860c <tcp_process+0x630>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	60da      	str	r2, [r3, #12]
 800860a:	e005      	b.n	8008618 <tcp_process+0x63c>
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	613b      	str	r3, [r7, #16]
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1ef      	bne.n	80085f8 <tcp_process+0x61c>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	60da      	str	r2, [r3, #12]
 800861e:	4b43      	ldr	r3, [pc, #268]	@ (800872c <tcp_process+0x750>)
 8008620:	2201      	movs	r2, #1
 8008622:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	220a      	movs	r2, #10
 8008628:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800862a:	4b41      	ldr	r3, [pc, #260]	@ (8008730 <tcp_process+0x754>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	60da      	str	r2, [r3, #12]
 8008632:	4a3f      	ldr	r2, [pc, #252]	@ (8008730 <tcp_process+0x754>)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	f002 fd3a 	bl	800b0b0 <tcp_timer_needed>
    }
    break;
 800863c:	e06c      	b.n	8008718 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f8f6 	bl	8008830 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008644:	4b3b      	ldr	r3, [pc, #236]	@ (8008734 <tcp_process+0x758>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d065      	beq.n	800871c <tcp_process+0x740>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008654:	4b38      	ldr	r3, [pc, #224]	@ (8008738 <tcp_process+0x75c>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	429a      	cmp	r2, r3
 800865a:	d15f      	bne.n	800871c <tcp_process+0x740>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008660:	2b00      	cmp	r3, #0
 8008662:	d15b      	bne.n	800871c <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7fe fe1f 	bl	80072a8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800866a:	4b35      	ldr	r3, [pc, #212]	@ (8008740 <tcp_process+0x764>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	429a      	cmp	r2, r3
 8008672:	d105      	bne.n	8008680 <tcp_process+0x6a4>
 8008674:	4b32      	ldr	r3, [pc, #200]	@ (8008740 <tcp_process+0x764>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	4a31      	ldr	r2, [pc, #196]	@ (8008740 <tcp_process+0x764>)
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	e013      	b.n	80086a8 <tcp_process+0x6cc>
 8008680:	4b2f      	ldr	r3, [pc, #188]	@ (8008740 <tcp_process+0x764>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	e00c      	b.n	80086a2 <tcp_process+0x6c6>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	429a      	cmp	r2, r3
 8008690:	d104      	bne.n	800869c <tcp_process+0x6c0>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	60da      	str	r2, [r3, #12]
 800869a:	e005      	b.n	80086a8 <tcp_process+0x6cc>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1ef      	bne.n	8008688 <tcp_process+0x6ac>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	60da      	str	r2, [r3, #12]
 80086ae:	4b1f      	ldr	r3, [pc, #124]	@ (800872c <tcp_process+0x750>)
 80086b0:	2201      	movs	r2, #1
 80086b2:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	220a      	movs	r2, #10
 80086b8:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80086ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008730 <tcp_process+0x754>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60da      	str	r2, [r3, #12]
 80086c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008730 <tcp_process+0x754>)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	f002 fcf2 	bl	800b0b0 <tcp_timer_needed>
    }
    break;
 80086cc:	e026      	b.n	800871c <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f8ae 	bl	8008830 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80086d4:	4b17      	ldr	r3, [pc, #92]	@ (8008734 <tcp_process+0x758>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	f003 0310 	and.w	r3, r3, #16
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d01f      	beq.n	8008720 <tcp_process+0x744>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086e4:	4b14      	ldr	r3, [pc, #80]	@ (8008738 <tcp_process+0x75c>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d119      	bne.n	8008720 <tcp_process+0x744>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d115      	bne.n	8008720 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80086f4:	4b11      	ldr	r3, [pc, #68]	@ (800873c <tcp_process+0x760>)
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f043 0310 	orr.w	r3, r3, #16
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	4b0f      	ldr	r3, [pc, #60]	@ (800873c <tcp_process+0x760>)
 8008700:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008702:	e00d      	b.n	8008720 <tcp_process+0x744>
  default:
    break;
 8008704:	bf00      	nop
 8008706:	e00c      	b.n	8008722 <tcp_process+0x746>
    break;
 8008708:	bf00      	nop
 800870a:	e00a      	b.n	8008722 <tcp_process+0x746>
    break;
 800870c:	bf00      	nop
 800870e:	e008      	b.n	8008722 <tcp_process+0x746>
    break;
 8008710:	bf00      	nop
 8008712:	e006      	b.n	8008722 <tcp_process+0x746>
    break;
 8008714:	bf00      	nop
 8008716:	e004      	b.n	8008722 <tcp_process+0x746>
    break;
 8008718:	bf00      	nop
 800871a:	e002      	b.n	8008722 <tcp_process+0x746>
    break;
 800871c:	bf00      	nop
 800871e:	e000      	b.n	8008722 <tcp_process+0x746>
    break;
 8008720:	bf00      	nop
  }
  return ERR_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3720      	adds	r7, #32
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	2000831c 	.word	0x2000831c
 8008730:	20008318 	.word	0x20008318
 8008734:	2000834c 	.word	0x2000834c
 8008738:	20008344 	.word	0x20008344
 800873c:	2000834d 	.word	0x2000834d
 8008740:	20008314 	.word	0x20008314

08008744 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008744:	b590      	push	{r4, r7, lr}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	899b      	ldrh	r3, [r3, #12]
 8008754:	b29b      	uxth	r3, r3
 8008756:	4618      	mov	r0, r3
 8008758:	f7fb ff22 	bl	80045a0 <lwip_htons>
 800875c:	4603      	mov	r3, r0
 800875e:	f003 0301 	and.w	r3, r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	d027      	beq.n	80087b6 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008766:	6838      	ldr	r0, [r7, #0]
 8008768:	f7fe fb2b 	bl	8006dc2 <tcp_segs_free>
    next = NULL;
 800876c:	2300      	movs	r3, #0
 800876e:	603b      	str	r3, [r7, #0]
 8008770:	e055      	b.n	800881e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	899b      	ldrh	r3, [r3, #12]
 8008778:	b29b      	uxth	r3, r3
 800877a:	4618      	mov	r0, r3
 800877c:	f7fb ff10 	bl	80045a0 <lwip_htons>
 8008780:	4603      	mov	r3, r0
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00d      	beq.n	80087a6 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	899b      	ldrh	r3, [r3, #12]
 8008790:	b29c      	uxth	r4, r3
 8008792:	2001      	movs	r0, #1
 8008794:	f7fb ff04 	bl	80045a0 <lwip_htons>
 8008798:	4603      	mov	r3, r0
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	4322      	orrs	r2, r4
 80087a2:	b292      	uxth	r2, r2
 80087a4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7fe fb1b 	bl	8006dec <tcp_seg_free>
    while (next &&
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00e      	beq.n	80087da <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	891b      	ldrh	r3, [r3, #8]
 80087c0:	461a      	mov	r2, r3
 80087c2:	4b1a      	ldr	r3, [pc, #104]	@ (800882c <tcp_oos_insert_segment+0xe8>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	441a      	add	r2, r3
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	8909      	ldrh	r1, [r1, #8]
 80087d2:	440b      	add	r3, r1
 80087d4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	dacb      	bge.n	8008772 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d01e      	beq.n	800881e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	891b      	ldrh	r3, [r3, #8]
 80087e4:	461a      	mov	r2, r3
 80087e6:	4b11      	ldr	r3, [pc, #68]	@ (800882c <tcp_oos_insert_segment+0xe8>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	441a      	add	r2, r3
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	dd12      	ble.n	800881e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	b29a      	uxth	r2, r3
 8008800:	4b0a      	ldr	r3, [pc, #40]	@ (800882c <tcp_oos_insert_segment+0xe8>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	b29b      	uxth	r3, r3
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	b29a      	uxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	891b      	ldrh	r3, [r3, #8]
 8008816:	4619      	mov	r1, r3
 8008818:	4610      	mov	r0, r2
 800881a:	f7fc fe93 	bl	8005544 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	601a      	str	r2, [r3, #0]
}
 8008824:	bf00      	nop
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	bd90      	pop	{r4, r7, pc}
 800882c:	20008340 	.word	0x20008340

08008830 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008832:	b08d      	sub	sp, #52	@ 0x34
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	7d1b      	ldrb	r3, [r3, #20]
 8008840:	2b03      	cmp	r3, #3
 8008842:	d806      	bhi.n	8008852 <tcp_receive+0x22>
 8008844:	4b98      	ldr	r3, [pc, #608]	@ (8008aa8 <tcp_receive+0x278>)
 8008846:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800884a:	4998      	ldr	r1, [pc, #608]	@ (8008aac <tcp_receive+0x27c>)
 800884c:	4898      	ldr	r0, [pc, #608]	@ (8008ab0 <tcp_receive+0x280>)
 800884e:	f005 f96f 	bl	800db30 <iprintf>

  if (flags & TCP_ACK) {
 8008852:	4b98      	ldr	r3, [pc, #608]	@ (8008ab4 <tcp_receive+0x284>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	f003 0310 	and.w	r3, r3, #16
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 82c1 	beq.w	8008de2 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008866:	461a      	mov	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800886c:	4413      	add	r3, r2
 800886e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008874:	4b90      	ldr	r3, [pc, #576]	@ (8008ab8 <tcp_receive+0x288>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	db1b      	blt.n	80088b6 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008882:	4b8d      	ldr	r3, [pc, #564]	@ (8008ab8 <tcp_receive+0x288>)
 8008884:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008886:	429a      	cmp	r2, r3
 8008888:	d106      	bne.n	8008898 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800888e:	4b8b      	ldr	r3, [pc, #556]	@ (8008abc <tcp_receive+0x28c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	db0e      	blt.n	80088b6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800889c:	4b87      	ldr	r3, [pc, #540]	@ (8008abc <tcp_receive+0x28c>)
 800889e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d141      	bne.n	8008928 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80088a4:	4b86      	ldr	r3, [pc, #536]	@ (8008ac0 <tcp_receive+0x290>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	89db      	ldrh	r3, [r3, #14]
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d938      	bls.n	8008928 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80088b6:	4b82      	ldr	r3, [pc, #520]	@ (8008ac0 <tcp_receive+0x290>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	89db      	ldrh	r3, [r3, #14]
 80088bc:	b29a      	uxth	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d205      	bcs.n	80088e0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 80088e0:	4b75      	ldr	r3, [pc, #468]	@ (8008ab8 <tcp_receive+0x288>)
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 80088e8:	4b74      	ldr	r3, [pc, #464]	@ (8008abc <tcp_receive+0x28c>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10d      	bne.n	8008916 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8008900:	2b00      	cmp	r3, #0
 8008902:	d111      	bne.n	8008928 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8008914:	e008      	b.n	8008928 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008928:	4b64      	ldr	r3, [pc, #400]	@ (8008abc <tcp_receive+0x28c>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	dc53      	bgt.n	80089de <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8008936:	4b63      	ldr	r3, [pc, #396]	@ (8008ac4 <tcp_receive+0x294>)
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d146      	bne.n	80089cc <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008948:	4413      	add	r3, r2
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	429a      	cmp	r2, r3
 800894e:	d13d      	bne.n	80089cc <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008956:	2b00      	cmp	r3, #0
 8008958:	db38      	blt.n	80089cc <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800895e:	4b57      	ldr	r3, [pc, #348]	@ (8008abc <tcp_receive+0x28c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d132      	bne.n	80089cc <tcp_receive+0x19c>
              found_dupack = 1;
 8008966:	2301      	movs	r3, #1
 8008968:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008970:	2bff      	cmp	r3, #255	@ 0xff
 8008972:	d007      	beq.n	8008984 <tcp_receive+0x154>
                ++pcb->dupacks;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800897a:	3301      	adds	r3, #1
 800897c:	b2da      	uxtb	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800898a:	2b03      	cmp	r3, #3
 800898c:	d916      	bls.n	80089bc <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008998:	4413      	add	r3, r2
 800899a:	b29a      	uxth	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d912      	bls.n	80089cc <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089b0:	4413      	add	r3, r2
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80089ba:	e007      	b.n	80089cc <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d102      	bne.n	80089cc <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f002 fa26 	bl	800ae18 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f040 816a 	bne.w	8008ca8 <tcp_receive+0x478>
        pcb->dupacks = 0;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089dc:	e164      	b.n	8008ca8 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80089de:	4b37      	ldr	r3, [pc, #220]	@ (8008abc <tcp_receive+0x28c>)
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	3b01      	subs	r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f2c0 8108 	blt.w	8008c00 <tcp_receive+0x3d0>
 80089f0:	4b32      	ldr	r3, [pc, #200]	@ (8008abc <tcp_receive+0x28c>)
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f300 8100 	bgt.w	8008c00 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	7e9b      	ldrb	r3, [r3, #26]
 8008a04:	f003 0304 	and.w	r3, r3, #4
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00c      	beq.n	8008a26 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	7e9b      	ldrb	r3, [r3, #26]
 8008a10:	f023 0304 	bic.w	r3, r3, #4
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a34:	10db      	asrs	r3, r3, #3
 8008a36:	b21b      	sxth	r3, r3
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4413      	add	r3, r2
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	b21a      	sxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8008a56:	4b19      	ldr	r3, [pc, #100]	@ (8008abc <tcp_receive+0x28c>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	7d1b      	ldrb	r3, [r3, #20]
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	f240 8095 	bls.w	8008b92 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d227      	bcs.n	8008ac8 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a82:	4413      	add	r3, r2
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	f240 8080 	bls.w	8008b92 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008a9c:	4413      	add	r3, r2
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8008aa6:	e074      	b.n	8008b92 <tcp_receive+0x362>
 8008aa8:	0800f850 	.word	0x0800f850
 8008aac:	0800fa74 	.word	0x0800fa74
 8008ab0:	0800f894 	.word	0x0800f894
 8008ab4:	2000834c 	.word	0x2000834c
 8008ab8:	20008340 	.word	0x20008340
 8008abc:	20008344 	.word	0x20008344
 8008ac0:	20008330 	.word	0x20008330
 8008ac4:	2000834a 	.word	0x2000834a
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008ad8:	fb01 f303 	mul.w	r3, r1, r3
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 8008ae2:	fb93 f3f1 	sdiv	r3, r3, r1
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	4413      	add	r3, r2
 8008aea:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008af2:	8a7a      	ldrh	r2, [r7, #18]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d94c      	bls.n	8008b92 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	8a7a      	ldrh	r2, [r7, #18]
 8008afc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8008b00:	e047      	b.n	8008b92 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fc ff19 	bl	8005954 <pbuf_clen>
 8008b22:	4603      	mov	r3, r0
 8008b24:	429c      	cmp	r4, r3
 8008b26:	d206      	bcs.n	8008b36 <tcp_receive+0x306>
 8008b28:	4b70      	ldr	r3, [pc, #448]	@ (8008cec <tcp_receive+0x4bc>)
 8008b2a:	f240 429e 	movw	r2, #1182	@ 0x49e
 8008b2e:	4970      	ldr	r1, [pc, #448]	@ (8008cf0 <tcp_receive+0x4c0>)
 8008b30:	4870      	ldr	r0, [pc, #448]	@ (8008cf4 <tcp_receive+0x4c4>)
 8008b32:	f004 fffd 	bl	800db30 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fc ff0a 	bl	8005954 <pbuf_clen>
 8008b40:	4603      	mov	r3, r0
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b4a:	1a9b      	subs	r3, r3, r2
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 8008b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b56:	891a      	ldrh	r2, [r3, #8]
 8008b58:	4b67      	ldr	r3, [pc, #412]	@ (8008cf8 <tcp_receive+0x4c8>)
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	4b65      	ldr	r3, [pc, #404]	@ (8008cf8 <tcp_receive+0x4c8>)
 8008b62:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8008b64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b66:	f7fe f941 	bl	8006dec <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00e      	beq.n	8008b92 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10a      	bne.n	8008b92 <tcp_receive+0x362>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d106      	bne.n	8008b92 <tcp_receive+0x362>
 8008b84:	4b59      	ldr	r3, [pc, #356]	@ (8008cec <tcp_receive+0x4bc>)
 8008b86:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 8008b8a:	495c      	ldr	r1, [pc, #368]	@ (8008cfc <tcp_receive+0x4cc>)
 8008b8c:	4859      	ldr	r0, [pc, #356]	@ (8008cf4 <tcp_receive+0x4c4>)
 8008b8e:	f004 ffcf 	bl	800db30 <iprintf>
      while (pcb->unacked != NULL &&
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d022      	beq.n	8008be0 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7fb fd09 	bl	80045ba <lwip_htonl>
 8008ba8:	4604      	mov	r4, r0
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bae:	891b      	ldrh	r3, [r3, #8]
 8008bb0:	461d      	mov	r5, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	899b      	ldrh	r3, [r3, #12]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7fb fcef 	bl	80045a0 <lwip_htons>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <tcp_receive+0x3a0>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <tcp_receive+0x3a2>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	442b      	add	r3, r5
 8008bd4:	18e2      	adds	r2, r4, r3
 8008bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8008d00 <tcp_receive+0x4d0>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dd90      	ble.n	8008b02 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d104      	bne.n	8008bf2 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008bee:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008bf0:	e002      	b.n	8008bf8 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	76da      	strb	r2, [r3, #27]
 8008bfe:	e002      	b.n	8008c06 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 fd2d 	bl	800a660 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8008c06:	e04f      	b.n	8008ca8 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d103      	bne.n	8008c28 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8008c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fc fe8e 	bl	8005954 <pbuf_clen>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	429c      	cmp	r4, r3
 8008c3c:	d206      	bcs.n	8008c4c <tcp_receive+0x41c>
 8008c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8008cec <tcp_receive+0x4bc>)
 8008c40:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008c44:	492a      	ldr	r1, [pc, #168]	@ (8008cf0 <tcp_receive+0x4c0>)
 8008c46:	482b      	ldr	r0, [pc, #172]	@ (8008cf4 <tcp_receive+0x4c4>)
 8008c48:	f004 ff72 	bl	800db30 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fc fe7f 	bl	8005954 <pbuf_clen>
 8008c56:	4603      	mov	r3, r0
 8008c58:	461a      	mov	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c60:	1a9b      	subs	r3, r3, r2
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 8008c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6c:	891a      	ldrh	r2, [r3, #8]
 8008c6e:	4b22      	ldr	r3, [pc, #136]	@ (8008cf8 <tcp_receive+0x4c8>)
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	4413      	add	r3, r2
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	4b20      	ldr	r3, [pc, #128]	@ (8008cf8 <tcp_receive+0x4c8>)
 8008c78:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8008c7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c7c:	f7fe f8b6 	bl	8006dec <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00e      	beq.n	8008ca8 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10a      	bne.n	8008ca8 <tcp_receive+0x478>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <tcp_receive+0x478>
 8008c9a:	4b14      	ldr	r3, [pc, #80]	@ (8008cec <tcp_receive+0x4bc>)
 8008c9c:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 8008ca0:	4916      	ldr	r1, [pc, #88]	@ (8008cfc <tcp_receive+0x4cc>)
 8008ca2:	4814      	ldr	r0, [pc, #80]	@ (8008cf4 <tcp_receive+0x4c4>)
 8008ca4:	f004 ff44 	bl	800db30 <iprintf>
    while (pcb->unsent != NULL &&
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d037      	beq.n	8008d20 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008cb0:	4b13      	ldr	r3, [pc, #76]	@ (8008d00 <tcp_receive+0x4d0>)
 8008cb2:	681c      	ldr	r4, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fb fc7c 	bl	80045ba <lwip_htonl>
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cc8:	891b      	ldrh	r3, [r3, #8]
 8008cca:	461e      	mov	r6, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	899b      	ldrh	r3, [r3, #12]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fb fc62 	bl	80045a0 <lwip_htons>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00e      	beq.n	8008d04 <tcp_receive+0x4d4>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e00d      	b.n	8008d06 <tcp_receive+0x4d6>
 8008cea:	bf00      	nop
 8008cec:	0800f850 	.word	0x0800f850
 8008cf0:	0800fa90 	.word	0x0800fa90
 8008cf4:	0800f894 	.word	0x0800f894
 8008cf8:	20008348 	.word	0x20008348
 8008cfc:	0800fab8 	.word	0x0800fab8
 8008d00:	20008344 	.word	0x20008344
 8008d04:	2300      	movs	r3, #0
 8008d06:	4433      	add	r3, r6
 8008d08:	442b      	add	r3, r5
 8008d0a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	db07      	blt.n	8008d20 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008d10:	4b8d      	ldr	r3, [pc, #564]	@ (8008f48 <tcp_receive+0x718>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f77f af74 	ble.w	8008c08 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008d26:	4b89      	ldr	r3, [pc, #548]	@ (8008f4c <tcp_receive+0x71c>)
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d052      	beq.n	8008de2 <tcp_receive+0x5b2>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d40:	4b81      	ldr	r3, [pc, #516]	@ (8008f48 <tcp_receive+0x718>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	da4b      	bge.n	8008de2 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008d4a:	4b81      	ldr	r3, [pc, #516]	@ (8008f50 <tcp_receive+0x720>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8008d5c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008d64:	10db      	asrs	r3, r3, #3
 8008d66:	b21b      	sxth	r3, r3
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008d7a:	4413      	add	r3, r2
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	b21a      	sxth	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008d84:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	da03      	bge.n	8008d94 <tcp_receive+0x564>
        m = -m;
 8008d8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008d8e:	425b      	negs	r3, r3
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 8008d94:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008d9c:	109b      	asrs	r3, r3, #2
 8008d9e:	b21b      	sxth	r3, r3
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008db2:	4413      	add	r3, r2
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	b21a      	sxth	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008dc2:	10db      	asrs	r3, r3, #3
 8008dc4:	b21b      	sxth	r3, r3
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	b21a      	sxth	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008de2:	4b5c      	ldr	r3, [pc, #368]	@ (8008f54 <tcp_receive+0x724>)
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 84f1 	beq.w	80097ce <tcp_receive+0xf9e>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7d1b      	ldrb	r3, [r3, #20]
 8008df0:	2b06      	cmp	r3, #6
 8008df2:	f200 84ec 	bhi.w	80097ce <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dfa:	4b57      	ldr	r3, [pc, #348]	@ (8008f58 <tcp_receive+0x728>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	3b01      	subs	r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f2c0 80b8 	blt.w	8008f78 <tcp_receive+0x748>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e0c:	4b51      	ldr	r3, [pc, #324]	@ (8008f54 <tcp_receive+0x724>)
 8008e0e:	881b      	ldrh	r3, [r3, #0]
 8008e10:	4619      	mov	r1, r3
 8008e12:	4b51      	ldr	r3, [pc, #324]	@ (8008f58 <tcp_receive+0x728>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	440b      	add	r3, r1
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f300 80ab 	bgt.w	8008f78 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008e22:	4b4e      	ldr	r3, [pc, #312]	@ (8008f5c <tcp_receive+0x72c>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e2c:	4b4a      	ldr	r3, [pc, #296]	@ (8008f58 <tcp_receive+0x728>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008e34:	4b49      	ldr	r3, [pc, #292]	@ (8008f5c <tcp_receive+0x72c>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d106      	bne.n	8008e4a <tcp_receive+0x61a>
 8008e3c:	4b48      	ldr	r3, [pc, #288]	@ (8008f60 <tcp_receive+0x730>)
 8008e3e:	f240 523c 	movw	r2, #1340	@ 0x53c
 8008e42:	4948      	ldr	r1, [pc, #288]	@ (8008f64 <tcp_receive+0x734>)
 8008e44:	4848      	ldr	r0, [pc, #288]	@ (8008f68 <tcp_receive+0x738>)
 8008e46:	f004 fe73 	bl	800db30 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4c:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008e50:	4293      	cmp	r3, r2
 8008e52:	dd06      	ble.n	8008e62 <tcp_receive+0x632>
 8008e54:	4b42      	ldr	r3, [pc, #264]	@ (8008f60 <tcp_receive+0x730>)
 8008e56:	f240 523d 	movw	r2, #1341	@ 0x53d
 8008e5a:	4944      	ldr	r1, [pc, #272]	@ (8008f6c <tcp_receive+0x73c>)
 8008e5c:	4842      	ldr	r0, [pc, #264]	@ (8008f68 <tcp_receive+0x738>)
 8008e5e:	f004 fe67 	bl	800db30 <iprintf>
      if (inseg.p->len < off) {
 8008e62:	4b3e      	ldr	r3, [pc, #248]	@ (8008f5c <tcp_receive+0x72c>)
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	895b      	ldrh	r3, [r3, #10]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	dd3e      	ble.n	8008eee <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008e70:	4b3a      	ldr	r3, [pc, #232]	@ (8008f5c <tcp_receive+0x72c>)
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	891b      	ldrh	r3, [r3, #8]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	dd06      	ble.n	8008e8c <tcp_receive+0x65c>
 8008e7e:	4b38      	ldr	r3, [pc, #224]	@ (8008f60 <tcp_receive+0x730>)
 8008e80:	f240 523f 	movw	r2, #1343	@ 0x53f
 8008e84:	493a      	ldr	r1, [pc, #232]	@ (8008f70 <tcp_receive+0x740>)
 8008e86:	4838      	ldr	r0, [pc, #224]	@ (8008f68 <tcp_receive+0x738>)
 8008e88:	f004 fe52 	bl	800db30 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008e8c:	4b33      	ldr	r3, [pc, #204]	@ (8008f5c <tcp_receive+0x72c>)
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	891a      	ldrh	r2, [r3, #8]
 8008e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8008e9a:	e00e      	b.n	8008eba <tcp_receive+0x68a>
          off -= p->len;
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	895b      	ldrh	r3, [r3, #10]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	8a3a      	ldrh	r2, [r7, #16]
 8008eac:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	895b      	ldrh	r3, [r3, #10]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	dcea      	bgt.n	8008e9c <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	425b      	negs	r3, r3
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	b21b      	sxth	r3, r3
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	69b8      	ldr	r0, [r7, #24]
 8008ed4:	f7fc fc86 	bl	80057e4 <pbuf_header>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01c      	beq.n	8008f18 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008ede:	4b20      	ldr	r3, [pc, #128]	@ (8008f60 <tcp_receive+0x730>)
 8008ee0:	f240 524c 	movw	r2, #1356	@ 0x54c
 8008ee4:	4923      	ldr	r1, [pc, #140]	@ (8008f74 <tcp_receive+0x744>)
 8008ee6:	4820      	ldr	r0, [pc, #128]	@ (8008f68 <tcp_receive+0x738>)
 8008ee8:	f004 fe22 	bl	800db30 <iprintf>
 8008eec:	e014      	b.n	8008f18 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008eee:	4b1b      	ldr	r3, [pc, #108]	@ (8008f5c <tcp_receive+0x72c>)
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ef4:	b292      	uxth	r2, r2
 8008ef6:	4252      	negs	r2, r2
 8008ef8:	b292      	uxth	r2, r2
 8008efa:	b212      	sxth	r2, r2
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fc fc70 	bl	80057e4 <pbuf_header>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d006      	beq.n	8008f18 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008f0a:	4b15      	ldr	r3, [pc, #84]	@ (8008f60 <tcp_receive+0x730>)
 8008f0c:	f240 5251 	movw	r2, #1361	@ 0x551
 8008f10:	4918      	ldr	r1, [pc, #96]	@ (8008f74 <tcp_receive+0x744>)
 8008f12:	4815      	ldr	r0, [pc, #84]	@ (8008f68 <tcp_receive+0x738>)
 8008f14:	f004 fe0c 	bl	800db30 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008f18:	4b10      	ldr	r3, [pc, #64]	@ (8008f5c <tcp_receive+0x72c>)
 8008f1a:	891a      	ldrh	r2, [r3, #8]
 8008f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8008f58 <tcp_receive+0x728>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	b299      	uxth	r1, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	1acb      	subs	r3, r1, r3
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	4413      	add	r3, r2
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	4b0a      	ldr	r3, [pc, #40]	@ (8008f5c <tcp_receive+0x72c>)
 8008f32:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f38:	4a07      	ldr	r2, [pc, #28]	@ (8008f58 <tcp_receive+0x728>)
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	4b07      	ldr	r3, [pc, #28]	@ (8008f5c <tcp_receive+0x72c>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	4a05      	ldr	r2, [pc, #20]	@ (8008f58 <tcp_receive+0x728>)
 8008f42:	6812      	ldr	r2, [r2, #0]
 8008f44:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008f46:	e025      	b.n	8008f94 <tcp_receive+0x764>
 8008f48:	20008344 	.word	0x20008344
 8008f4c:	20008348 	.word	0x20008348
 8008f50:	20008308 	.word	0x20008308
 8008f54:	2000834a 	.word	0x2000834a
 8008f58:	20008340 	.word	0x20008340
 8008f5c:	20008320 	.word	0x20008320
 8008f60:	0800f850 	.word	0x0800f850
 8008f64:	0800fad8 	.word	0x0800fad8
 8008f68:	0800f894 	.word	0x0800f894
 8008f6c:	0800fae8 	.word	0x0800fae8
 8008f70:	0800faf8 	.word	0x0800faf8
 8008f74:	0800fb08 	.word	0x0800fb08
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008f78:	4b87      	ldr	r3, [pc, #540]	@ (8009198 <tcp_receive+0x968>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	da06      	bge.n	8008f94 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7e9b      	ldrb	r3, [r3, #26]
 8008f8a:	f043 0302 	orr.w	r3, r3, #2
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f94:	4b80      	ldr	r3, [pc, #512]	@ (8009198 <tcp_receive+0x968>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f2c0 8410 	blt.w	80097c4 <tcp_receive+0xf94>
 8008fa4:	4b7c      	ldr	r3, [pc, #496]	@ (8009198 <tcp_receive+0x968>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008fb0:	440b      	add	r3, r1
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f300 8404 	bgt.w	80097c4 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fc0:	4b75      	ldr	r3, [pc, #468]	@ (8009198 <tcp_receive+0x968>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	f040 8287 	bne.w	80094d8 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008fca:	4b74      	ldr	r3, [pc, #464]	@ (800919c <tcp_receive+0x96c>)
 8008fcc:	891c      	ldrh	r4, [r3, #8]
 8008fce:	4b73      	ldr	r3, [pc, #460]	@ (800919c <tcp_receive+0x96c>)
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	899b      	ldrh	r3, [r3, #12]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fb fae2 	bl	80045a0 <lwip_htons>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f003 0303 	and.w	r3, r3, #3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <tcp_receive+0x7ba>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e000      	b.n	8008fec <tcp_receive+0x7bc>
 8008fea:	2300      	movs	r3, #0
 8008fec:	4423      	add	r3, r4
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	4b6b      	ldr	r3, [pc, #428]	@ (80091a0 <tcp_receive+0x970>)
 8008ff2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008ff8:	4b69      	ldr	r3, [pc, #420]	@ (80091a0 <tcp_receive+0x970>)
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d26e      	bcs.n	80090de <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009000:	4b66      	ldr	r3, [pc, #408]	@ (800919c <tcp_receive+0x96c>)
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	899b      	ldrh	r3, [r3, #12]
 8009006:	b29b      	uxth	r3, r3
 8009008:	4618      	mov	r0, r3
 800900a:	f7fb fac9 	bl	80045a0 <lwip_htons>
 800900e:	4603      	mov	r3, r0
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	2b00      	cmp	r3, #0
 8009016:	d01b      	beq.n	8009050 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009018:	4b60      	ldr	r3, [pc, #384]	@ (800919c <tcp_receive+0x96c>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	899b      	ldrh	r3, [r3, #12]
 800901e:	b29b      	uxth	r3, r3
 8009020:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009024:	b29c      	uxth	r4, r3
 8009026:	4b5d      	ldr	r3, [pc, #372]	@ (800919c <tcp_receive+0x96c>)
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	899b      	ldrh	r3, [r3, #12]
 800902c:	b29b      	uxth	r3, r3
 800902e:	4618      	mov	r0, r3
 8009030:	f7fb fab6 	bl	80045a0 <lwip_htons>
 8009034:	4603      	mov	r3, r0
 8009036:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800903a:	b29b      	uxth	r3, r3
 800903c:	4618      	mov	r0, r3
 800903e:	f7fb faaf 	bl	80045a0 <lwip_htons>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	4b55      	ldr	r3, [pc, #340]	@ (800919c <tcp_receive+0x96c>)
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	4322      	orrs	r2, r4
 800904c:	b292      	uxth	r2, r2
 800904e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009054:	4b51      	ldr	r3, [pc, #324]	@ (800919c <tcp_receive+0x96c>)
 8009056:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009058:	4b50      	ldr	r3, [pc, #320]	@ (800919c <tcp_receive+0x96c>)
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	899b      	ldrh	r3, [r3, #12]
 800905e:	b29b      	uxth	r3, r3
 8009060:	4618      	mov	r0, r3
 8009062:	f7fb fa9d 	bl	80045a0 <lwip_htons>
 8009066:	4603      	mov	r3, r0
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <tcp_receive+0x84c>
            inseg.len -= 1;
 8009070:	4b4a      	ldr	r3, [pc, #296]	@ (800919c <tcp_receive+0x96c>)
 8009072:	891b      	ldrh	r3, [r3, #8]
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	4b48      	ldr	r3, [pc, #288]	@ (800919c <tcp_receive+0x96c>)
 800907a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800907c:	4b47      	ldr	r3, [pc, #284]	@ (800919c <tcp_receive+0x96c>)
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	4a46      	ldr	r2, [pc, #280]	@ (800919c <tcp_receive+0x96c>)
 8009082:	8912      	ldrh	r2, [r2, #8]
 8009084:	4611      	mov	r1, r2
 8009086:	4618      	mov	r0, r3
 8009088:	f7fc fa5c 	bl	8005544 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800908c:	4b43      	ldr	r3, [pc, #268]	@ (800919c <tcp_receive+0x96c>)
 800908e:	891c      	ldrh	r4, [r3, #8]
 8009090:	4b42      	ldr	r3, [pc, #264]	@ (800919c <tcp_receive+0x96c>)
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	899b      	ldrh	r3, [r3, #12]
 8009096:	b29b      	uxth	r3, r3
 8009098:	4618      	mov	r0, r3
 800909a:	f7fb fa81 	bl	80045a0 <lwip_htons>
 800909e:	4603      	mov	r3, r0
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <tcp_receive+0x87c>
 80090a8:	2301      	movs	r3, #1
 80090aa:	e000      	b.n	80090ae <tcp_receive+0x87e>
 80090ac:	2300      	movs	r3, #0
 80090ae:	4423      	add	r3, r4
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	4b3b      	ldr	r3, [pc, #236]	@ (80091a0 <tcp_receive+0x970>)
 80090b4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80090b6:	4b3a      	ldr	r3, [pc, #232]	@ (80091a0 <tcp_receive+0x970>)
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	4b36      	ldr	r3, [pc, #216]	@ (8009198 <tcp_receive+0x968>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	441a      	add	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80090ca:	440b      	add	r3, r1
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d006      	beq.n	80090de <tcp_receive+0x8ae>
 80090d0:	4b34      	ldr	r3, [pc, #208]	@ (80091a4 <tcp_receive+0x974>)
 80090d2:	f240 527e 	movw	r2, #1406	@ 0x57e
 80090d6:	4934      	ldr	r1, [pc, #208]	@ (80091a8 <tcp_receive+0x978>)
 80090d8:	4834      	ldr	r0, [pc, #208]	@ (80091ac <tcp_receive+0x97c>)
 80090da:	f004 fd29 	bl	800db30 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80e1 	beq.w	80092aa <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80090e8:	4b2c      	ldr	r3, [pc, #176]	@ (800919c <tcp_receive+0x96c>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	899b      	ldrh	r3, [r3, #12]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fb fa55 	bl	80045a0 <lwip_htons>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d010      	beq.n	8009122 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009100:	e00a      	b.n	8009118 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009106:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 8009112:	68b8      	ldr	r0, [r7, #8]
 8009114:	f7fd fe6a 	bl	8006dec <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1f0      	bne.n	8009102 <tcp_receive+0x8d2>
 8009120:	e0c3      	b.n	80092aa <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009126:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009128:	e04f      	b.n	80091ca <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800912a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	899b      	ldrh	r3, [r3, #12]
 8009130:	b29b      	uxth	r3, r3
 8009132:	4618      	mov	r0, r3
 8009134:	f7fb fa34 	bl	80045a0 <lwip_htons>
 8009138:	4603      	mov	r3, r0
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b00      	cmp	r3, #0
 8009140:	d03b      	beq.n	80091ba <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009142:	4b16      	ldr	r3, [pc, #88]	@ (800919c <tcp_receive+0x96c>)
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	899b      	ldrh	r3, [r3, #12]
 8009148:	b29b      	uxth	r3, r3
 800914a:	4618      	mov	r0, r3
 800914c:	f7fb fa28 	bl	80045a0 <lwip_htons>
 8009150:	4603      	mov	r3, r0
 8009152:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009156:	2b00      	cmp	r3, #0
 8009158:	d12f      	bne.n	80091ba <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800915a:	4b10      	ldr	r3, [pc, #64]	@ (800919c <tcp_receive+0x96c>)
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	899b      	ldrh	r3, [r3, #12]
 8009160:	b29c      	uxth	r4, r3
 8009162:	2001      	movs	r0, #1
 8009164:	f7fb fa1c 	bl	80045a0 <lwip_htons>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	4b0b      	ldr	r3, [pc, #44]	@ (800919c <tcp_receive+0x96c>)
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	4322      	orrs	r2, r4
 8009172:	b292      	uxth	r2, r2
 8009174:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009176:	4b09      	ldr	r3, [pc, #36]	@ (800919c <tcp_receive+0x96c>)
 8009178:	891c      	ldrh	r4, [r3, #8]
 800917a:	4b08      	ldr	r3, [pc, #32]	@ (800919c <tcp_receive+0x96c>)
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	899b      	ldrh	r3, [r3, #12]
 8009180:	b29b      	uxth	r3, r3
 8009182:	4618      	mov	r0, r3
 8009184:	f7fb fa0c 	bl	80045a0 <lwip_htons>
 8009188:	4603      	mov	r3, r0
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00e      	beq.n	80091b0 <tcp_receive+0x980>
 8009192:	2301      	movs	r3, #1
 8009194:	e00d      	b.n	80091b2 <tcp_receive+0x982>
 8009196:	bf00      	nop
 8009198:	20008340 	.word	0x20008340
 800919c:	20008320 	.word	0x20008320
 80091a0:	2000834a 	.word	0x2000834a
 80091a4:	0800f850 	.word	0x0800f850
 80091a8:	0800fb1c 	.word	0x0800fb1c
 80091ac:	0800f894 	.word	0x0800f894
 80091b0:	2300      	movs	r3, #0
 80091b2:	4423      	add	r3, r4
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	4b95      	ldr	r3, [pc, #596]	@ (800940c <tcp_receive+0xbdc>)
 80091b8:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80091ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091bc:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 80091be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 80091c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091c6:	f7fd fe11 	bl	8006dec <tcp_seg_free>
            while (next &&
 80091ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00e      	beq.n	80091ee <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80091d0:	4b8e      	ldr	r3, [pc, #568]	@ (800940c <tcp_receive+0xbdc>)
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	4b8e      	ldr	r3, [pc, #568]	@ (8009410 <tcp_receive+0xbe0>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	441a      	add	r2, r3
 80091dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091e4:	8909      	ldrh	r1, [r1, #8]
 80091e6:	440b      	add	r3, r1
 80091e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	da9d      	bge.n	800912a <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80091ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d057      	beq.n	80092a4 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 80091f4:	4b85      	ldr	r3, [pc, #532]	@ (800940c <tcp_receive+0xbdc>)
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	461a      	mov	r2, r3
 80091fa:	4b85      	ldr	r3, [pc, #532]	@ (8009410 <tcp_receive+0xbe0>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	441a      	add	r2, r3
 8009200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009208:	2b00      	cmp	r3, #0
 800920a:	dd4b      	ble.n	80092a4 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800920c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	b29a      	uxth	r2, r3
 8009214:	4b7e      	ldr	r3, [pc, #504]	@ (8009410 <tcp_receive+0xbe0>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	b29b      	uxth	r3, r3
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	b29a      	uxth	r2, r3
 800921e:	4b7d      	ldr	r3, [pc, #500]	@ (8009414 <tcp_receive+0xbe4>)
 8009220:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009222:	4b7c      	ldr	r3, [pc, #496]	@ (8009414 <tcp_receive+0xbe4>)
 8009224:	68db      	ldr	r3, [r3, #12]
 8009226:	899b      	ldrh	r3, [r3, #12]
 8009228:	b29b      	uxth	r3, r3
 800922a:	4618      	mov	r0, r3
 800922c:	f7fb f9b8 	bl	80045a0 <lwip_htons>
 8009230:	4603      	mov	r3, r0
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	d005      	beq.n	8009246 <tcp_receive+0xa16>
                inseg.len -= 1;
 800923a:	4b76      	ldr	r3, [pc, #472]	@ (8009414 <tcp_receive+0xbe4>)
 800923c:	891b      	ldrh	r3, [r3, #8]
 800923e:	3b01      	subs	r3, #1
 8009240:	b29a      	uxth	r2, r3
 8009242:	4b74      	ldr	r3, [pc, #464]	@ (8009414 <tcp_receive+0xbe4>)
 8009244:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009246:	4b73      	ldr	r3, [pc, #460]	@ (8009414 <tcp_receive+0xbe4>)
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	4a72      	ldr	r2, [pc, #456]	@ (8009414 <tcp_receive+0xbe4>)
 800924c:	8912      	ldrh	r2, [r2, #8]
 800924e:	4611      	mov	r1, r2
 8009250:	4618      	mov	r0, r3
 8009252:	f7fc f977 	bl	8005544 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009256:	4b6f      	ldr	r3, [pc, #444]	@ (8009414 <tcp_receive+0xbe4>)
 8009258:	891c      	ldrh	r4, [r3, #8]
 800925a:	4b6e      	ldr	r3, [pc, #440]	@ (8009414 <tcp_receive+0xbe4>)
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	899b      	ldrh	r3, [r3, #12]
 8009260:	b29b      	uxth	r3, r3
 8009262:	4618      	mov	r0, r3
 8009264:	f7fb f99c 	bl	80045a0 <lwip_htons>
 8009268:	4603      	mov	r3, r0
 800926a:	f003 0303 	and.w	r3, r3, #3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <tcp_receive+0xa46>
 8009272:	2301      	movs	r3, #1
 8009274:	e000      	b.n	8009278 <tcp_receive+0xa48>
 8009276:	2300      	movs	r3, #0
 8009278:	4423      	add	r3, r4
 800927a:	b29a      	uxth	r2, r3
 800927c:	4b63      	ldr	r3, [pc, #396]	@ (800940c <tcp_receive+0xbdc>)
 800927e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009280:	4b62      	ldr	r3, [pc, #392]	@ (800940c <tcp_receive+0xbdc>)
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	461a      	mov	r2, r3
 8009286:	4b62      	ldr	r3, [pc, #392]	@ (8009410 <tcp_receive+0xbe0>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	441a      	add	r2, r3
 800928c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	429a      	cmp	r2, r3
 8009294:	d006      	beq.n	80092a4 <tcp_receive+0xa74>
 8009296:	4b60      	ldr	r3, [pc, #384]	@ (8009418 <tcp_receive+0xbe8>)
 8009298:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800929c:	495f      	ldr	r1, [pc, #380]	@ (800941c <tcp_receive+0xbec>)
 800929e:	4860      	ldr	r0, [pc, #384]	@ (8009420 <tcp_receive+0xbf0>)
 80092a0:	f004 fc46 	bl	800db30 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092a8:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80092aa:	4b58      	ldr	r3, [pc, #352]	@ (800940c <tcp_receive+0xbdc>)
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	4b57      	ldr	r3, [pc, #348]	@ (8009410 <tcp_receive+0xbe0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	441a      	add	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80092be:	4b53      	ldr	r3, [pc, #332]	@ (800940c <tcp_receive+0xbdc>)
 80092c0:	881b      	ldrh	r3, [r3, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d206      	bcs.n	80092d4 <tcp_receive+0xaa4>
 80092c6:	4b54      	ldr	r3, [pc, #336]	@ (8009418 <tcp_receive+0xbe8>)
 80092c8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80092cc:	4955      	ldr	r1, [pc, #340]	@ (8009424 <tcp_receive+0xbf4>)
 80092ce:	4854      	ldr	r0, [pc, #336]	@ (8009420 <tcp_receive+0xbf0>)
 80092d0:	f004 fc2e 	bl	800db30 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80092d8:	4b4c      	ldr	r3, [pc, #304]	@ (800940c <tcp_receive+0xbdc>)
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	b29a      	uxth	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7fd f8ef 	bl	80064c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80092ea:	4b4a      	ldr	r3, [pc, #296]	@ (8009414 <tcp_receive+0xbe4>)
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	891b      	ldrh	r3, [r3, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d006      	beq.n	8009302 <tcp_receive+0xad2>
          recv_data = inseg.p;
 80092f4:	4b47      	ldr	r3, [pc, #284]	@ (8009414 <tcp_receive+0xbe4>)
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	4a4b      	ldr	r2, [pc, #300]	@ (8009428 <tcp_receive+0xbf8>)
 80092fa:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80092fc:	4b45      	ldr	r3, [pc, #276]	@ (8009414 <tcp_receive+0xbe4>)
 80092fe:	2200      	movs	r2, #0
 8009300:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009302:	4b44      	ldr	r3, [pc, #272]	@ (8009414 <tcp_receive+0xbe4>)
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	899b      	ldrh	r3, [r3, #12]
 8009308:	b29b      	uxth	r3, r3
 800930a:	4618      	mov	r0, r3
 800930c:	f7fb f948 	bl	80045a0 <lwip_htons>
 8009310:	4603      	mov	r3, r0
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 80b4 	beq.w	8009484 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800931c:	4b43      	ldr	r3, [pc, #268]	@ (800942c <tcp_receive+0xbfc>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	f043 0320 	orr.w	r3, r3, #32
 8009324:	b2da      	uxtb	r2, r3
 8009326:	4b41      	ldr	r3, [pc, #260]	@ (800942c <tcp_receive+0xbfc>)
 8009328:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800932a:	e0ab      	b.n	8009484 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009330:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	4a35      	ldr	r2, [pc, #212]	@ (8009410 <tcp_receive+0xbe0>)
 800933c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	891b      	ldrh	r3, [r3, #8]
 8009342:	461c      	mov	r4, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	899b      	ldrh	r3, [r3, #12]
 800934a:	b29b      	uxth	r3, r3
 800934c:	4618      	mov	r0, r3
 800934e:	f7fb f927 	bl	80045a0 <lwip_htons>
 8009352:	4603      	mov	r3, r0
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <tcp_receive+0xb30>
 800935c:	2301      	movs	r3, #1
 800935e:	e000      	b.n	8009362 <tcp_receive+0xb32>
 8009360:	2300      	movs	r3, #0
 8009362:	191a      	adds	r2, r3, r4
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009368:	441a      	add	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009372:	461c      	mov	r4, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	891b      	ldrh	r3, [r3, #8]
 8009378:	461d      	mov	r5, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	899b      	ldrh	r3, [r3, #12]
 8009380:	b29b      	uxth	r3, r3
 8009382:	4618      	mov	r0, r3
 8009384:	f7fb f90c 	bl	80045a0 <lwip_htons>
 8009388:	4603      	mov	r3, r0
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <tcp_receive+0xb66>
 8009392:	2301      	movs	r3, #1
 8009394:	e000      	b.n	8009398 <tcp_receive+0xb68>
 8009396:	2300      	movs	r3, #0
 8009398:	442b      	add	r3, r5
 800939a:	429c      	cmp	r4, r3
 800939c:	d206      	bcs.n	80093ac <tcp_receive+0xb7c>
 800939e:	4b1e      	ldr	r3, [pc, #120]	@ (8009418 <tcp_receive+0xbe8>)
 80093a0:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 80093a4:	4922      	ldr	r1, [pc, #136]	@ (8009430 <tcp_receive+0xc00>)
 80093a6:	481e      	ldr	r0, [pc, #120]	@ (8009420 <tcp_receive+0xbf0>)
 80093a8:	f004 fbc2 	bl	800db30 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	891b      	ldrh	r3, [r3, #8]
 80093b0:	461c      	mov	r4, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	899b      	ldrh	r3, [r3, #12]
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fb f8f0 	bl	80045a0 <lwip_htons>
 80093c0:	4603      	mov	r3, r0
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <tcp_receive+0xb9e>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e000      	b.n	80093d0 <tcp_receive+0xba0>
 80093ce:	2300      	movs	r3, #0
 80093d0:	1919      	adds	r1, r3, r4
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80093d6:	b28b      	uxth	r3, r1
 80093d8:	1ad3      	subs	r3, r2, r3
 80093da:	b29a      	uxth	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7fd f871 	bl	80064c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	891b      	ldrh	r3, [r3, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d028      	beq.n	8009442 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80093f0:	4b0d      	ldr	r3, [pc, #52]	@ (8009428 <tcp_receive+0xbf8>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01d      	beq.n	8009434 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 80093f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009428 <tcp_receive+0xbf8>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f7fc fade 	bl	80059c4 <pbuf_cat>
 8009408:	e018      	b.n	800943c <tcp_receive+0xc0c>
 800940a:	bf00      	nop
 800940c:	2000834a 	.word	0x2000834a
 8009410:	20008340 	.word	0x20008340
 8009414:	20008320 	.word	0x20008320
 8009418:	0800f850 	.word	0x0800f850
 800941c:	0800fb54 	.word	0x0800fb54
 8009420:	0800f894 	.word	0x0800f894
 8009424:	0800fb90 	.word	0x0800fb90
 8009428:	20008350 	.word	0x20008350
 800942c:	2000834d 	.word	0x2000834d
 8009430:	0800fbb0 	.word	0x0800fbb0
            } else {
              recv_data = cseg->p;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	4a71      	ldr	r2, [pc, #452]	@ (8009600 <tcp_receive+0xdd0>)
 800943a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	899b      	ldrh	r3, [r3, #12]
 8009448:	b29b      	uxth	r3, r3
 800944a:	4618      	mov	r0, r3
 800944c:	f7fb f8a8 	bl	80045a0 <lwip_htons>
 8009450:	4603      	mov	r3, r0
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00d      	beq.n	8009476 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800945a:	4b6a      	ldr	r3, [pc, #424]	@ (8009604 <tcp_receive+0xdd4>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f043 0320 	orr.w	r3, r3, #32
 8009462:	b2da      	uxtb	r2, r3
 8009464:	4b67      	ldr	r3, [pc, #412]	@ (8009604 <tcp_receive+0xdd4>)
 8009466:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	7d1b      	ldrb	r3, [r3, #20]
 800946c:	2b04      	cmp	r3, #4
 800946e:	d102      	bne.n	8009476 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2207      	movs	r2, #7
 8009474:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f7fd fcb4 	bl	8006dec <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009488:	2b00      	cmp	r3, #0
 800948a:	d008      	beq.n	800949e <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	685a      	ldr	r2, [r3, #4]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8009498:	429a      	cmp	r2, r3
 800949a:	f43f af47 	beq.w	800932c <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	7e9b      	ldrb	r3, [r3, #26]
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00e      	beq.n	80094c8 <tcp_receive+0xc98>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	7e9b      	ldrb	r3, [r3, #26]
 80094ae:	f023 0301 	bic.w	r3, r3, #1
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	769a      	strb	r2, [r3, #26]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	7e9b      	ldrb	r3, [r3, #26]
 80094bc:	f043 0302 	orr.w	r3, r3, #2
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80094c6:	e181      	b.n	80097cc <tcp_receive+0xf9c>
        tcp_ack(pcb);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	7e9b      	ldrb	r3, [r3, #26]
 80094cc:	f043 0301 	orr.w	r3, r3, #1
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80094d6:	e179      	b.n	80097cc <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 f8c1 	bl	800a660 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d106      	bne.n	80094f4 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80094e6:	4848      	ldr	r0, [pc, #288]	@ (8009608 <tcp_receive+0xdd8>)
 80094e8:	f7fd fca6 	bl	8006e38 <tcp_seg_copy>
 80094ec:	4602      	mov	r2, r0
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 80094f2:	e16b      	b.n	80097cc <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 80094f4:	2300      	movs	r3, #0
 80094f6:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094fe:	e150      	b.n	80097a2 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8009500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	4b41      	ldr	r3, [pc, #260]	@ (800960c <tcp_receive+0xddc>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	429a      	cmp	r2, r3
 800950c:	d11d      	bne.n	800954a <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800950e:	4b3e      	ldr	r3, [pc, #248]	@ (8009608 <tcp_receive+0xdd8>)
 8009510:	891a      	ldrh	r2, [r3, #8]
 8009512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009514:	891b      	ldrh	r3, [r3, #8]
 8009516:	429a      	cmp	r2, r3
 8009518:	f240 8148 	bls.w	80097ac <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800951c:	483a      	ldr	r0, [pc, #232]	@ (8009608 <tcp_receive+0xdd8>)
 800951e:	f7fd fc8b 	bl	8006e38 <tcp_seg_copy>
 8009522:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	f000 8142 	beq.w	80097b0 <tcp_receive+0xf80>
                  if (prev != NULL) {
 800952c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952e:	2b00      	cmp	r3, #0
 8009530:	d003      	beq.n	800953a <tcp_receive+0xd0a>
                    prev->next = cseg;
 8009532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	e002      	b.n	8009540 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009540:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff f8fe 	bl	8008744 <tcp_oos_insert_segment>
                }
                break;
 8009548:	e132      	b.n	80097b0 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800954a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954c:	2b00      	cmp	r3, #0
 800954e:	d117      	bne.n	8009580 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009550:	4b2e      	ldr	r3, [pc, #184]	@ (800960c <tcp_receive+0xddc>)
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	2b00      	cmp	r3, #0
 800955e:	da57      	bge.n	8009610 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8009560:	4829      	ldr	r0, [pc, #164]	@ (8009608 <tcp_receive+0xdd8>)
 8009562:	f7fd fc69 	bl	8006e38 <tcp_seg_copy>
 8009566:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 8122 	beq.w	80097b4 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 8009576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff f8e3 	bl	8008744 <tcp_oos_insert_segment>
                  }
                  break;
 800957e:	e119      	b.n	80097b4 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8009580:	4b22      	ldr	r3, [pc, #136]	@ (800960c <tcp_receive+0xddc>)
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	3b01      	subs	r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	db3e      	blt.n	8009610 <tcp_receive+0xde0>
 8009592:	4b1e      	ldr	r3, [pc, #120]	@ (800960c <tcp_receive+0xddc>)
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	3301      	adds	r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	dc35      	bgt.n	8009610 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80095a4:	4818      	ldr	r0, [pc, #96]	@ (8009608 <tcp_receive+0xdd8>)
 80095a6:	f7fd fc47 	bl	8006e38 <tcp_seg_copy>
 80095aa:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 8102 	beq.w	80097b8 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80095b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095bc:	8912      	ldrh	r2, [r2, #8]
 80095be:	441a      	add	r2, r3
 80095c0:	4b12      	ldr	r3, [pc, #72]	@ (800960c <tcp_receive+0xddc>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	dd12      	ble.n	80095f0 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80095ca:	4b10      	ldr	r3, [pc, #64]	@ (800960c <tcp_receive+0xddc>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	b29a      	uxth	r2, r3
 80095dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095de:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80095e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e6:	891b      	ldrh	r3, [r3, #8]
 80095e8:	4619      	mov	r1, r3
 80095ea:	4610      	mov	r0, r2
 80095ec:	f7fb ffaa 	bl	8005544 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80095f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80095f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff f8a3 	bl	8008744 <tcp_oos_insert_segment>
                  }
                  break;
 80095fe:	e0db      	b.n	80097b8 <tcp_receive+0xf88>
 8009600:	20008350 	.word	0x20008350
 8009604:	2000834d 	.word	0x2000834d
 8009608:	20008320 	.word	0x20008320
 800960c:	20008340 	.word	0x20008340
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f040 80bf 	bne.w	8009798 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800961a:	4b7c      	ldr	r3, [pc, #496]	@ (800980c <tcp_receive+0xfdc>)
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009626:	2b00      	cmp	r3, #0
 8009628:	f340 80b6 	ble.w	8009798 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800962c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	899b      	ldrh	r3, [r3, #12]
 8009632:	b29b      	uxth	r3, r3
 8009634:	4618      	mov	r0, r3
 8009636:	f7fa ffb3 	bl	80045a0 <lwip_htons>
 800963a:	4603      	mov	r3, r0
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	f040 80bb 	bne.w	80097bc <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009646:	4872      	ldr	r0, [pc, #456]	@ (8009810 <tcp_receive+0xfe0>)
 8009648:	f7fd fbf6 	bl	8006e38 <tcp_seg_copy>
 800964c:	4602      	mov	r2, r0
 800964e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009650:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 80b2 	beq.w	80097c0 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800965c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009664:	8912      	ldrh	r2, [r2, #8]
 8009666:	441a      	add	r2, r3
 8009668:	4b68      	ldr	r3, [pc, #416]	@ (800980c <tcp_receive+0xfdc>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	dd12      	ble.n	8009698 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009672:	4b66      	ldr	r3, [pc, #408]	@ (800980c <tcp_receive+0xfdc>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	b29a      	uxth	r2, r3
 8009678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	b29b      	uxth	r3, r3
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	b29a      	uxth	r2, r3
 8009684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009686:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968e:	891b      	ldrh	r3, [r3, #8]
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f7fb ff56 	bl	8005544 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009698:	4b5e      	ldr	r3, [pc, #376]	@ (8009814 <tcp_receive+0xfe4>)
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	4b5b      	ldr	r3, [pc, #364]	@ (800980c <tcp_receive+0xfdc>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	441a      	add	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80096ac:	440b      	add	r3, r1
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f340 8085 	ble.w	80097c0 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80096b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	899b      	ldrh	r3, [r3, #12]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fa ff6d 	bl	80045a0 <lwip_htons>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01e      	beq.n	800970e <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	899b      	ldrh	r3, [r3, #12]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80096de:	b29c      	uxth	r4, r3
 80096e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	899b      	ldrh	r3, [r3, #12]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fa ff58 	bl	80045a0 <lwip_htons>
 80096f0:	4603      	mov	r3, r0
 80096f2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fa ff51 	bl	80045a0 <lwip_htons>
 80096fe:	4603      	mov	r3, r0
 8009700:	461a      	mov	r2, r3
 8009702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	4322      	orrs	r2, r4
 800970a:	b292      	uxth	r2, r2
 800970c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009712:	b29a      	uxth	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009718:	4413      	add	r3, r2
 800971a:	b299      	uxth	r1, r3
 800971c:	4b3b      	ldr	r3, [pc, #236]	@ (800980c <tcp_receive+0xfdc>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	b29a      	uxth	r2, r3
 8009722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	1a8a      	subs	r2, r1, r2
 8009728:	b292      	uxth	r2, r2
 800972a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800972c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	891b      	ldrh	r3, [r3, #8]
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7fb ff02 	bl	8005544 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	891c      	ldrh	r4, [r3, #8]
 8009746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	899b      	ldrh	r3, [r3, #12]
 800974e:	b29b      	uxth	r3, r3
 8009750:	4618      	mov	r0, r3
 8009752:	f7fa ff25 	bl	80045a0 <lwip_htons>
 8009756:	4603      	mov	r3, r0
 8009758:	f003 0303 	and.w	r3, r3, #3
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <tcp_receive+0xf34>
 8009760:	2301      	movs	r3, #1
 8009762:	e000      	b.n	8009766 <tcp_receive+0xf36>
 8009764:	2300      	movs	r3, #0
 8009766:	4423      	add	r3, r4
 8009768:	b29a      	uxth	r2, r3
 800976a:	4b2a      	ldr	r3, [pc, #168]	@ (8009814 <tcp_receive+0xfe4>)
 800976c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800976e:	4b29      	ldr	r3, [pc, #164]	@ (8009814 <tcp_receive+0xfe4>)
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	4b25      	ldr	r3, [pc, #148]	@ (800980c <tcp_receive+0xfdc>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	441a      	add	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009782:	440b      	add	r3, r1
 8009784:	429a      	cmp	r2, r3
 8009786:	d01b      	beq.n	80097c0 <tcp_receive+0xf90>
 8009788:	4b23      	ldr	r3, [pc, #140]	@ (8009818 <tcp_receive+0xfe8>)
 800978a:	f240 627a 	movw	r2, #1658	@ 0x67a
 800978e:	4923      	ldr	r1, [pc, #140]	@ (800981c <tcp_receive+0xfec>)
 8009790:	4823      	ldr	r0, [pc, #140]	@ (8009820 <tcp_receive+0xff0>)
 8009792:	f004 f9cd 	bl	800db30 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009796:	e013      	b.n	80097c0 <tcp_receive+0xf90>
              }
            }
            prev = next;
 8009798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979a:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800979c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f47f aeab 	bne.w	8009500 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 80097aa:	e00f      	b.n	80097cc <tcp_receive+0xf9c>
                break;
 80097ac:	bf00      	nop
 80097ae:	e00d      	b.n	80097cc <tcp_receive+0xf9c>
                break;
 80097b0:	bf00      	nop
 80097b2:	e00b      	b.n	80097cc <tcp_receive+0xf9c>
                  break;
 80097b4:	bf00      	nop
 80097b6:	e009      	b.n	80097cc <tcp_receive+0xf9c>
                  break;
 80097b8:	bf00      	nop
 80097ba:	e007      	b.n	80097cc <tcp_receive+0xf9c>
                  break;
 80097bc:	bf00      	nop
 80097be:	e005      	b.n	80097cc <tcp_receive+0xf9c>
                break;
 80097c0:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80097c2:	e003      	b.n	80097cc <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 ff4b 	bl	800a660 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80097ca:	e01a      	b.n	8009802 <tcp_receive+0xfd2>
 80097cc:	e019      	b.n	8009802 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80097ce:	4b0f      	ldr	r3, [pc, #60]	@ (800980c <tcp_receive+0xfdc>)
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d6:	1ad3      	subs	r3, r2, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	db0a      	blt.n	80097f2 <tcp_receive+0xfc2>
 80097dc:	4b0b      	ldr	r3, [pc, #44]	@ (800980c <tcp_receive+0xfdc>)
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80097e8:	440b      	add	r3, r1
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	3301      	adds	r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	dd07      	ble.n	8009802 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	7e9b      	ldrb	r3, [r3, #26]
 80097f6:	f043 0302 	orr.w	r3, r3, #2
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8009800:	e7ff      	b.n	8009802 <tcp_receive+0xfd2>
 8009802:	bf00      	nop
 8009804:	3734      	adds	r7, #52	@ 0x34
 8009806:	46bd      	mov	sp, r7
 8009808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800980a:	bf00      	nop
 800980c:	20008340 	.word	0x20008340
 8009810:	20008320 	.word	0x20008320
 8009814:	2000834a 	.word	0x2000834a
 8009818:	0800f850 	.word	0x0800f850
 800981c:	0800fb1c 	.word	0x0800fb1c
 8009820:	0800f894 	.word	0x0800f894

08009824 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800982a:	4b17      	ldr	r3, [pc, #92]	@ (8009888 <tcp_getoptbyte+0x64>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d005      	beq.n	800983e <tcp_getoptbyte+0x1a>
 8009832:	4b16      	ldr	r3, [pc, #88]	@ (800988c <tcp_getoptbyte+0x68>)
 8009834:	881a      	ldrh	r2, [r3, #0]
 8009836:	4b16      	ldr	r3, [pc, #88]	@ (8009890 <tcp_getoptbyte+0x6c>)
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d20e      	bcs.n	800985c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800983e:	4b15      	ldr	r3, [pc, #84]	@ (8009894 <tcp_getoptbyte+0x70>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3314      	adds	r3, #20
 8009844:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8009846:	4b11      	ldr	r3, [pc, #68]	@ (800988c <tcp_getoptbyte+0x68>)
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	1c5a      	adds	r2, r3, #1
 800984c:	b291      	uxth	r1, r2
 800984e:	4a0f      	ldr	r2, [pc, #60]	@ (800988c <tcp_getoptbyte+0x68>)
 8009850:	8011      	strh	r1, [r2, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	4413      	add	r3, r2
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	e010      	b.n	800987e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800985c:	4b0b      	ldr	r3, [pc, #44]	@ (800988c <tcp_getoptbyte+0x68>)
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	b291      	uxth	r1, r2
 8009864:	4a09      	ldr	r2, [pc, #36]	@ (800988c <tcp_getoptbyte+0x68>)
 8009866:	8011      	strh	r1, [r2, #0]
 8009868:	b2da      	uxtb	r2, r3
 800986a:	4b09      	ldr	r3, [pc, #36]	@ (8009890 <tcp_getoptbyte+0x6c>)
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	b2db      	uxtb	r3, r3
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8009874:	4b04      	ldr	r3, [pc, #16]	@ (8009888 <tcp_getoptbyte+0x64>)
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	4413      	add	r3, r2
 800987c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800987e:	4618      	mov	r0, r3
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr
 8009888:	20008338 	.word	0x20008338
 800988c:	2000833c 	.word	0x2000833c
 8009890:	20008336 	.word	0x20008336
 8009894:	20008330 	.word	0x20008330

08009898 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80098a0:	4b2e      	ldr	r3, [pc, #184]	@ (800995c <tcp_parseopt+0xc4>)
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d056      	beq.n	8009956 <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80098a8:	4b2d      	ldr	r3, [pc, #180]	@ (8009960 <tcp_parseopt+0xc8>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	801a      	strh	r2, [r3, #0]
 80098ae:	e046      	b.n	800993e <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 80098b0:	f7ff ffb8 	bl	8009824 <tcp_getoptbyte>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d006      	beq.n	80098cc <tcp_parseopt+0x34>
 80098be:	2b02      	cmp	r3, #2
 80098c0:	dc2a      	bgt.n	8009918 <tcp_parseopt+0x80>
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d042      	beq.n	800994c <tcp_parseopt+0xb4>
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d038      	beq.n	800993c <tcp_parseopt+0xa4>
 80098ca:	e025      	b.n	8009918 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80098cc:	f7ff ffaa 	bl	8009824 <tcp_getoptbyte>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d13c      	bne.n	8009950 <tcp_parseopt+0xb8>
 80098d6:	4b22      	ldr	r3, [pc, #136]	@ (8009960 <tcp_parseopt+0xc8>)
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	3301      	adds	r3, #1
 80098dc:	4a1f      	ldr	r2, [pc, #124]	@ (800995c <tcp_parseopt+0xc4>)
 80098de:	8812      	ldrh	r2, [r2, #0]
 80098e0:	4293      	cmp	r3, r2
 80098e2:	da35      	bge.n	8009950 <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80098e4:	f7ff ff9e 	bl	8009824 <tcp_getoptbyte>
 80098e8:	4603      	mov	r3, r0
 80098ea:	021b      	lsls	r3, r3, #8
 80098ec:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80098ee:	f7ff ff99 	bl	8009824 <tcp_getoptbyte>
 80098f2:	4603      	mov	r3, r0
 80098f4:	461a      	mov	r2, r3
 80098f6:	89bb      	ldrh	r3, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80098fc:	89bb      	ldrh	r3, [r7, #12]
 80098fe:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009902:	d804      	bhi.n	800990e <tcp_parseopt+0x76>
 8009904:	89bb      	ldrh	r3, [r7, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <tcp_parseopt+0x76>
 800990a:	89ba      	ldrh	r2, [r7, #12]
 800990c:	e001      	b.n	8009912 <tcp_parseopt+0x7a>
 800990e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 8009916:	e012      	b.n	800993e <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8009918:	f7ff ff84 	bl	8009824 <tcp_getoptbyte>
 800991c:	4603      	mov	r3, r0
 800991e:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8009920:	7afb      	ldrb	r3, [r7, #11]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d916      	bls.n	8009954 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009926:	7afb      	ldrb	r3, [r7, #11]
 8009928:	b29a      	uxth	r2, r3
 800992a:	4b0d      	ldr	r3, [pc, #52]	@ (8009960 <tcp_parseopt+0xc8>)
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	4413      	add	r3, r2
 8009930:	b29b      	uxth	r3, r3
 8009932:	3b02      	subs	r3, #2
 8009934:	b29a      	uxth	r2, r3
 8009936:	4b0a      	ldr	r3, [pc, #40]	@ (8009960 <tcp_parseopt+0xc8>)
 8009938:	801a      	strh	r2, [r3, #0]
 800993a:	e000      	b.n	800993e <tcp_parseopt+0xa6>
        break;
 800993c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800993e:	4b08      	ldr	r3, [pc, #32]	@ (8009960 <tcp_parseopt+0xc8>)
 8009940:	881a      	ldrh	r2, [r3, #0]
 8009942:	4b06      	ldr	r3, [pc, #24]	@ (800995c <tcp_parseopt+0xc4>)
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d3b2      	bcc.n	80098b0 <tcp_parseopt+0x18>
 800994a:	e004      	b.n	8009956 <tcp_parseopt+0xbe>
        return;
 800994c:	bf00      	nop
 800994e:	e002      	b.n	8009956 <tcp_parseopt+0xbe>
          return;
 8009950:	bf00      	nop
 8009952:	e000      	b.n	8009956 <tcp_parseopt+0xbe>
          return;
 8009954:	bf00      	nop
      }
    }
  }
}
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20008334 	.word	0x20008334
 8009960:	2000833c 	.word	0x2000833c

08009964 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009964:	b480      	push	{r7}
 8009966:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009968:	4b05      	ldr	r3, [pc, #20]	@ (8009980 <tcp_trigger_input_pcb_close+0x1c>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f043 0310 	orr.w	r3, r3, #16
 8009970:	b2da      	uxtb	r2, r3
 8009972:	4b03      	ldr	r3, [pc, #12]	@ (8009980 <tcp_trigger_input_pcb_close+0x1c>)
 8009974:	701a      	strb	r2, [r3, #0]
}
 8009976:	bf00      	nop
 8009978:	46bd      	mov	sp, r7
 800997a:	bc80      	pop	{r7}
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	2000834d 	.word	0x2000834d

08009984 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	607b      	str	r3, [r7, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	817b      	strh	r3, [r7, #10]
 8009992:	4613      	mov	r3, r2
 8009994:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009996:	897a      	ldrh	r2, [r7, #10]
 8009998:	893b      	ldrh	r3, [r7, #8]
 800999a:	4413      	add	r3, r2
 800999c:	b29b      	uxth	r3, r3
 800999e:	3314      	adds	r3, #20
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2200      	movs	r2, #0
 80099a4:	4619      	mov	r1, r3
 80099a6:	2001      	movs	r0, #1
 80099a8:	f7fb fbc8 	bl	800513c <pbuf_alloc>
 80099ac:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d056      	beq.n	8009a62 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80099b4:	897b      	ldrh	r3, [r7, #10]
 80099b6:	3313      	adds	r3, #19
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	8952      	ldrh	r2, [r2, #10]
 80099bc:	4293      	cmp	r3, r2
 80099be:	db05      	blt.n	80099cc <tcp_output_alloc_header+0x48>
 80099c0:	4b2a      	ldr	r3, [pc, #168]	@ (8009a6c <tcp_output_alloc_header+0xe8>)
 80099c2:	2272      	movs	r2, #114	@ 0x72
 80099c4:	492a      	ldr	r1, [pc, #168]	@ (8009a70 <tcp_output_alloc_header+0xec>)
 80099c6:	482b      	ldr	r0, [pc, #172]	@ (8009a74 <tcp_output_alloc_header+0xf0>)
 80099c8:	f004 f8b2 	bl	800db30 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	8adb      	ldrh	r3, [r3, #22]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f7fa fde2 	bl	80045a0 <lwip_htons>
 80099dc:	4603      	mov	r3, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	8b1b      	ldrh	r3, [r3, #24]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fa fdd9 	bl	80045a0 <lwip_htons>
 80099ee:	4603      	mov	r3, r0
 80099f0:	461a      	mov	r2, r3
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fa fdda 	bl	80045ba <lwip_htonl>
 8009a06:	4602      	mov	r2, r0
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009a0c:	897b      	ldrh	r3, [r7, #10]
 8009a0e:	089b      	lsrs	r3, r3, #2
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	3305      	adds	r3, #5
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	031b      	lsls	r3, r3, #12
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	f043 0310 	orr.w	r3, r3, #16
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fa fdbd 	bl	80045a0 <lwip_htons>
 8009a26:	4603      	mov	r3, r0
 8009a28:	461a      	mov	r2, r3
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7fa fdb4 	bl	80045a0 <lwip_htons>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2200      	movs	r2, #0
 8009a44:	741a      	strb	r2, [r3, #16]
 8009a46:	2200      	movs	r2, #0
 8009a48:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	749a      	strb	r2, [r3, #18]
 8009a50:	2200      	movs	r2, #0
 8009a52:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8009a5c:	441a      	add	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8009a62:	697b      	ldr	r3, [r7, #20]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	0800fbd8 	.word	0x0800fbd8
 8009a70:	0800fc0c 	.word	0x0800fc0c
 8009a74:	0800fc3c 	.word	0x0800fc3c

08009a78 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d02d      	beq.n	8009ae4 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a8c:	60fb      	str	r3, [r7, #12]
 8009a8e:	e002      	b.n	8009a96 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1f8      	bne.n	8009a90 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	899b      	ldrh	r3, [r3, #12]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fa fd7a 	bl	80045a0 <lwip_htons>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f003 0307 	and.w	r3, r3, #7
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d116      	bne.n	8009ae4 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	899b      	ldrh	r3, [r3, #12]
 8009abc:	b29c      	uxth	r4, r3
 8009abe:	2001      	movs	r0, #1
 8009ac0:	f7fa fd6e 	bl	80045a0 <lwip_htons>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	4322      	orrs	r2, r4
 8009ace:	b292      	uxth	r2, r2
 8009ad0:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	7e9b      	ldrb	r3, [r3, #26]
 8009ad6:	f043 0320 	orr.w	r3, r3, #32
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	e004      	b.n	8009aee <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fcbe 	bl	800a468 <tcp_enqueue_flags>
 8009aec:	4603      	mov	r3, r0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd90      	pop	{r4, r7, pc}
	...

08009af8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009af8:	b590      	push	{r4, r7, lr}
 8009afa:	b087      	sub	sp, #28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	603b      	str	r3, [r7, #0]
 8009b04:	4613      	mov	r3, r2
 8009b06:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009b08:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009b16:	2003      	movs	r0, #3
 8009b18:	f7fb f920 	bl	8004d5c <memp_malloc>
 8009b1c:	6138      	str	r0, [r7, #16]
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d104      	bne.n	8009b2e <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009b24:	68b8      	ldr	r0, [r7, #8]
 8009b26:	f7fb fe81 	bl	800582c <pbuf_free>
    return NULL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	e060      	b.n	8009bf0 <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8009b34:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	891a      	ldrh	r2, [r3, #8]
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d205      	bcs.n	8009b5a <tcp_create_segment+0x62>
 8009b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8009bf8 <tcp_create_segment+0x100>)
 8009b50:	22ba      	movs	r2, #186	@ 0xba
 8009b52:	492a      	ldr	r1, [pc, #168]	@ (8009bfc <tcp_create_segment+0x104>)
 8009b54:	482a      	ldr	r0, [pc, #168]	@ (8009c00 <tcp_create_segment+0x108>)
 8009b56:	f003 ffeb 	bl	800db30 <iprintf>
  seg->len = p->tot_len - optlen;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	891a      	ldrh	r2, [r3, #8]
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8009b6a:	2114      	movs	r1, #20
 8009b6c:	68b8      	ldr	r0, [r7, #8]
 8009b6e:	f7fb fe39 	bl	80057e4 <pbuf_header>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d004      	beq.n	8009b82 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009b78:	6938      	ldr	r0, [r7, #16]
 8009b7a:	f7fd f937 	bl	8006dec <tcp_seg_free>
    return NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e036      	b.n	8009bf0 <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	8ada      	ldrh	r2, [r3, #22]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	68dc      	ldr	r4, [r3, #12]
 8009b94:	4610      	mov	r0, r2
 8009b96:	f7fa fd03 	bl	80045a0 <lwip_htons>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8b1a      	ldrh	r2, [r3, #24]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	68dc      	ldr	r4, [r3, #12]
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	f7fa fcfa 	bl	80045a0 <lwip_htons>
 8009bac:	4603      	mov	r3, r0
 8009bae:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	68dc      	ldr	r4, [r3, #12]
 8009bb4:	6838      	ldr	r0, [r7, #0]
 8009bb6:	f7fa fd00 	bl	80045ba <lwip_htonl>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	089b      	lsrs	r3, r3, #2
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	3305      	adds	r3, #5
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	031b      	lsls	r3, r3, #12
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	79fb      	ldrb	r3, [r7, #7]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	68dc      	ldr	r4, [r3, #12]
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7fa fce1 	bl	80045a0 <lwip_htons>
 8009bde:	4603      	mov	r3, r0
 8009be0:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	749a      	strb	r2, [r3, #18]
 8009bea:	2200      	movs	r2, #0
 8009bec:	74da      	strb	r2, [r3, #19]
  return seg;
 8009bee:	693b      	ldr	r3, [r7, #16]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	371c      	adds	r7, #28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd90      	pop	{r4, r7, pc}
 8009bf8:	0800fbd8 	.word	0x0800fbd8
 8009bfc:	0800fc64 	.word	0x0800fc64
 8009c00:	0800fc3c 	.word	0x0800fc3c

08009c04 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	607b      	str	r3, [r7, #4]
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73fb      	strb	r3, [r7, #15]
 8009c10:	460b      	mov	r3, r1
 8009c12:	81bb      	strh	r3, [r7, #12]
 8009c14:	4613      	mov	r3, r2
 8009c16:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009c18:	89bb      	ldrh	r3, [r7, #12]
 8009c1a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009c1c:	89ba      	ldrh	r2, [r7, #12]
 8009c1e:	897b      	ldrh	r3, [r7, #10]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d221      	bcs.n	8009c68 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009c24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009c28:	f003 0302 	and.w	r3, r3, #2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d111      	bne.n	8009c54 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	7e9b      	ldrb	r3, [r3, #26]
 8009c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d115      	bne.n	8009c68 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8009c3c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d007      	beq.n	8009c54 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009c44:	6a3b      	ldr	r3, [r7, #32]
 8009c46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
         (!first_seg ||
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d103      	bne.n	8009c54 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
          pcb->unsent != NULL ||
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d009      	beq.n	8009c68 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009c54:	89bb      	ldrh	r3, [r7, #12]
 8009c56:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8009c5a:	f023 0203 	bic.w	r2, r3, #3
 8009c5e:	897b      	ldrh	r3, [r7, #10]
 8009c60:	4293      	cmp	r3, r2
 8009c62:	bf28      	it	cs
 8009c64:	4613      	movcs	r3, r2
 8009c66:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009c68:	8af9      	ldrh	r1, [r7, #22]
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fb fa64 	bl	800513c <pbuf_alloc>
 8009c74:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e019      	b.n	8009cb4 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d006      	beq.n	8009c96 <tcp_pbuf_prealloc+0x92>
 8009c88:	4b0c      	ldr	r3, [pc, #48]	@ (8009cbc <tcp_pbuf_prealloc+0xb8>)
 8009c8a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8009c8e:	490c      	ldr	r1, [pc, #48]	@ (8009cc0 <tcp_pbuf_prealloc+0xbc>)
 8009c90:	480c      	ldr	r0, [pc, #48]	@ (8009cc4 <tcp_pbuf_prealloc+0xc0>)
 8009c92:	f003 ff4d 	bl	800db30 <iprintf>
  *oversize = p->len - length;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	895a      	ldrh	r2, [r3, #10]
 8009c9a:	89bb      	ldrh	r3, [r7, #12]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	89ba      	ldrh	r2, [r7, #12]
 8009ca8:	811a      	strh	r2, [r3, #8]
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	891a      	ldrh	r2, [r3, #8]
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	815a      	strh	r2, [r3, #10]
  return p;
 8009cb2:	693b      	ldr	r3, [r7, #16]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	0800fbd8 	.word	0x0800fbd8
 8009cc0:	0800fc7c 	.word	0x0800fc7c
 8009cc4:	0800fc3c 	.word	0x0800fc3c

08009cc8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	7d1b      	ldrb	r3, [r3, #20]
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d00e      	beq.n	8009cfa <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009ce0:	2b07      	cmp	r3, #7
 8009ce2:	d00a      	beq.n	8009cfa <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d006      	beq.n	8009cfa <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d002      	beq.n	8009cfa <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009cf4:	f06f 030a 	mvn.w	r3, #10
 8009cf8:	e04f      	b.n	8009d9a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8009cfa:	887b      	ldrh	r3, [r7, #2]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <tcp_write_checks+0x3c>
    return ERR_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	e04a      	b.n	8009d9a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d0a:	887a      	ldrh	r2, [r7, #2]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d909      	bls.n	8009d24 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	7e9b      	ldrb	r3, [r3, #26]
 8009d14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d22:	e03a      	b.n	8009d9a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d2a:	2b08      	cmp	r3, #8
 8009d2c:	d806      	bhi.n	8009d3c <tcp_write_checks+0x74>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d34:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d909      	bls.n	8009d50 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	7e9b      	ldrb	r3, [r3, #26]
 8009d40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4e:	e024      	b.n	8009d9a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00f      	beq.n	8009d7a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d11a      	bne.n	8009d98 <tcp_write_checks+0xd0>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d116      	bne.n	8009d98 <tcp_write_checks+0xd0>
 8009d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8009da4 <tcp_write_checks+0xdc>)
 8009d6c:	f240 1255 	movw	r2, #341	@ 0x155
 8009d70:	490d      	ldr	r1, [pc, #52]	@ (8009da8 <tcp_write_checks+0xe0>)
 8009d72:	480e      	ldr	r0, [pc, #56]	@ (8009dac <tcp_write_checks+0xe4>)
 8009d74:	f003 fedc 	bl	800db30 <iprintf>
 8009d78:	e00e      	b.n	8009d98 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d103      	bne.n	8009d8a <tcp_write_checks+0xc2>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d006      	beq.n	8009d98 <tcp_write_checks+0xd0>
 8009d8a:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <tcp_write_checks+0xdc>)
 8009d8c:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8009d90:	4907      	ldr	r1, [pc, #28]	@ (8009db0 <tcp_write_checks+0xe8>)
 8009d92:	4806      	ldr	r0, [pc, #24]	@ (8009dac <tcp_write_checks+0xe4>)
 8009d94:	f003 fecc 	bl	800db30 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	0800fbd8 	.word	0x0800fbd8
 8009da8:	0800fc90 	.word	0x0800fc90
 8009dac:	0800fc3c 	.word	0x0800fc3c
 8009db0:	0800fccc 	.word	0x0800fccc

08009db4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009db4:	b590      	push	{r4, r7, lr}
 8009db6:	b09b      	sub	sp, #108	@ 0x6c
 8009db8:	af04      	add	r7, sp, #16
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	80fb      	strh	r3, [r7, #6]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dda:	2300      	movs	r3, #0
 8009ddc:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009dde:	2300      	movs	r3, #0
 8009de0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u8_t optflags = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8009df4:	2300      	movs	r3, #0
 8009df6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e02:	085b      	lsrs	r3, r3, #1
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	bf28      	it	cs
 8009e0e:	4613      	movcs	r3, r2
 8009e10:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8009e12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d102      	bne.n	8009e1e <tcp_write+0x6a>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009e1c:	e000      	b.n	8009e20 <tcp_write+0x6c>
 8009e1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009e20:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <tcp_write+0x88>
 8009e28:	4b92      	ldr	r3, [pc, #584]	@ (800a074 <tcp_write+0x2c0>)
 8009e2a:	f240 1291 	movw	r2, #401	@ 0x191
 8009e2e:	4992      	ldr	r1, [pc, #584]	@ (800a078 <tcp_write+0x2c4>)
 8009e30:	4892      	ldr	r0, [pc, #584]	@ (800a07c <tcp_write+0x2c8>)
 8009e32:	f003 fe7d 	bl	800db30 <iprintf>
 8009e36:	f06f 030f 	mvn.w	r3, #15
 8009e3a:	e30a      	b.n	800a452 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8009e3c:	88fb      	ldrh	r3, [r7, #6]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff ff41 	bl	8009cc8 <tcp_write_checks>
 8009e46:	4603      	mov	r3, r0
 8009e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8009e4c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <tcp_write+0xa6>
    return err;
 8009e54:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8009e58:	e2fb      	b.n	800a452 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009e60:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 80f4 	beq.w	800a056 <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e74:	e002      	b.n	8009e7c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8009e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1f8      	bne.n	8009e76 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8009e84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e86:	7a9b      	ldrb	r3, [r3, #10]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	f003 0304 	and.w	r3, r3, #4
 8009e90:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009e92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e96:	891b      	ldrh	r3, [r3, #8]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	8c3b      	ldrh	r3, [r7, #32]
 8009e9c:	440b      	add	r3, r1
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	da06      	bge.n	8009eb0 <tcp_write+0xfc>
 8009ea2:	4b74      	ldr	r3, [pc, #464]	@ (800a074 <tcp_write+0x2c0>)
 8009ea4:	f240 12c7 	movw	r2, #455	@ 0x1c7
 8009ea8:	4975      	ldr	r1, [pc, #468]	@ (800a080 <tcp_write+0x2cc>)
 8009eaa:	4874      	ldr	r0, [pc, #464]	@ (800a07c <tcp_write+0x2c8>)
 8009eac:	f003 fe40 	bl	800db30 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009eb2:	891a      	ldrh	r2, [r3, #8]
 8009eb4:	8c3b      	ldrh	r3, [r7, #32]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009ec6:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009ec8:	8a7b      	ldrh	r3, [r7, #18]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d026      	beq.n	8009f1c <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009ece:	8a7b      	ldrh	r3, [r7, #18]
 8009ed0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d206      	bcs.n	8009ee4 <tcp_write+0x130>
 8009ed6:	4b67      	ldr	r3, [pc, #412]	@ (800a074 <tcp_write+0x2c0>)
 8009ed8:	f240 12d9 	movw	r2, #473	@ 0x1d9
 8009edc:	4969      	ldr	r1, [pc, #420]	@ (800a084 <tcp_write+0x2d0>)
 8009ede:	4867      	ldr	r0, [pc, #412]	@ (800a07c <tcp_write+0x2c8>)
 8009ee0:	f003 fe26 	bl	800db30 <iprintf>
      seg = last_unsent;
 8009ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009ee8:	8a7b      	ldrh	r3, [r7, #18]
 8009eea:	88fa      	ldrh	r2, [r7, #6]
 8009eec:	4293      	cmp	r3, r2
 8009eee:	bf28      	it	cs
 8009ef0:	4613      	movcs	r3, r2
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	bf28      	it	cs
 8009efa:	4613      	movcs	r3, r2
 8009efc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8009efe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009f02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f04:	4413      	add	r3, r2
 8009f06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8009f0a:	8a7a      	ldrh	r2, [r7, #18]
 8009f0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8009f14:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009f16:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009f1c:	8a7b      	ldrh	r3, [r7, #18]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00b      	beq.n	8009f3a <tcp_write+0x186>
 8009f22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009f26:	88fb      	ldrh	r3, [r7, #6]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d006      	beq.n	8009f3a <tcp_write+0x186>
 8009f2c:	4b51      	ldr	r3, [pc, #324]	@ (800a074 <tcp_write+0x2c0>)
 8009f2e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009f32:	4955      	ldr	r1, [pc, #340]	@ (800a088 <tcp_write+0x2d4>)
 8009f34:	4851      	ldr	r0, [pc, #324]	@ (800a07c <tcp_write+0x2c8>)
 8009f36:	f003 fdfb 	bl	800db30 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009f3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	f080 8169 	bcs.w	800a218 <tcp_write+0x464>
 8009f46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 8165 	beq.w	800a218 <tcp_write+0x464>
 8009f4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f50:	891b      	ldrh	r3, [r3, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 8160 	beq.w	800a218 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009f58:	88fa      	ldrh	r2, [r7, #6]
 8009f5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009f5e:	1ad2      	subs	r2, r2, r3
 8009f60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009f62:	4293      	cmp	r3, r2
 8009f64:	bfa8      	it	ge
 8009f66:	4613      	movge	r3, r2
 8009f68:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8009f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009f6e:	797b      	ldrb	r3, [r7, #5]
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d027      	beq.n	8009fc8 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009f78:	f107 0012 	add.w	r0, r7, #18
 8009f7c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009f7e:	8bf9      	ldrh	r1, [r7, #30]
 8009f80:	2301      	movs	r3, #1
 8009f82:	9302      	str	r3, [sp, #8]
 8009f84:	797b      	ldrb	r3, [r7, #5]
 8009f86:	9301      	str	r3, [sp, #4]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2004      	movs	r0, #4
 8009f90:	f7ff fe38 	bl	8009c04 <tcp_pbuf_prealloc>
 8009f94:	6578      	str	r0, [r7, #84]	@ 0x54
 8009f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 8228 	beq.w	800a3ee <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fa0:	6858      	ldr	r0, [r3, #4]
 8009fa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	4413      	add	r3, r2
 8009faa:	8bfa      	ldrh	r2, [r7, #30]
 8009fac:	4619      	mov	r1, r3
 8009fae:	f003 feb8 	bl	800dd22 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009fb2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009fb4:	f7fb fcce 	bl	8005954 <pbuf_clen>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009fc6:	e03f      	b.n	800a048 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fce:	e002      	b.n	8009fd6 <tcp_write+0x222>
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1f8      	bne.n	8009fd0 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe0:	7b1b      	ldrb	r3, [r3, #12]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d115      	bne.n	800a012 <tcp_write+0x25e>
 8009fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fec:	8952      	ldrh	r2, [r2, #10]
 8009fee:	4413      	add	r3, r2
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d10d      	bne.n	800a012 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009ff6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d006      	beq.n	800a00c <tcp_write+0x258>
 8009ffe:	4b1d      	ldr	r3, [pc, #116]	@ (800a074 <tcp_write+0x2c0>)
 800a000:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800a004:	4921      	ldr	r1, [pc, #132]	@ (800a08c <tcp_write+0x2d8>)
 800a006:	481d      	ldr	r0, [pc, #116]	@ (800a07c <tcp_write+0x2c8>)
 800a008:	f003 fd92 	bl	800db30 <iprintf>
          extendlen = seglen;
 800a00c:	8bfb      	ldrh	r3, [r7, #30]
 800a00e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a010:	e01a      	b.n	800a048 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a012:	8bfb      	ldrh	r3, [r7, #30]
 800a014:	2201      	movs	r2, #1
 800a016:	4619      	mov	r1, r3
 800a018:	2004      	movs	r0, #4
 800a01a:	f7fb f88f 	bl	800513c <pbuf_alloc>
 800a01e:	6578      	str	r0, [r7, #84]	@ 0x54
 800a020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 81e5 	beq.w	800a3f2 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800a028:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	441a      	add	r2, r3
 800a030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a032:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a034:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a036:	f7fb fc8d 	bl	8005954 <pbuf_clen>
 800a03a:	4603      	mov	r3, r0
 800a03c:	461a      	mov	r2, r3
 800a03e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a042:	4413      	add	r3, r2
 800a044:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a048:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a04c:	8bfb      	ldrh	r3, [r7, #30]
 800a04e:	4413      	add	r3, r2
 800a050:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800a054:	e0e0      	b.n	800a218 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80db 	beq.w	800a218 <tcp_write+0x464>
 800a062:	4b04      	ldr	r3, [pc, #16]	@ (800a074 <tcp_write+0x2c0>)
 800a064:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800a068:	4909      	ldr	r1, [pc, #36]	@ (800a090 <tcp_write+0x2dc>)
 800a06a:	4804      	ldr	r0, [pc, #16]	@ (800a07c <tcp_write+0x2c8>)
 800a06c:	f003 fd60 	bl	800db30 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a070:	e0d2      	b.n	800a218 <tcp_write+0x464>
 800a072:	bf00      	nop
 800a074:	0800fbd8 	.word	0x0800fbd8
 800a078:	0800fd00 	.word	0x0800fd00
 800a07c:	0800fc3c 	.word	0x0800fc3c
 800a080:	0800fd34 	.word	0x0800fd34
 800a084:	0800fd4c 	.word	0x0800fd4c
 800a088:	0800fd6c 	.word	0x0800fd6c
 800a08c:	0800fd8c 	.word	0x0800fd8c
 800a090:	0800fdb8 	.word	0x0800fdb8
    struct pbuf *p;
    u16_t left = len - pos;
 800a094:	88fa      	ldrh	r2, [r7, #6]
 800a096:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a09e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a0aa:	8b7a      	ldrh	r2, [r7, #26]
 800a0ac:	8bbb      	ldrh	r3, [r7, #28]
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	bf28      	it	cs
 800a0b2:	4613      	movcs	r3, r2
 800a0b4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a0b6:	797b      	ldrb	r3, [r7, #5]
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d036      	beq.n	800a12e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	8b3b      	ldrh	r3, [r7, #24]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	b299      	uxth	r1, r3
 800a0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	bf0c      	ite	eq
 800a0d2:	2301      	moveq	r3, #1
 800a0d4:	2300      	movne	r3, #0
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	f107 0012 	add.w	r0, r7, #18
 800a0dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a0de:	9302      	str	r3, [sp, #8]
 800a0e0:	797b      	ldrb	r3, [r7, #5]
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	f7ff fd8a 	bl	8009c04 <tcp_pbuf_prealloc>
 800a0f0:	6338      	str	r0, [r7, #48]	@ 0x30
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 817e 	beq.w	800a3f6 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0fc:	895b      	ldrh	r3, [r3, #10]
 800a0fe:	8b3a      	ldrh	r2, [r7, #24]
 800a100:	429a      	cmp	r2, r3
 800a102:	d906      	bls.n	800a112 <tcp_write+0x35e>
 800a104:	4b8f      	ldr	r3, [pc, #572]	@ (800a344 <tcp_write+0x590>)
 800a106:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800a10a:	498f      	ldr	r1, [pc, #572]	@ (800a348 <tcp_write+0x594>)
 800a10c:	488f      	ldr	r0, [pc, #572]	@ (800a34c <tcp_write+0x598>)
 800a10e:	f003 fd0f 	bl	800db30 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800a112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a11a:	18d0      	adds	r0, r2, r3
 800a11c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	4413      	add	r3, r2
 800a124:	8b3a      	ldrh	r2, [r7, #24]
 800a126:	4619      	mov	r1, r3
 800a128:	f003 fdfb 	bl	800dd22 <memcpy>
 800a12c:	e02e      	b.n	800a18c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a12e:	8a7b      	ldrh	r3, [r7, #18]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d006      	beq.n	800a142 <tcp_write+0x38e>
 800a134:	4b83      	ldr	r3, [pc, #524]	@ (800a344 <tcp_write+0x590>)
 800a136:	f240 224b 	movw	r2, #587	@ 0x24b
 800a13a:	4985      	ldr	r1, [pc, #532]	@ (800a350 <tcp_write+0x59c>)
 800a13c:	4883      	ldr	r0, [pc, #524]	@ (800a34c <tcp_write+0x598>)
 800a13e:	f003 fcf7 	bl	800db30 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a142:	8b3b      	ldrh	r3, [r7, #24]
 800a144:	2201      	movs	r2, #1
 800a146:	4619      	mov	r1, r3
 800a148:	2000      	movs	r0, #0
 800a14a:	f7fa fff7 	bl	800513c <pbuf_alloc>
 800a14e:	6178      	str	r0, [r7, #20]
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	2b00      	cmp	r3, #0
 800a154:	f000 8151 	beq.w	800a3fa <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800a158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	441a      	add	r2, r3
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a168:	b29b      	uxth	r3, r3
 800a16a:	2200      	movs	r2, #0
 800a16c:	4619      	mov	r1, r3
 800a16e:	2000      	movs	r0, #0
 800a170:	f7fa ffe4 	bl	800513c <pbuf_alloc>
 800a174:	6338      	str	r0, [r7, #48]	@ 0x30
 800a176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d103      	bne.n	800a184 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a17c:	6978      	ldr	r0, [r7, #20]
 800a17e:	f7fb fb55 	bl	800582c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a182:	e13d      	b.n	800a400 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a184:	6979      	ldr	r1, [r7, #20]
 800a186:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a188:	f7fb fc1c 	bl	80059c4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a18c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a18e:	f7fb fbe1 	bl	8005954 <pbuf_clen>
 800a192:	4603      	mov	r3, r0
 800a194:	461a      	mov	r2, r3
 800a196:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a19a:	4413      	add	r3, r2
 800a19c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800a1a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a1a4:	2b09      	cmp	r3, #9
 800a1a6:	d805      	bhi.n	800a1b4 <tcp_write+0x400>
 800a1a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a1ac:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d903      	bls.n	800a1bc <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a1b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1b6:	f7fb fb39 	bl	800582c <pbuf_free>
      goto memerr;
 800a1ba:	e121      	b.n	800a400 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a1c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a1c4:	441a      	add	r2, r3
 800a1c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f7ff fc90 	bl	8009af8 <tcp_create_segment>
 800a1d8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800a1da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	f000 810e 	beq.w	800a3fe <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a1e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <tcp_write+0x43a>
      queue = seg;
 800a1e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1ec:	e00c      	b.n	800a208 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a1ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d106      	bne.n	800a202 <tcp_write+0x44e>
 800a1f4:	4b53      	ldr	r3, [pc, #332]	@ (800a344 <tcp_write+0x590>)
 800a1f6:	f240 2285 	movw	r2, #645	@ 0x285
 800a1fa:	4956      	ldr	r1, [pc, #344]	@ (800a354 <tcp_write+0x5a0>)
 800a1fc:	4853      	ldr	r0, [pc, #332]	@ (800a34c <tcp_write+0x598>)
 800a1fe:	f003 fc97 	bl	800db30 <iprintf>
      prev_seg->next = seg;
 800a202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a204:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a206:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a20a:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a20c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a210:	8b3b      	ldrh	r3, [r7, #24]
 800a212:	4413      	add	r3, r2
 800a214:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800a218:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800a21c:	88fb      	ldrh	r3, [r7, #6]
 800a21e:	429a      	cmp	r2, r3
 800a220:	f4ff af38 	bcc.w	800a094 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a224:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a226:	2b00      	cmp	r3, #0
 800a228:	d02c      	beq.n	800a284 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a22a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a230:	e01e      	b.n	800a270 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800a232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a234:	891a      	ldrh	r2, [r3, #8]
 800a236:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a238:	4413      	add	r3, r2
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d110      	bne.n	800a26a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a24e:	8952      	ldrh	r2, [r2, #10]
 800a250:	4413      	add	r3, r2
 800a252:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800a254:	68b9      	ldr	r1, [r7, #8]
 800a256:	4618      	mov	r0, r3
 800a258:	f003 fd63 	bl	800dd22 <memcpy>
        p->len += oversize_used;
 800a25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a25e:	895a      	ldrh	r2, [r3, #10]
 800a260:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a262:	4413      	add	r3, r2
 800a264:	b29a      	uxth	r2, r3
 800a266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a268:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1dd      	bne.n	800a232 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800a276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a278:	891a      	ldrh	r2, [r3, #8]
 800a27a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a27c:	4413      	add	r3, r2
 800a27e:	b29a      	uxth	r2, r3
 800a280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a282:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a284:	8a7a      	ldrh	r2, [r7, #18]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a28c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d018      	beq.n	800a2c4 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a294:	2b00      	cmp	r3, #0
 800a296:	d106      	bne.n	800a2a6 <tcp_write+0x4f2>
 800a298:	4b2a      	ldr	r3, [pc, #168]	@ (800a344 <tcp_write+0x590>)
 800a29a:	f240 22ba 	movw	r2, #698	@ 0x2ba
 800a29e:	492e      	ldr	r1, [pc, #184]	@ (800a358 <tcp_write+0x5a4>)
 800a2a0:	482a      	ldr	r0, [pc, #168]	@ (800a34c <tcp_write+0x598>)
 800a2a2:	f003 fc45 	bl	800db30 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a2a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fb fb89 	bl	80059c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a2b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2b4:	891a      	ldrh	r2, [r3, #8]
 800a2b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2b8:	891b      	ldrh	r3, [r3, #8]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2c0:	811a      	strh	r2, [r3, #8]
 800a2c2:	e037      	b.n	800a334 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800a2c4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d034      	beq.n	800a334 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a2ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <tcp_write+0x524>
 800a2d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d106      	bne.n	800a2e6 <tcp_write+0x532>
 800a2d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a344 <tcp_write+0x590>)
 800a2da:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 800a2de:	491f      	ldr	r1, [pc, #124]	@ (800a35c <tcp_write+0x5a8>)
 800a2e0:	481a      	ldr	r0, [pc, #104]	@ (800a34c <tcp_write+0x598>)
 800a2e2:	f003 fc25 	bl	800db30 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a2e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2ec:	e009      	b.n	800a302 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f0:	891a      	ldrh	r2, [r3, #8]
 800a2f2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a2f4:	4413      	add	r3, r2
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fa:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1f1      	bne.n	800a2ee <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800a30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30c:	891a      	ldrh	r2, [r3, #8]
 800a30e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a310:	4413      	add	r3, r2
 800a312:	b29a      	uxth	r2, r3
 800a314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a316:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a31a:	895a      	ldrh	r2, [r3, #10]
 800a31c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a31e:	4413      	add	r3, r2
 800a320:	b29a      	uxth	r2, r3
 800a322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a324:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a328:	891a      	ldrh	r2, [r3, #8]
 800a32a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a32c:	4413      	add	r3, r2
 800a32e:	b29a      	uxth	r2, r3
 800a330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a332:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a336:	2b00      	cmp	r3, #0
 800a338:	d112      	bne.n	800a360 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a33e:	669a      	str	r2, [r3, #104]	@ 0x68
 800a340:	e011      	b.n	800a366 <tcp_write+0x5b2>
 800a342:	bf00      	nop
 800a344:	0800fbd8 	.word	0x0800fbd8
 800a348:	0800fde8 	.word	0x0800fde8
 800a34c:	0800fc3c 	.word	0x0800fc3c
 800a350:	0800fe28 	.word	0x0800fe28
 800a354:	0800fe38 	.word	0x0800fe38
 800a358:	0800fe4c 	.word	0x0800fe4c
 800a35c:	0800fe84 	.word	0x0800fe84
  } else {
    last_unsent->next = queue;
 800a360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a364:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	441a      	add	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_buf -= len;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a378:	88fb      	ldrh	r3, [r7, #6]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  pcb->snd_queuelen = queuelen;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a38a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00e      	beq.n	800a3b6 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10a      	bne.n	800a3b6 <tcp_write+0x602>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d106      	bne.n	800a3b6 <tcp_write+0x602>
 800a3a8:	4b2c      	ldr	r3, [pc, #176]	@ (800a45c <tcp_write+0x6a8>)
 800a3aa:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 800a3ae:	492c      	ldr	r1, [pc, #176]	@ (800a460 <tcp_write+0x6ac>)
 800a3b0:	482c      	ldr	r0, [pc, #176]	@ (800a464 <tcp_write+0x6b0>)
 800a3b2:	f003 fbbd 	bl	800db30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a3b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d016      	beq.n	800a3ea <tcp_write+0x636>
 800a3bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d012      	beq.n	800a3ea <tcp_write+0x636>
 800a3c4:	797b      	ldrb	r3, [r7, #5]
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10d      	bne.n	800a3ea <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a3ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	899b      	ldrh	r3, [r3, #12]
 800a3d4:	b29c      	uxth	r4, r3
 800a3d6:	2008      	movs	r0, #8
 800a3d8:	f7fa f8e2 	bl	80045a0 <lwip_htons>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	461a      	mov	r2, r3
 800a3e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	4322      	orrs	r2, r4
 800a3e6:	b292      	uxth	r2, r2
 800a3e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e031      	b.n	800a452 <tcp_write+0x69e>
          goto memerr;
 800a3ee:	bf00      	nop
 800a3f0:	e006      	b.n	800a400 <tcp_write+0x64c>
            goto memerr;
 800a3f2:	bf00      	nop
 800a3f4:	e004      	b.n	800a400 <tcp_write+0x64c>
        goto memerr;
 800a3f6:	bf00      	nop
 800a3f8:	e002      	b.n	800a400 <tcp_write+0x64c>
        goto memerr;
 800a3fa:	bf00      	nop
 800a3fc:	e000      	b.n	800a400 <tcp_write+0x64c>
      goto memerr;
 800a3fe:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	7e9b      	ldrb	r3, [r3, #26]
 800a404:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a408:	b2da      	uxtb	r2, r3
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a40e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <tcp_write+0x666>
    pbuf_free(concat_p);
 800a414:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a416:	f7fb fa09 	bl	800582c <pbuf_free>
  }
  if (queue != NULL) {
 800a41a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <tcp_write+0x672>
    tcp_segs_free(queue);
 800a420:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a422:	f7fc fcce 	bl	8006dc2 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00e      	beq.n	800a44e <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10a      	bne.n	800a44e <tcp_write+0x69a>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d106      	bne.n	800a44e <tcp_write+0x69a>
 800a440:	4b06      	ldr	r3, [pc, #24]	@ (800a45c <tcp_write+0x6a8>)
 800a442:	f240 3201 	movw	r2, #769	@ 0x301
 800a446:	4906      	ldr	r1, [pc, #24]	@ (800a460 <tcp_write+0x6ac>)
 800a448:	4806      	ldr	r0, [pc, #24]	@ (800a464 <tcp_write+0x6b0>)
 800a44a:	f003 fb71 	bl	800db30 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a44e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a452:	4618      	mov	r0, r3
 800a454:	375c      	adds	r7, #92	@ 0x5c
 800a456:	46bd      	mov	sp, r7
 800a458:	bd90      	pop	{r4, r7, pc}
 800a45a:	bf00      	nop
 800a45c:	0800fbd8 	.word	0x0800fbd8
 800a460:	0800febc 	.word	0x0800febc
 800a464:	0800fc3c 	.word	0x0800fc3c

0800a468 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08a      	sub	sp, #40	@ 0x28
 800a46c:	af02      	add	r7, sp, #8
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	460b      	mov	r3, r1
 800a472:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a47c:	78fb      	ldrb	r3, [r7, #3]
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d106      	bne.n	800a494 <tcp_enqueue_flags+0x2c>
 800a486:	4b6f      	ldr	r3, [pc, #444]	@ (800a644 <tcp_enqueue_flags+0x1dc>)
 800a488:	f240 321a 	movw	r2, #794	@ 0x31a
 800a48c:	496e      	ldr	r1, [pc, #440]	@ (800a648 <tcp_enqueue_flags+0x1e0>)
 800a48e:	486f      	ldr	r0, [pc, #444]	@ (800a64c <tcp_enqueue_flags+0x1e4>)
 800a490:	f003 fb4e 	bl	800db30 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a49a:	2b08      	cmp	r3, #8
 800a49c:	d806      	bhi.n	800a4ac <tcp_enqueue_flags+0x44>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a4a4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d90e      	bls.n	800a4ca <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800a4ac:	78fb      	ldrb	r3, [r7, #3]
 800a4ae:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d109      	bne.n	800a4ca <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	7e9b      	ldrb	r3, [r3, #26]
 800a4ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c8:	e0b7      	b.n	800a63a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800a4ca:	78fb      	ldrb	r3, [r7, #3]
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a4d8:	7ffb      	ldrb	r3, [r7, #31]
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0304 	and.w	r3, r3, #4
 800a4e2:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a4e4:	7dfb      	ldrb	r3, [r7, #23]
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f7fa fe25 	bl	800513c <pbuf_alloc>
 800a4f2:	6138      	str	r0, [r7, #16]
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d109      	bne.n	800a50e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	7e9b      	ldrb	r3, [r3, #26]
 800a4fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a502:	b2da      	uxtb	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a508:	f04f 33ff 	mov.w	r3, #4294967295
 800a50c:	e095      	b.n	800a63a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	895a      	ldrh	r2, [r3, #10]
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	b29b      	uxth	r3, r3
 800a516:	429a      	cmp	r2, r3
 800a518:	d206      	bcs.n	800a528 <tcp_enqueue_flags+0xc0>
 800a51a:	4b4a      	ldr	r3, [pc, #296]	@ (800a644 <tcp_enqueue_flags+0x1dc>)
 800a51c:	f44f 7250 	mov.w	r2, #832	@ 0x340
 800a520:	494b      	ldr	r1, [pc, #300]	@ (800a650 <tcp_enqueue_flags+0x1e8>)
 800a522:	484a      	ldr	r0, [pc, #296]	@ (800a64c <tcp_enqueue_flags+0x1e4>)
 800a524:	f003 fb04 	bl	800db30 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800a52c:	78fa      	ldrb	r2, [r7, #3]
 800a52e:	7ffb      	ldrb	r3, [r7, #31]
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	460b      	mov	r3, r1
 800a534:	6939      	ldr	r1, [r7, #16]
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7ff fade 	bl	8009af8 <tcp_create_segment>
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d109      	bne.n	800a558 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	7e9b      	ldrb	r3, [r3, #26]
 800a548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a552:	f04f 33ff 	mov.w	r3, #4294967295
 800a556:	e070      	b.n	800a63a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	f003 0303 	and.w	r3, r3, #3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d006      	beq.n	800a572 <tcp_enqueue_flags+0x10a>
 800a564:	4b37      	ldr	r3, [pc, #220]	@ (800a644 <tcp_enqueue_flags+0x1dc>)
 800a566:	f240 3249 	movw	r2, #841	@ 0x349
 800a56a:	493a      	ldr	r1, [pc, #232]	@ (800a654 <tcp_enqueue_flags+0x1ec>)
 800a56c:	4837      	ldr	r0, [pc, #220]	@ (800a64c <tcp_enqueue_flags+0x1e4>)
 800a56e:	f003 fadf 	bl	800db30 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	891b      	ldrh	r3, [r3, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d006      	beq.n	800a588 <tcp_enqueue_flags+0x120>
 800a57a:	4b32      	ldr	r3, [pc, #200]	@ (800a644 <tcp_enqueue_flags+0x1dc>)
 800a57c:	f240 324a 	movw	r2, #842	@ 0x34a
 800a580:	4935      	ldr	r1, [pc, #212]	@ (800a658 <tcp_enqueue_flags+0x1f0>)
 800a582:	4832      	ldr	r0, [pc, #200]	@ (800a64c <tcp_enqueue_flags+0x1e4>)
 800a584:	f003 fad4 	bl	800db30 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d103      	bne.n	800a598 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	669a      	str	r2, [r3, #104]	@ 0x68
 800a596:	e00d      	b.n	800a5b4 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a59c:	61bb      	str	r3, [r7, #24]
 800a59e:	e002      	b.n	800a5a6 <tcp_enqueue_flags+0x13e>
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	61bb      	str	r3, [r7, #24]
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1f8      	bne.n	800a5a0 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	f003 0302 	and.w	r3, r3, #2
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d104      	bne.n	800a5d0 <tcp_enqueue_flags+0x168>
 800a5c6:	78fb      	ldrb	r3, [r7, #3]
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d004      	beq.n	800a5da <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a5da:	78fb      	ldrb	r3, [r7, #3]
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d006      	beq.n	800a5f2 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7e9b      	ldrb	r3, [r3, #26]
 800a5e8:	f043 0320 	orr.w	r3, r3, #32
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fb f9ac 	bl	8005954 <pbuf_clen>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	461a      	mov	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a606:	4413      	add	r3, r2
 800a608:	b29a      	uxth	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a616:	2b00      	cmp	r3, #0
 800a618:	d00e      	beq.n	800a638 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10a      	bne.n	800a638 <tcp_enqueue_flags+0x1d0>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a626:	2b00      	cmp	r3, #0
 800a628:	d106      	bne.n	800a638 <tcp_enqueue_flags+0x1d0>
 800a62a:	4b06      	ldr	r3, [pc, #24]	@ (800a644 <tcp_enqueue_flags+0x1dc>)
 800a62c:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a630:	490a      	ldr	r1, [pc, #40]	@ (800a65c <tcp_enqueue_flags+0x1f4>)
 800a632:	4806      	ldr	r0, [pc, #24]	@ (800a64c <tcp_enqueue_flags+0x1e4>)
 800a634:	f003 fa7c 	bl	800db30 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3720      	adds	r7, #32
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	0800fbd8 	.word	0x0800fbd8
 800a648:	0800fedc 	.word	0x0800fedc
 800a64c:	0800fc3c 	.word	0x0800fc3c
 800a650:	0800ff34 	.word	0x0800ff34
 800a654:	0800ff70 	.word	0x0800ff70
 800a658:	0800ff88 	.word	0x0800ff88
 800a65c:	0800ffb4 	.word	0x0800ffb4

0800a660 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a660:	b590      	push	{r4, r7, lr}
 800a662:	b08b      	sub	sp, #44	@ 0x2c
 800a664:	af04      	add	r7, sp, #16
 800a666:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a66c:	7dbb      	ldrb	r3, [r7, #22]
 800a66e:	b29c      	uxth	r4, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a674:	4618      	mov	r0, r3
 800a676:	f7f9 ffa0 	bl	80045ba <lwip_htonl>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2200      	movs	r2, #0
 800a67e:	4621      	mov	r1, r4
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7ff f97f 	bl	8009984 <tcp_output_alloc_header>
 800a686:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d109      	bne.n	800a6a2 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	7e9b      	ldrb	r3, [r3, #26]
 800a692:	f043 0303 	orr.w	r3, r3, #3
 800a696:	b2da      	uxtb	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a69c:	f06f 0301 	mvn.w	r3, #1
 800a6a0:	e036      	b.n	800a710 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f002 f81c 	bl	800c6e4 <ip4_route>
 800a6ac:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800a6b4:	23fc      	movs	r3, #252	@ 0xfc
 800a6b6:	75fb      	strb	r3, [r7, #23]
 800a6b8:	e012      	b.n	800a6e0 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	1d18      	adds	r0, r3, #4
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	7a9c      	ldrb	r4, [r3, #10]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	7a5b      	ldrb	r3, [r3, #9]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	9202      	str	r2, [sp, #8]
 800a6cc:	2206      	movs	r2, #6
 800a6ce:	9201      	str	r2, [sp, #4]
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	4623      	mov	r3, r4
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	6938      	ldr	r0, [r7, #16]
 800a6d8:	f002 f9ac 	bl	800ca34 <ip4_output_if>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a6e0:	6938      	ldr	r0, [r7, #16]
 800a6e2:	f7fb f8a3 	bl	800582c <pbuf_free>

  if (err != ERR_OK) {
 800a6e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d007      	beq.n	800a6fe <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	7e9b      	ldrb	r3, [r3, #26]
 800a6f2:	f043 0303 	orr.w	r3, r3, #3
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	769a      	strb	r2, [r3, #26]
 800a6fc:	e006      	b.n	800a70c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	7e9b      	ldrb	r3, [r3, #26]
 800a702:	f023 0303 	bic.w	r3, r3, #3
 800a706:	b2da      	uxtb	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800a70c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a710:	4618      	mov	r0, r3
 800a712:	371c      	adds	r7, #28
 800a714:	46bd      	mov	sp, r7
 800a716:	bd90      	pop	{r4, r7, pc}

0800a718 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a718:	b5b0      	push	{r4, r5, r7, lr}
 800a71a:	b08a      	sub	sp, #40	@ 0x28
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	7d1b      	ldrb	r3, [r3, #20]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d106      	bne.n	800a736 <tcp_output+0x1e>
 800a728:	4b99      	ldr	r3, [pc, #612]	@ (800a990 <tcp_output+0x278>)
 800a72a:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800a72e:	4999      	ldr	r1, [pc, #612]	@ (800a994 <tcp_output+0x27c>)
 800a730:	4899      	ldr	r0, [pc, #612]	@ (800a998 <tcp_output+0x280>)
 800a732:	f003 f9fd 	bl	800db30 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a736:	4b99      	ldr	r3, [pc, #612]	@ (800a99c <tcp_output+0x284>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d101      	bne.n	800a744 <tcp_output+0x2c>
    return ERR_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	e1cb      	b.n	800aadc <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a750:	4293      	cmp	r3, r2
 800a752:	bf28      	it	cs
 800a754:	4613      	movcs	r3, r2
 800a756:	b29b      	uxth	r3, r3
 800a758:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a75e:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	7e9b      	ldrb	r3, [r3, #26]
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d017      	beq.n	800a79c <tcp_output+0x84>
 800a76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00f      	beq.n	800a792 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	4618      	mov	r0, r3
 800a77a:	f7f9 ff1e 	bl	80045ba <lwip_htonl>
 800a77e:	4602      	mov	r2, r0
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a788:	8912      	ldrh	r2, [r2, #8]
 800a78a:	4413      	add	r3, r2
     (seg == NULL ||
 800a78c:	69ba      	ldr	r2, [r7, #24]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d204      	bcs.n	800a79c <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff ff64 	bl	800a660 <tcp_send_empty_ack>
 800a798:	4603      	mov	r3, r0
 800a79a:	e19f      	b.n	800aadc <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7a0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d007      	beq.n	800a7b8 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800a7a8:	e002      	b.n	800a7b0 <tcp_output+0x98>
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	623b      	str	r3, [r7, #32]
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1f8      	bne.n	800a7aa <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	3304      	adds	r3, #4
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f001 ff91 	bl	800c6e4 <ip4_route>
 800a7c2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d102      	bne.n	800a7d0 <tcp_output+0xb8>
    return ERR_RTE;
 800a7ca:	f06f 0303 	mvn.w	r3, #3
 800a7ce:	e185      	b.n	800aadc <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <tcp_output+0xc6>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d111      	bne.n	800a802 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d002      	beq.n	800a7ea <tcp_output+0xd2>
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	e000      	b.n	800a7ec <tcp_output+0xd4>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d102      	bne.n	800a7fa <tcp_output+0xe2>
      return ERR_RTE;
 800a7f4:	f06f 0303 	mvn.w	r3, #3
 800a7f8:	e170      	b.n	800aadc <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800a802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 813f 	beq.w	800aa88 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	4618      	mov	r0, r3
 800a812:	f7f9 fed2 	bl	80045ba <lwip_htonl>
 800a816:	4602      	mov	r2, r0
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a820:	8912      	ldrh	r2, [r2, #8]
 800a822:	4413      	add	r3, r2
  if (seg != NULL &&
 800a824:	69ba      	ldr	r2, [r7, #24]
 800a826:	429a      	cmp	r2, r3
 800a828:	f080 812e 	bcs.w	800aa88 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f000 812a 	beq.w	800aa88 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a83a:	461a      	mov	r2, r3
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	4293      	cmp	r3, r2
 800a840:	f040 8122 	bne.w	800aa88 <tcp_output+0x370>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f040 811d 	bne.w	800aa88 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800a854:	2b00      	cmp	r3, #0
 800a856:	f040 812c 	bne.w	800aab2 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 800a86a:	e122      	b.n	800aab2 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	899b      	ldrh	r3, [r3, #12]
 800a872:	b29b      	uxth	r3, r3
 800a874:	4618      	mov	r0, r3
 800a876:	f7f9 fe93 	bl	80045a0 <lwip_htons>
 800a87a:	4603      	mov	r3, r0
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	2b00      	cmp	r3, #0
 800a882:	d006      	beq.n	800a892 <tcp_output+0x17a>
 800a884:	4b42      	ldr	r3, [pc, #264]	@ (800a990 <tcp_output+0x278>)
 800a886:	f240 4245 	movw	r2, #1093	@ 0x445
 800a88a:	4945      	ldr	r1, [pc, #276]	@ (800a9a0 <tcp_output+0x288>)
 800a88c:	4842      	ldr	r0, [pc, #264]	@ (800a998 <tcp_output+0x280>)
 800a88e:	f003 f94f 	bl	800db30 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a896:	2b00      	cmp	r3, #0
 800a898:	d01f      	beq.n	800a8da <tcp_output+0x1c2>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	7e9b      	ldrb	r3, [r3, #26]
 800a89e:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d119      	bne.n	800a8da <tcp_output+0x1c2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00b      	beq.n	800a8c6 <tcp_output+0x1ae>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d110      	bne.n	800a8da <tcp_output+0x1c2>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8bc:	891a      	ldrh	r2, [r3, #8]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d209      	bcs.n	800a8da <tcp_output+0x1c2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d004      	beq.n	800a8da <tcp_output+0x1c2>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8d6:	2b08      	cmp	r3, #8
 800a8d8:	d901      	bls.n	800a8de <tcp_output+0x1c6>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e000      	b.n	800a8e0 <tcp_output+0x1c8>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d106      	bne.n	800a8f2 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7e9b      	ldrb	r3, [r3, #26]
 800a8e8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	f000 80e2 	beq.w	800aab6 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	7d1b      	ldrb	r3, [r3, #20]
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d00d      	beq.n	800a916 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	899b      	ldrh	r3, [r3, #12]
 800a900:	b29c      	uxth	r4, r3
 800a902:	2010      	movs	r0, #16
 800a904:	f7f9 fe4c 	bl	80045a0 <lwip_htons>
 800a908:	4603      	mov	r3, r0
 800a90a:	461a      	mov	r2, r3
 800a90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	4322      	orrs	r2, r4
 800a912:	b292      	uxth	r2, r2
 800a914:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	6879      	ldr	r1, [r7, #4]
 800a91a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a91c:	f000 f8e2 	bl	800aae4 <tcp_output_segment>
 800a920:	4603      	mov	r3, r0
 800a922:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d009      	beq.n	800a940 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	7e9b      	ldrb	r3, [r3, #26]
 800a930:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a934:	b2da      	uxtb	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	769a      	strb	r2, [r3, #26]
      return err;
 800a93a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a93e:	e0cd      	b.n	800aadc <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800a940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	7d1b      	ldrb	r3, [r3, #20]
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d006      	beq.n	800a95e <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	7e9b      	ldrb	r3, [r3, #26]
 800a954:	f023 0303 	bic.w	r3, r3, #3
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	4618      	mov	r0, r3
 800a966:	f7f9 fe28 	bl	80045ba <lwip_htonl>
 800a96a:	4604      	mov	r4, r0
 800a96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96e:	891b      	ldrh	r3, [r3, #8]
 800a970:	461d      	mov	r5, r3
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	899b      	ldrh	r3, [r3, #12]
 800a978:	b29b      	uxth	r3, r3
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f9 fe10 	bl	80045a0 <lwip_htons>
 800a980:	4603      	mov	r3, r0
 800a982:	f003 0303 	and.w	r3, r3, #3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00c      	beq.n	800a9a4 <tcp_output+0x28c>
 800a98a:	2301      	movs	r3, #1
 800a98c:	e00b      	b.n	800a9a6 <tcp_output+0x28e>
 800a98e:	bf00      	nop
 800a990:	0800fbd8 	.word	0x0800fbd8
 800a994:	0800ffdc 	.word	0x0800ffdc
 800a998:	0800fc3c 	.word	0x0800fc3c
 800a99c:	20008354 	.word	0x20008354
 800a9a0:	08010004 	.word	0x08010004
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	442b      	add	r3, r5
 800a9a8:	4423      	add	r3, r4
 800a9aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	1ad3      	subs	r3, r2, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	da02      	bge.n	800a9be <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	68ba      	ldr	r2, [r7, #8]
 800a9bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	891b      	ldrh	r3, [r3, #8]
 800a9c2:	461c      	mov	r4, r3
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	899b      	ldrh	r3, [r3, #12]
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7f9 fde7 	bl	80045a0 <lwip_htons>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	f003 0303 	and.w	r3, r3, #3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <tcp_output+0x2c8>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e000      	b.n	800a9e2 <tcp_output+0x2ca>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	4423      	add	r3, r4
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d049      	beq.n	800aa7c <tcp_output+0x364>
      seg->next = NULL;
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d105      	bne.n	800aa02 <tcp_output+0x2ea>
        pcb->unacked = seg;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9fa:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fe:	623b      	str	r3, [r7, #32]
 800aa00:	e03f      	b.n	800aa82 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800aa02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7f9 fdd6 	bl	80045ba <lwip_htonl>
 800aa0e:	4604      	mov	r4, r0
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7f9 fdcf 	bl	80045ba <lwip_htonl>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	1ae3      	subs	r3, r4, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	da24      	bge.n	800aa6e <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	336c      	adds	r3, #108	@ 0x6c
 800aa28:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aa2a:	e002      	b.n	800aa32 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d011      	beq.n	800aa5e <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7f9 fdb9 	bl	80045ba <lwip_htonl>
 800aa48:	4604      	mov	r4, r0
 800aa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7f9 fdb2 	bl	80045ba <lwip_htonl>
 800aa56:	4603      	mov	r3, r0
 800aa58:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dbe6      	blt.n	800aa2c <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	681a      	ldr	r2, [r3, #0]
 800aa62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa64:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	e009      	b.n	800aa82 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800aa6e:	6a3b      	ldr	r3, [r7, #32]
 800aa70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa72:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	623b      	str	r3, [r7, #32]
 800aa7a:	e002      	b.n	800aa82 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800aa7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa7e:	f7fc f9b5 	bl	8006dec <tcp_seg_free>
    }
    seg = pcb->unsent;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800aa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d015      	beq.n	800aaba <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800aa8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7f9 fd90 	bl	80045ba <lwip_htonl>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaa4:	8912      	ldrh	r2, [r2, #8]
 800aaa6:	4413      	add	r3, r2
  while (seg != NULL &&
 800aaa8:	69ba      	ldr	r2, [r7, #24]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	f4bf aede 	bcs.w	800a86c <tcp_output+0x154>
  }
output_done:
 800aab0:	e003      	b.n	800aaba <tcp_output+0x3a2>
    goto output_done;
 800aab2:	bf00      	nop
 800aab4:	e002      	b.n	800aabc <tcp_output+0x3a4>
      break;
 800aab6:	bf00      	nop
 800aab8:	e000      	b.n	800aabc <tcp_output+0x3a4>
output_done:
 800aaba:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d103      	bne.n	800aacc <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	7e9b      	ldrb	r3, [r3, #26]
 800aad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3728      	adds	r7, #40	@ 0x28
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bdb0      	pop	{r4, r5, r7, pc}

0800aae4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800aae4:	b5b0      	push	{r4, r5, r7, lr}
 800aae6:	b08c      	sub	sp, #48	@ 0x30
 800aae8:	af04      	add	r7, sp, #16
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	89db      	ldrh	r3, [r3, #14]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d001      	beq.n	800aafe <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	e08a      	b.n	800ac14 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	68dc      	ldr	r4, [r3, #12]
 800ab06:	4610      	mov	r0, r2
 800ab08:	f7f9 fd57 	bl	80045ba <lwip_htonl>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	68dc      	ldr	r4, [r3, #12]
 800ab18:	4610      	mov	r0, r2
 800ab1a:	f7f9 fd41 	bl	80045a0 <lwip_htons>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ab2a:	441a      	add	r2, r3
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	3314      	adds	r3, #20
 800ab36:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	7a9b      	ldrb	r3, [r3, #10]
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d014      	beq.n	800ab6e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	3304      	adds	r3, #4
 800ab48:	4619      	mov	r1, r3
 800ab4a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800ab4e:	f7fc fc7f 	bl	8007450 <tcp_eff_send_mss_impl>
 800ab52:	4603      	mov	r3, r0
 800ab54:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ab56:	8b7b      	ldrh	r3, [r7, #26]
 800ab58:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7f9 fd2c 	bl	80045ba <lwip_htonl>
 800ab62:	4602      	mov	r2, r0
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	da02      	bge.n	800ab7e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10c      	bne.n	800aba0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800ab86:	4b25      	ldr	r3, [pc, #148]	@ (800ac1c <tcp_output_segment+0x138>)
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7f9 fd10 	bl	80045ba <lwip_htonl>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	68da      	ldr	r2, [r3, #12]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	8959      	ldrh	r1, [r3, #10]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	8b3a      	ldrh	r2, [r7, #24]
 800abba:	1a8a      	subs	r2, r1, r2
 800abbc:	b292      	uxth	r2, r2
 800abbe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	8919      	ldrh	r1, [r3, #8]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	8b3a      	ldrh	r2, [r7, #24]
 800abcc:	1a8a      	subs	r2, r1, r2
 800abce:	b292      	uxth	r2, r2
 800abd0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	68d2      	ldr	r2, [r2, #12]
 800abda:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	741a      	strb	r2, [r3, #16]
 800abe4:	2200      	movs	r2, #0
 800abe6:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6858      	ldr	r0, [r3, #4]
 800abec:	68b9      	ldr	r1, [r7, #8]
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	1d1c      	adds	r4, r3, #4
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	7a9d      	ldrb	r5, [r3, #10]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	7a5b      	ldrb	r3, [r3, #9]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	9202      	str	r2, [sp, #8]
 800abfe:	2206      	movs	r2, #6
 800ac00:	9201      	str	r2, [sp, #4]
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	462b      	mov	r3, r5
 800ac06:	4622      	mov	r2, r4
 800ac08:	f001 ff14 	bl	800ca34 <ip4_output_if>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800ac10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3720      	adds	r7, #32
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bdb0      	pop	{r4, r5, r7, pc}
 800ac1c:	20008308 	.word	0x20008308

0800ac20 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b08c      	sub	sp, #48	@ 0x30
 800ac24:	af04      	add	r7, sp, #16
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
 800ac2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800ac2e:	2200      	movs	r2, #0
 800ac30:	2114      	movs	r1, #20
 800ac32:	2001      	movs	r0, #1
 800ac34:	f7fa fa82 	bl	800513c <pbuf_alloc>
 800ac38:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d05b      	beq.n	800acf8 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	895b      	ldrh	r3, [r3, #10]
 800ac44:	2b13      	cmp	r3, #19
 800ac46:	d806      	bhi.n	800ac56 <tcp_rst+0x36>
 800ac48:	4b2d      	ldr	r3, [pc, #180]	@ (800ad00 <tcp_rst+0xe0>)
 800ac4a:	f240 524c 	movw	r2, #1356	@ 0x54c
 800ac4e:	492d      	ldr	r1, [pc, #180]	@ (800ad04 <tcp_rst+0xe4>)
 800ac50:	482d      	ldr	r0, [pc, #180]	@ (800ad08 <tcp_rst+0xe8>)
 800ac52:	f002 ff6d 	bl	800db30 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800ac5c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7f9 fc9e 	bl	80045a0 <lwip_htons>
 800ac64:	4603      	mov	r3, r0
 800ac66:	461a      	mov	r2, r3
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800ac6c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7f9 fc96 	bl	80045a0 <lwip_htons>
 800ac74:	4603      	mov	r3, r0
 800ac76:	461a      	mov	r2, r3
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f7f9 fc9c 	bl	80045ba <lwip_htonl>
 800ac82:	4602      	mov	r2, r0
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800ac88:	68b8      	ldr	r0, [r7, #8]
 800ac8a:	f7f9 fc96 	bl	80045ba <lwip_htonl>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800ac94:	f245 0014 	movw	r0, #20500	@ 0x5014
 800ac98:	f7f9 fc82 	bl	80045a0 <lwip_htons>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	461a      	mov	r2, r3
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f042 0208 	orr.w	r2, r2, #8
 800acac:	739a      	strb	r2, [r3, #14]
 800acae:	2200      	movs	r2, #0
 800acb0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800acb4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2200      	movs	r2, #0
 800acba:	741a      	strb	r2, [r3, #16]
 800acbc:	2200      	movs	r2, #0
 800acbe:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	2200      	movs	r2, #0
 800acc4:	749a      	strb	r2, [r3, #18]
 800acc6:	2200      	movs	r2, #0
 800acc8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800acca:	6838      	ldr	r0, [r7, #0]
 800accc:	f001 fd0a 	bl	800c6e4 <ip4_route>
 800acd0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	9302      	str	r3, [sp, #8]
 800acdc:	2306      	movs	r3, #6
 800acde:	9301      	str	r3, [sp, #4]
 800ace0:	2300      	movs	r3, #0
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	23ff      	movs	r3, #255	@ 0xff
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	6879      	ldr	r1, [r7, #4]
 800acea:	69f8      	ldr	r0, [r7, #28]
 800acec:	f001 fea2 	bl	800ca34 <ip4_output_if>
  }
  pbuf_free(p);
 800acf0:	69f8      	ldr	r0, [r7, #28]
 800acf2:	f7fa fd9b 	bl	800582c <pbuf_free>
 800acf6:	e000      	b.n	800acfa <tcp_rst+0xda>
    return;
 800acf8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800acfa:	3720      	adds	r7, #32
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	0800fbd8 	.word	0x0800fbd8
 800ad04:	0800fc0c 	.word	0x0800fc0c
 800ad08:	0800fc3c 	.word	0x0800fc3c

0800ad0c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d029      	beq.n	800ad70 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad20:	60fb      	str	r3, [r7, #12]
 800ad22:	e002      	b.n	800ad2a <tcp_rexmit_rto+0x1e>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	60fb      	str	r3, [r7, #12]
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1f8      	bne.n	800ad24 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad4e:	2bff      	cmp	r3, #255	@ 0xff
 800ad50:	d007      	beq.n	800ad62 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad58:	3301      	adds	r3, #1
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7ff fcd5 	bl	800a718 <tcp_output>
 800ad6e:	e000      	b.n	800ad72 <tcp_rexmit_rto+0x66>
    return;
 800ad70:	bf00      	nop
}
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ad78:	b590      	push	{r4, r7, lr}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d043      	beq.n	800ae10 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad8c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	3368      	adds	r3, #104	@ 0x68
 800ad9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ad9c:	e002      	b.n	800ada4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d011      	beq.n	800add0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7f9 fc00 	bl	80045ba <lwip_htonl>
 800adba:	4604      	mov	r4, r0
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7f9 fbf9 	bl	80045ba <lwip_htonl>
 800adc8:	4603      	mov	r3, r0
 800adca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800adcc:	2b00      	cmp	r3, #0
 800adce:	dbe6      	blt.n	800ad9e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d103      	bne.n	800adee <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800adf4:	2bff      	cmp	r3, #255	@ 0xff
 800adf6:	d007      	beq.n	800ae08 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800adfe:	3301      	adds	r3, #1
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	635a      	str	r2, [r3, #52]	@ 0x34
 800ae0e:	e000      	b.n	800ae12 <tcp_rexmit+0x9a>
    return;
 800ae10:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd90      	pop	{r4, r7, pc}

0800ae18 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d041      	beq.n	800aeac <tcp_rexmit_fast+0x94>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7e9b      	ldrb	r3, [r3, #26]
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d13b      	bne.n	800aeac <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff ff9f 	bl	800ad78 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ae46:	4293      	cmp	r3, r2
 800ae48:	bf28      	it	cs
 800ae4a:	4613      	movcs	r3, r2
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	0fda      	lsrs	r2, r3, #31
 800ae50:	4413      	add	r3, r2
 800ae52:	105b      	asrs	r3, r3, #1
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ae62:	461a      	mov	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d206      	bcs.n	800ae7c <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae72:	005b      	lsls	r3, r3, #1
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae86:	4619      	mov	r1, r3
 800ae88:	0049      	lsls	r1, r1, #1
 800ae8a:	440b      	add	r3, r1
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	4413      	add	r3, r2
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	7e9b      	ldrb	r3, [r3, #26]
 800ae9c:	f043 0304 	orr.w	r3, r3, #4
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 800aeac:	bf00      	nop
 800aeae:	3708      	adds	r7, #8
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b08a      	sub	sp, #40	@ 0x28
 800aeb8:	af04      	add	r7, sp, #16
 800aeba:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aec0:	3b01      	subs	r3, #1
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7f9 fb79 	bl	80045ba <lwip_htonl>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2200      	movs	r2, #0
 800aecc:	2100      	movs	r1, #0
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7fe fd58 	bl	8009984 <tcp_output_alloc_header>
 800aed4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d102      	bne.n	800aee2 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800aedc:	f04f 33ff 	mov.w	r3, #4294967295
 800aee0:	e021      	b.n	800af26 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	3304      	adds	r3, #4
 800aee6:	4618      	mov	r0, r3
 800aee8:	f001 fbfc 	bl	800c6e4 <ip4_route>
 800aeec:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d102      	bne.n	800aefa <tcp_keepalive+0x46>
    err = ERR_RTE;
 800aef4:	23fc      	movs	r3, #252	@ 0xfc
 800aef6:	75fb      	strb	r3, [r7, #23]
 800aef8:	e010      	b.n	800af1c <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800aefa:	6879      	ldr	r1, [r7, #4]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	1d1a      	adds	r2, r3, #4
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	7a98      	ldrb	r0, [r3, #10]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	9302      	str	r3, [sp, #8]
 800af08:	2306      	movs	r3, #6
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	2300      	movs	r3, #0
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	4603      	mov	r3, r0
 800af12:	6938      	ldr	r0, [r7, #16]
 800af14:	f001 fd8e 	bl	800ca34 <ip4_output_if>
 800af18:	4603      	mov	r3, r0
 800af1a:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800af1c:	6938      	ldr	r0, [r7, #16]
 800af1e:	f7fa fc85 	bl	800582c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800af22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800af2e:	b590      	push	{r4, r7, lr}
 800af30:	b08f      	sub	sp, #60	@ 0x3c
 800af32:	af04      	add	r7, sp, #16
 800af34:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af3a:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af46:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800af48:	6a3b      	ldr	r3, [r7, #32]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	e085      	b.n	800b05e <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800af52:	6a3b      	ldr	r3, [r7, #32]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	899b      	ldrh	r3, [r3, #12]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7f9 fb20 	bl	80045a0 <lwip_htons>
 800af60:	4603      	mov	r3, r0
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	2b00      	cmp	r3, #0
 800af68:	d005      	beq.n	800af76 <tcp_zero_window_probe+0x48>
 800af6a:	6a3b      	ldr	r3, [r7, #32]
 800af6c:	891b      	ldrh	r3, [r3, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <tcp_zero_window_probe+0x48>
 800af72:	2301      	movs	r3, #1
 800af74:	e000      	b.n	800af78 <tcp_zero_window_probe+0x4a>
 800af76:	2300      	movs	r3, #0
 800af78:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800af7a:	7ffb      	ldrb	r3, [r7, #31]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	bf0c      	ite	eq
 800af80:	2301      	moveq	r3, #1
 800af82:	2300      	movne	r3, #0
 800af84:	b2db      	uxtb	r3, r3
 800af86:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	8bba      	ldrh	r2, [r7, #28]
 800af90:	2100      	movs	r1, #0
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7fe fcf6 	bl	8009984 <tcp_output_alloc_header>
 800af98:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d102      	bne.n	800afa6 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800afa0:	f04f 33ff 	mov.w	r3, #4294967295
 800afa4:	e05b      	b.n	800b05e <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800afac:	7ffb      	ldrb	r3, [r7, #31]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00e      	beq.n	800afd0 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	899b      	ldrh	r3, [r3, #12]
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800afbc:	b29c      	uxth	r4, r3
 800afbe:	2011      	movs	r0, #17
 800afc0:	f7f9 faee 	bl	80045a0 <lwip_htons>
 800afc4:	4603      	mov	r3, r0
 800afc6:	4323      	orrs	r3, r4
 800afc8:	b29a      	uxth	r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	819a      	strh	r2, [r3, #12]
 800afce:	e010      	b.n	800aff2 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	3314      	adds	r3, #20
 800afd6:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800afd8:	6a3b      	ldr	r3, [r7, #32]
 800afda:	6858      	ldr	r0, [r3, #4]
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	891a      	ldrh	r2, [r3, #8]
 800afe2:	6a3b      	ldr	r3, [r7, #32]
 800afe4:	891b      	ldrh	r3, [r3, #8]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	b29b      	uxth	r3, r3
 800afea:	2201      	movs	r2, #1
 800afec:	6939      	ldr	r1, [r7, #16]
 800afee:	f7fa fe0b 	bl	8005c08 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800aff2:	6a3b      	ldr	r3, [r7, #32]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	4618      	mov	r0, r3
 800affa:	f7f9 fade 	bl	80045ba <lwip_htonl>
 800affe:	4603      	mov	r3, r0
 800b000:	3301      	adds	r3, #1
 800b002:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	da02      	bge.n	800b016 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	3304      	adds	r3, #4
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 fb62 	bl	800c6e4 <ip4_route>
 800b020:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d103      	bne.n	800b030 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800b028:	23fc      	movs	r3, #252	@ 0xfc
 800b02a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b02e:	e011      	b.n	800b054 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	1d1a      	adds	r2, r3, #4
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	7a98      	ldrb	r0, [r3, #10]
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	9302      	str	r3, [sp, #8]
 800b03e:	2306      	movs	r3, #6
 800b040:	9301      	str	r3, [sp, #4]
 800b042:	2300      	movs	r3, #0
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	4603      	mov	r3, r0
 800b048:	69b8      	ldr	r0, [r7, #24]
 800b04a:	f001 fcf3 	bl	800ca34 <ip4_output_if>
 800b04e:	4603      	mov	r3, r0
 800b050:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800b054:	69b8      	ldr	r0, [r7, #24]
 800b056:	f7fa fbe9 	bl	800582c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b05a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b05e:	4618      	mov	r0, r3
 800b060:	372c      	adds	r7, #44	@ 0x2c
 800b062:	46bd      	mov	sp, r7
 800b064:	bd90      	pop	{r4, r7, pc}
	...

0800b068 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b070:	f7fa fe4a 	bl	8005d08 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b074:	4b0a      	ldr	r3, [pc, #40]	@ (800b0a0 <tcpip_tcp_timer+0x38>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d103      	bne.n	800b084 <tcpip_tcp_timer+0x1c>
 800b07c:	4b09      	ldr	r3, [pc, #36]	@ (800b0a4 <tcpip_tcp_timer+0x3c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d005      	beq.n	800b090 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b084:	2200      	movs	r2, #0
 800b086:	4908      	ldr	r1, [pc, #32]	@ (800b0a8 <tcpip_tcp_timer+0x40>)
 800b088:	20fa      	movs	r0, #250	@ 0xfa
 800b08a:	f000 f86f 	bl	800b16c <sys_timeout>
 800b08e:	e003      	b.n	800b098 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b090:	4b06      	ldr	r3, [pc, #24]	@ (800b0ac <tcpip_tcp_timer+0x44>)
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
  }
}
 800b096:	bf00      	nop
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	20008314 	.word	0x20008314
 800b0a4:	20008318 	.word	0x20008318
 800b0a8:	0800b069 	.word	0x0800b069
 800b0ac:	20008360 	.word	0x20008360

0800b0b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b0b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b0e0 <tcp_timer_needed+0x30>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10f      	bne.n	800b0dc <tcp_timer_needed+0x2c>
 800b0bc:	4b09      	ldr	r3, [pc, #36]	@ (800b0e4 <tcp_timer_needed+0x34>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d103      	bne.n	800b0cc <tcp_timer_needed+0x1c>
 800b0c4:	4b08      	ldr	r3, [pc, #32]	@ (800b0e8 <tcp_timer_needed+0x38>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d007      	beq.n	800b0dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b0cc:	4b04      	ldr	r3, [pc, #16]	@ (800b0e0 <tcp_timer_needed+0x30>)
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	4905      	ldr	r1, [pc, #20]	@ (800b0ec <tcp_timer_needed+0x3c>)
 800b0d6:	20fa      	movs	r0, #250	@ 0xfa
 800b0d8:	f000 f848 	bl	800b16c <sys_timeout>
  }
}
 800b0dc:	bf00      	nop
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	20008360 	.word	0x20008360
 800b0e4:	20008314 	.word	0x20008314
 800b0e8:	20008318 	.word	0x20008318
 800b0ec:	0800b069 	.word	0x0800b069

0800b0f0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	4903      	ldr	r1, [pc, #12]	@ (800b118 <cyclic_timer+0x28>)
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 f82e 	bl	800b16c <sys_timeout>
}
 800b110:	bf00      	nop
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	0800b0f1 	.word	0x0800b0f1

0800b11c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b122:	2301      	movs	r3, #1
 800b124:	607b      	str	r3, [r7, #4]
 800b126:	e00e      	b.n	800b146 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800b128:	4a0d      	ldr	r2, [pc, #52]	@ (800b160 <sys_timeouts_init+0x44>)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	00db      	lsls	r3, r3, #3
 800b134:	4a0a      	ldr	r2, [pc, #40]	@ (800b160 <sys_timeouts_init+0x44>)
 800b136:	4413      	add	r3, r2
 800b138:	461a      	mov	r2, r3
 800b13a:	490a      	ldr	r1, [pc, #40]	@ (800b164 <sys_timeouts_init+0x48>)
 800b13c:	f000 f816 	bl	800b16c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	3301      	adds	r3, #1
 800b144:	607b      	str	r3, [r7, #4]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d9ed      	bls.n	800b128 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800b14c:	f7f8 fabc 	bl	80036c8 <sys_now>
 800b150:	4603      	mov	r3, r0
 800b152:	4a05      	ldr	r2, [pc, #20]	@ (800b168 <sys_timeouts_init+0x4c>)
 800b154:	6013      	str	r3, [r2, #0]
}
 800b156:	bf00      	nop
 800b158:	3708      	adds	r7, #8
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	080118f4 	.word	0x080118f4
 800b164:	0800b0f1 	.word	0x0800b0f1
 800b168:	2000835c 	.word	0x2000835c

0800b16c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b088      	sub	sp, #32
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b178:	2006      	movs	r0, #6
 800b17a:	f7f9 fdef 	bl	8004d5c <memp_malloc>
 800b17e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10a      	bne.n	800b19c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f040 8084 	bne.w	800b296 <sys_timeout+0x12a>
 800b18e:	4b44      	ldr	r3, [pc, #272]	@ (800b2a0 <sys_timeout+0x134>)
 800b190:	22d4      	movs	r2, #212	@ 0xd4
 800b192:	4944      	ldr	r1, [pc, #272]	@ (800b2a4 <sys_timeout+0x138>)
 800b194:	4844      	ldr	r0, [pc, #272]	@ (800b2a8 <sys_timeout+0x13c>)
 800b196:	f002 fccb 	bl	800db30 <iprintf>
    return;
 800b19a:	e07c      	b.n	800b296 <sys_timeout+0x12a>
  }

  now = sys_now();
 800b19c:	f7f8 fa94 	bl	80036c8 <sys_now>
 800b1a0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800b1a2:	4b42      	ldr	r3, [pc, #264]	@ (800b2ac <sys_timeout+0x140>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d105      	bne.n	800b1b6 <sys_timeout+0x4a>
    diff = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800b1ae:	4a40      	ldr	r2, [pc, #256]	@ (800b2b0 <sys_timeout+0x144>)
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	e004      	b.n	800b1c0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800b1b6:	4b3e      	ldr	r3, [pc, #248]	@ (800b2b0 <sys_timeout+0x144>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	1ad3      	subs	r3, r2, r3
 800b1be:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	441a      	add	r2, r3
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b1dc:	4b33      	ldr	r3, [pc, #204]	@ (800b2ac <sys_timeout+0x140>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d103      	bne.n	800b1ec <sys_timeout+0x80>
    next_timeout = timeout;
 800b1e4:	4a31      	ldr	r2, [pc, #196]	@ (800b2ac <sys_timeout+0x140>)
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	6013      	str	r3, [r2, #0]
    return;
 800b1ea:	e055      	b.n	800b298 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800b1ec:	4b2f      	ldr	r3, [pc, #188]	@ (800b2ac <sys_timeout+0x140>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d20f      	bcs.n	800b218 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800b1f8:	4b2c      	ldr	r3, [pc, #176]	@ (800b2ac <sys_timeout+0x140>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6859      	ldr	r1, [r3, #4]
 800b1fe:	4b2b      	ldr	r3, [pc, #172]	@ (800b2ac <sys_timeout+0x140>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	1a8a      	subs	r2, r1, r2
 800b206:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800b208:	4b28      	ldr	r3, [pc, #160]	@ (800b2ac <sys_timeout+0x140>)
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b210:	4a26      	ldr	r2, [pc, #152]	@ (800b2ac <sys_timeout+0x140>)
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	e03f      	b.n	800b298 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b218:	4b24      	ldr	r3, [pc, #144]	@ (800b2ac <sys_timeout+0x140>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	61fb      	str	r3, [r7, #28]
 800b21e:	e036      	b.n	800b28e <sys_timeout+0x122>
      timeout->time -= t->time;
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	685a      	ldr	r2, [r3, #4]
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	1ad2      	subs	r2, r2, r3
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d006      	beq.n	800b244 <sys_timeout+0xd8>
 800b236:	69fb      	ldr	r3, [r7, #28]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	685a      	ldr	r2, [r3, #4]
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	429a      	cmp	r2, r3
 800b242:	d921      	bls.n	800b288 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d009      	beq.n	800b260 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6859      	ldr	r1, [r3, #4]
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	1a8a      	subs	r2, r1, r2
 800b25c:	605a      	str	r2, [r3, #4]
 800b25e:	e00b      	b.n	800b278 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	429a      	cmp	r2, r3
 800b268:	d206      	bcs.n	800b278 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800b26a:	4b10      	ldr	r3, [pc, #64]	@ (800b2ac <sys_timeout+0x140>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	441a      	add	r2, r3
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800b278:	69fb      	ldr	r3, [r7, #28]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	601a      	str	r2, [r3, #0]
        break;
 800b286:	e007      	b.n	800b298 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	61fb      	str	r3, [r7, #28]
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1c5      	bne.n	800b220 <sys_timeout+0xb4>
 800b294:	e000      	b.n	800b298 <sys_timeout+0x12c>
    return;
 800b296:	bf00      	nop
      }
    }
  }
}
 800b298:	3720      	adds	r7, #32
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	0801001c 	.word	0x0801001c
 800b2a4:	08010050 	.word	0x08010050
 800b2a8:	08010090 	.word	0x08010090
 800b2ac:	20008358 	.word	0x20008358
 800b2b0:	2000835c 	.word	0x2000835c

0800b2b4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800b2ba:	4b24      	ldr	r3, [pc, #144]	@ (800b34c <sys_check_timeouts+0x98>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d040      	beq.n	800b344 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800b2c2:	f7f8 fa01 	bl	80036c8 <sys_now>
 800b2c6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800b2c8:	4b21      	ldr	r3, [pc, #132]	@ (800b350 <sys_check_timeouts+0x9c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800b2d2:	4b20      	ldr	r3, [pc, #128]	@ (800b354 <sys_check_timeouts+0xa0>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <sys_check_timeouts+0x2c>
 800b2dc:	f7f9 fefe 	bl	80050dc <pbuf_free_ooseq>
      had_one = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800b2e4:	4b19      	ldr	r3, [pc, #100]	@ (800b34c <sys_check_timeouts+0x98>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d026      	beq.n	800b33e <sys_check_timeouts+0x8a>
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d321      	bcc.n	800b33e <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	685a      	ldr	r2, [r3, #4]
 800b302:	4b13      	ldr	r3, [pc, #76]	@ (800b350 <sys_check_timeouts+0x9c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4413      	add	r3, r2
 800b308:	4a11      	ldr	r2, [pc, #68]	@ (800b350 <sys_check_timeouts+0x9c>)
 800b30a:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a0c      	ldr	r2, [pc, #48]	@ (800b34c <sys_check_timeouts+0x98>)
 800b31c:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b32a:	68b9      	ldr	r1, [r7, #8]
 800b32c:	2006      	movs	r0, #6
 800b32e:	f7f9 fd61 	bl	8004df4 <memp_free>
        if (handler != NULL) {
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6838      	ldr	r0, [r7, #0]
 800b33c:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800b33e:	7cfb      	ldrb	r3, [r7, #19]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1c6      	bne.n	800b2d2 <sys_check_timeouts+0x1e>
  }
}
 800b344:	bf00      	nop
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	20008358 	.word	0x20008358
 800b350:	2000835c 	.word	0x2000835c
 800b354:	20008305 	.word	0x20008305

0800b358 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b358:	b480      	push	{r7}
 800b35a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800b35c:	bf00      	nop
 800b35e:	46bd      	mov	sp, r7
 800b360:	bc80      	pop	{r7}
 800b362:	4770      	bx	lr

0800b364 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	4613      	mov	r3, r2
 800b370:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b372:	79fb      	ldrb	r3, [r7, #7]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d018      	beq.n	800b3aa <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d013      	beq.n	800b3a6 <udp_input_local_match+0x42>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00f      	beq.n	800b3a6 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b386:	4b13      	ldr	r3, [pc, #76]	@ (800b3d4 <udp_input_local_match+0x70>)
 800b388:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38e:	d00a      	beq.n	800b3a6 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	4b0f      	ldr	r3, [pc, #60]	@ (800b3d4 <udp_input_local_match+0x70>)
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	405a      	eors	r2, r3
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	3308      	adds	r3, #8
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d110      	bne.n	800b3c8 <udp_input_local_match+0x64>
          return 1;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e00f      	b.n	800b3ca <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d009      	beq.n	800b3c4 <udp_input_local_match+0x60>
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d005      	beq.n	800b3c4 <udp_input_local_match+0x60>
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	4b05      	ldr	r3, [pc, #20]	@ (800b3d4 <udp_input_local_match+0x70>)
 800b3be:	695b      	ldr	r3, [r3, #20]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d101      	bne.n	800b3c8 <udp_input_local_match+0x64>
      return 1;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e000      	b.n	800b3ca <udp_input_local_match+0x66>
    }
  }

  return 0;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bc80      	pop	{r7}
 800b3d2:	4770      	bx	lr
 800b3d4:	20004dac 	.word	0x20004dac

0800b3d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b3d8:	b590      	push	{r4, r7, lr}
 800b3da:	b08d      	sub	sp, #52	@ 0x34
 800b3dc:	af02      	add	r7, sp, #8
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	895b      	ldrh	r3, [r3, #10]
 800b3ea:	2b07      	cmp	r3, #7
 800b3ec:	d803      	bhi.n	800b3f6 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7fa fa1c 	bl	800582c <pbuf_free>
    goto end;
 800b3f4:	e0c6      	b.n	800b584 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b3fc:	4b63      	ldr	r3, [pc, #396]	@ (800b58c <udp_input+0x1b4>)
 800b3fe:	695b      	ldr	r3, [r3, #20]
 800b400:	4a62      	ldr	r2, [pc, #392]	@ (800b58c <udp_input+0x1b4>)
 800b402:	6812      	ldr	r2, [r2, #0]
 800b404:	4611      	mov	r1, r2
 800b406:	4618      	mov	r0, r3
 800b408:	f001 fbe6 	bl	800cbd8 <ip4_addr_isbroadcast_u32>
 800b40c:	4603      	mov	r3, r0
 800b40e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	881b      	ldrh	r3, [r3, #0]
 800b414:	b29b      	uxth	r3, r3
 800b416:	4618      	mov	r0, r3
 800b418:	f7f9 f8c2 	bl	80045a0 <lwip_htons>
 800b41c:	4603      	mov	r3, r0
 800b41e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	885b      	ldrh	r3, [r3, #2]
 800b424:	b29b      	uxth	r3, r3
 800b426:	4618      	mov	r0, r3
 800b428:	f7f9 f8ba 	bl	80045a0 <lwip_htons>
 800b42c:	4603      	mov	r3, r0
 800b42e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b430:	2300      	movs	r3, #0
 800b432:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800b434:	2300      	movs	r3, #0
 800b436:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b438:	2300      	movs	r3, #0
 800b43a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b43c:	4b54      	ldr	r3, [pc, #336]	@ (800b590 <udp_input+0x1b8>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	627b      	str	r3, [r7, #36]	@ 0x24
 800b442:	e03b      	b.n	800b4bc <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b446:	8a5b      	ldrh	r3, [r3, #18]
 800b448:	89fa      	ldrh	r2, [r7, #14]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d131      	bne.n	800b4b2 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b44e:	7cfb      	ldrb	r3, [r7, #19]
 800b450:	461a      	mov	r2, r3
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b456:	f7ff ff85 	bl	800b364 <udp_input_local_match>
 800b45a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d028      	beq.n	800b4b2 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b462:	7c1b      	ldrb	r3, [r3, #16]
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d104      	bne.n	800b476 <udp_input+0x9e>
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d101      	bne.n	800b476 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800b472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b474:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b478:	8a9b      	ldrh	r3, [r3, #20]
 800b47a:	8a3a      	ldrh	r2, [r7, #16]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d118      	bne.n	800b4b2 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b482:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b484:	2b00      	cmp	r3, #0
 800b486:	d005      	beq.n	800b494 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	4b3f      	ldr	r3, [pc, #252]	@ (800b58c <udp_input+0x1b4>)
 800b48e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b490:	429a      	cmp	r2, r3
 800b492:	d10e      	bne.n	800b4b2 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b494:	6a3b      	ldr	r3, [r7, #32]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d014      	beq.n	800b4c4 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49c:	68da      	ldr	r2, [r3, #12]
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b4a2:	4b3b      	ldr	r3, [pc, #236]	@ (800b590 <udp_input+0x1b8>)
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b4aa:	4a39      	ldr	r2, [pc, #228]	@ (800b590 <udp_input+0x1b8>)
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ae:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b4b0:	e008      	b.n	800b4c4 <udp_input+0xec>
      }
    }

    prev = pcb;
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1c0      	bne.n	800b444 <udp_input+0x6c>
 800b4c2:	e000      	b.n	800b4c6 <udp_input+0xee>
        break;
 800b4c4:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <udp_input+0xf8>
    pcb = uncon_pcb;
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d002      	beq.n	800b4dc <udp_input+0x104>
    for_us = 1;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	76fb      	strb	r3, [r7, #27]
 800b4da:	e00a      	b.n	800b4f2 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	4b2a      	ldr	r3, [pc, #168]	@ (800b58c <udp_input+0x1b4>)
 800b4e4:	695b      	ldr	r3, [r3, #20]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	bf0c      	ite	eq
 800b4ea:	2301      	moveq	r3, #1
 800b4ec:	2300      	movne	r3, #0
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b4f2:	7efb      	ldrb	r3, [r7, #27]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d042      	beq.n	800b57e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800b4f8:	f06f 0107 	mvn.w	r1, #7
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7fa f971 	bl	80057e4 <pbuf_header>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00a      	beq.n	800b51e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b508:	4b22      	ldr	r3, [pc, #136]	@ (800b594 <udp_input+0x1bc>)
 800b50a:	f240 1255 	movw	r2, #341	@ 0x155
 800b50e:	4922      	ldr	r1, [pc, #136]	@ (800b598 <udp_input+0x1c0>)
 800b510:	4822      	ldr	r0, [pc, #136]	@ (800b59c <udp_input+0x1c4>)
 800b512:	f002 fb0d 	bl	800db30 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7fa f988 	bl	800582c <pbuf_free>
      goto end;
 800b51c:	e032      	b.n	800b584 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800b51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b520:	2b00      	cmp	r3, #0
 800b522:	d012      	beq.n	800b54a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00a      	beq.n	800b542 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52e:	699c      	ldr	r4, [r3, #24]
 800b530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b532:	69d8      	ldr	r0, [r3, #28]
 800b534:	8a3b      	ldrh	r3, [r7, #16]
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	4b19      	ldr	r3, [pc, #100]	@ (800b5a0 <udp_input+0x1c8>)
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b53e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b540:	e021      	b.n	800b586 <udp_input+0x1ae>
        pbuf_free(p);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7fa f972 	bl	800582c <pbuf_free>
        goto end;
 800b548:	e01c      	b.n	800b584 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b54a:	7cfb      	ldrb	r3, [r7, #19]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d112      	bne.n	800b576 <udp_input+0x19e>
 800b550:	4b0e      	ldr	r3, [pc, #56]	@ (800b58c <udp_input+0x1b4>)
 800b552:	695b      	ldr	r3, [r3, #20]
 800b554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b558:	2be0      	cmp	r3, #224	@ 0xe0
 800b55a:	d00c      	beq.n	800b576 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b55c:	4b0b      	ldr	r3, [pc, #44]	@ (800b58c <udp_input+0x1b4>)
 800b55e:	899b      	ldrh	r3, [r3, #12]
 800b560:	3308      	adds	r3, #8
 800b562:	b29b      	uxth	r3, r3
 800b564:	b21b      	sxth	r3, r3
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7fa f94d 	bl	8005808 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b56e:	2103      	movs	r1, #3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f001 f82f 	bl	800c5d4 <icmp_dest_unreach>
      pbuf_free(p);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7fa f958 	bl	800582c <pbuf_free>
  return;
 800b57c:	e003      	b.n	800b586 <udp_input+0x1ae>
    pbuf_free(p);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7fa f954 	bl	800582c <pbuf_free>
  return;
 800b584:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b586:	372c      	adds	r7, #44	@ 0x2c
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd90      	pop	{r4, r7, pc}
 800b58c:	20004dac 	.word	0x20004dac
 800b590:	20008364 	.word	0x20008364
 800b594:	080100b8 	.word	0x080100b8
 800b598:	080100e8 	.word	0x080100e8
 800b59c:	080100fc 	.word	0x080100fc
 800b5a0:	20004dbc 	.word	0x20004dbc

0800b5a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d01e      	beq.n	800b5f2 <udp_netif_ip_addr_changed+0x4e>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d01a      	beq.n	800b5f2 <udp_netif_ip_addr_changed+0x4e>
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d017      	beq.n	800b5f2 <udp_netif_ip_addr_changed+0x4e>
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d013      	beq.n	800b5f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b5ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b5fc <udp_netif_ip_addr_changed+0x58>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	60fb      	str	r3, [r7, #12]
 800b5d0:	e00c      	b.n	800b5ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d103      	bne.n	800b5e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1ef      	bne.n	800b5d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b5f2:	bf00      	nop
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bc80      	pop	{r7}
 800b5fa:	4770      	bx	lr
 800b5fc:	20008364 	.word	0x20008364

0800b600 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b608:	4915      	ldr	r1, [pc, #84]	@ (800b660 <etharp_free_entry+0x60>)
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	4613      	mov	r3, r2
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	4413      	add	r3, r2
 800b612:	00db      	lsls	r3, r3, #3
 800b614:	440b      	add	r3, r1
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d013      	beq.n	800b644 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b61c:	4910      	ldr	r1, [pc, #64]	@ (800b660 <etharp_free_entry+0x60>)
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	4613      	mov	r3, r2
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	4413      	add	r3, r2
 800b626:	00db      	lsls	r3, r3, #3
 800b628:	440b      	add	r3, r1
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fa f8fd 	bl	800582c <pbuf_free>
    arp_table[i].q = NULL;
 800b632:	490b      	ldr	r1, [pc, #44]	@ (800b660 <etharp_free_entry+0x60>)
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	4613      	mov	r3, r2
 800b638:	005b      	lsls	r3, r3, #1
 800b63a:	4413      	add	r3, r2
 800b63c:	00db      	lsls	r3, r3, #3
 800b63e:	440b      	add	r3, r1
 800b640:	2200      	movs	r2, #0
 800b642:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b644:	4906      	ldr	r1, [pc, #24]	@ (800b660 <etharp_free_entry+0x60>)
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	4613      	mov	r3, r2
 800b64a:	005b      	lsls	r3, r3, #1
 800b64c:	4413      	add	r3, r2
 800b64e:	00db      	lsls	r3, r3, #3
 800b650:	440b      	add	r3, r1
 800b652:	3314      	adds	r3, #20
 800b654:	2200      	movs	r2, #0
 800b656:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b658:	bf00      	nop
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	20008368 	.word	0x20008368

0800b664 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b66a:	2300      	movs	r3, #0
 800b66c:	71fb      	strb	r3, [r7, #7]
 800b66e:	e096      	b.n	800b79e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b670:	79fa      	ldrb	r2, [r7, #7]
 800b672:	494f      	ldr	r1, [pc, #316]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b674:	4613      	mov	r3, r2
 800b676:	005b      	lsls	r3, r3, #1
 800b678:	4413      	add	r3, r2
 800b67a:	00db      	lsls	r3, r3, #3
 800b67c:	440b      	add	r3, r1
 800b67e:	3314      	adds	r3, #20
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800b684:	79bb      	ldrb	r3, [r7, #6]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 8086 	beq.w	800b798 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800b68c:	79fa      	ldrb	r2, [r7, #7]
 800b68e:	4948      	ldr	r1, [pc, #288]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b690:	4613      	mov	r3, r2
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	4413      	add	r3, r2
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	440b      	add	r3, r1
 800b69a:	3312      	adds	r3, #18
 800b69c:	881b      	ldrh	r3, [r3, #0]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	b298      	uxth	r0, r3
 800b6a2:	4943      	ldr	r1, [pc, #268]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	4413      	add	r3, r2
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	440b      	add	r3, r1
 800b6ae:	3312      	adds	r3, #18
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b6b4:	79fa      	ldrb	r2, [r7, #7]
 800b6b6:	493e      	ldr	r1, [pc, #248]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	005b      	lsls	r3, r3, #1
 800b6bc:	4413      	add	r3, r2
 800b6be:	00db      	lsls	r3, r3, #3
 800b6c0:	440b      	add	r3, r1
 800b6c2:	3312      	adds	r3, #18
 800b6c4:	881b      	ldrh	r3, [r3, #0]
 800b6c6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b6ca:	d215      	bcs.n	800b6f8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b6cc:	79fa      	ldrb	r2, [r7, #7]
 800b6ce:	4938      	ldr	r1, [pc, #224]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	4413      	add	r3, r2
 800b6d6:	00db      	lsls	r3, r3, #3
 800b6d8:	440b      	add	r3, r1
 800b6da:	3314      	adds	r3, #20
 800b6dc:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d10f      	bne.n	800b702 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b6e2:	79fa      	ldrb	r2, [r7, #7]
 800b6e4:	4932      	ldr	r1, [pc, #200]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	005b      	lsls	r3, r3, #1
 800b6ea:	4413      	add	r3, r2
 800b6ec:	00db      	lsls	r3, r3, #3
 800b6ee:	440b      	add	r3, r1
 800b6f0:	3312      	adds	r3, #18
 800b6f2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b6f4:	2b04      	cmp	r3, #4
 800b6f6:	d904      	bls.n	800b702 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7ff ff80 	bl	800b600 <etharp_free_entry>
 800b700:	e04a      	b.n	800b798 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b702:	79fa      	ldrb	r2, [r7, #7]
 800b704:	492a      	ldr	r1, [pc, #168]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b706:	4613      	mov	r3, r2
 800b708:	005b      	lsls	r3, r3, #1
 800b70a:	4413      	add	r3, r2
 800b70c:	00db      	lsls	r3, r3, #3
 800b70e:	440b      	add	r3, r1
 800b710:	3314      	adds	r3, #20
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	2b03      	cmp	r3, #3
 800b716:	d10a      	bne.n	800b72e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b718:	79fa      	ldrb	r2, [r7, #7]
 800b71a:	4925      	ldr	r1, [pc, #148]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b71c:	4613      	mov	r3, r2
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	4413      	add	r3, r2
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	440b      	add	r3, r1
 800b726:	3314      	adds	r3, #20
 800b728:	2204      	movs	r2, #4
 800b72a:	701a      	strb	r2, [r3, #0]
 800b72c:	e034      	b.n	800b798 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b72e:	79fa      	ldrb	r2, [r7, #7]
 800b730:	491f      	ldr	r1, [pc, #124]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b732:	4613      	mov	r3, r2
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	4413      	add	r3, r2
 800b738:	00db      	lsls	r3, r3, #3
 800b73a:	440b      	add	r3, r1
 800b73c:	3314      	adds	r3, #20
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b04      	cmp	r3, #4
 800b742:	d10a      	bne.n	800b75a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b744:	79fa      	ldrb	r2, [r7, #7]
 800b746:	491a      	ldr	r1, [pc, #104]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b748:	4613      	mov	r3, r2
 800b74a:	005b      	lsls	r3, r3, #1
 800b74c:	4413      	add	r3, r2
 800b74e:	00db      	lsls	r3, r3, #3
 800b750:	440b      	add	r3, r1
 800b752:	3314      	adds	r3, #20
 800b754:	2202      	movs	r2, #2
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	e01e      	b.n	800b798 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b75a:	79fa      	ldrb	r2, [r7, #7]
 800b75c:	4914      	ldr	r1, [pc, #80]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b75e:	4613      	mov	r3, r2
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	4413      	add	r3, r2
 800b764:	00db      	lsls	r3, r3, #3
 800b766:	440b      	add	r3, r1
 800b768:	3314      	adds	r3, #20
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d113      	bne.n	800b798 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b770:	79fa      	ldrb	r2, [r7, #7]
 800b772:	490f      	ldr	r1, [pc, #60]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b774:	4613      	mov	r3, r2
 800b776:	005b      	lsls	r3, r3, #1
 800b778:	4413      	add	r3, r2
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	440b      	add	r3, r1
 800b77e:	3308      	adds	r3, #8
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	79fa      	ldrb	r2, [r7, #7]
 800b784:	4613      	mov	r3, r2
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	4413      	add	r3, r2
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	4a08      	ldr	r2, [pc, #32]	@ (800b7b0 <etharp_tmr+0x14c>)
 800b78e:	4413      	add	r3, r2
 800b790:	3304      	adds	r3, #4
 800b792:	4619      	mov	r1, r3
 800b794:	f000 fe06 	bl	800c3a4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	3301      	adds	r3, #1
 800b79c:	71fb      	strb	r3, [r7, #7]
 800b79e:	79fb      	ldrb	r3, [r7, #7]
 800b7a0:	2b09      	cmp	r3, #9
 800b7a2:	f67f af65 	bls.w	800b670 <etharp_tmr+0xc>
      }
    }
  }
}
 800b7a6:	bf00      	nop
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20008368 	.word	0x20008368

0800b7b4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b7c2:	230a      	movs	r3, #10
 800b7c4:	77fb      	strb	r3, [r7, #31]
 800b7c6:	230a      	movs	r3, #10
 800b7c8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800b7ca:	230a      	movs	r3, #10
 800b7cc:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800b7d2:	230a      	movs	r3, #10
 800b7d4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	833b      	strh	r3, [r7, #24]
 800b7da:	2300      	movs	r3, #0
 800b7dc:	82fb      	strh	r3, [r7, #22]
 800b7de:	2300      	movs	r3, #0
 800b7e0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	773b      	strb	r3, [r7, #28]
 800b7e6:	e093      	b.n	800b910 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800b7e8:	7f3a      	ldrb	r2, [r7, #28]
 800b7ea:	4990      	ldr	r1, [pc, #576]	@ (800ba2c <etharp_find_entry+0x278>)
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	4413      	add	r3, r2
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	440b      	add	r3, r1
 800b7f6:	3314      	adds	r3, #20
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b7fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b800:	2b0a      	cmp	r3, #10
 800b802:	d105      	bne.n	800b810 <etharp_find_entry+0x5c>
 800b804:	7cfb      	ldrb	r3, [r7, #19]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800b80a:	7f3b      	ldrb	r3, [r7, #28]
 800b80c:	777b      	strb	r3, [r7, #29]
 800b80e:	e07c      	b.n	800b90a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b810:	7cfb      	ldrb	r3, [r7, #19]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d079      	beq.n	800b90a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b816:	7cfb      	ldrb	r3, [r7, #19]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d009      	beq.n	800b830 <etharp_find_entry+0x7c>
 800b81c:	7cfb      	ldrb	r3, [r7, #19]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d806      	bhi.n	800b830 <etharp_find_entry+0x7c>
 800b822:	4b83      	ldr	r3, [pc, #524]	@ (800ba30 <etharp_find_entry+0x27c>)
 800b824:	f240 1225 	movw	r2, #293	@ 0x125
 800b828:	4982      	ldr	r1, [pc, #520]	@ (800ba34 <etharp_find_entry+0x280>)
 800b82a:	4883      	ldr	r0, [pc, #524]	@ (800ba38 <etharp_find_entry+0x284>)
 800b82c:	f002 f980 	bl	800db30 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00f      	beq.n	800b856 <etharp_find_entry+0xa2>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	6819      	ldr	r1, [r3, #0]
 800b83a:	7f3a      	ldrb	r2, [r7, #28]
 800b83c:	487b      	ldr	r0, [pc, #492]	@ (800ba2c <etharp_find_entry+0x278>)
 800b83e:	4613      	mov	r3, r2
 800b840:	005b      	lsls	r3, r3, #1
 800b842:	4413      	add	r3, r2
 800b844:	00db      	lsls	r3, r3, #3
 800b846:	4403      	add	r3, r0
 800b848:	3304      	adds	r3, #4
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4299      	cmp	r1, r3
 800b84e:	d102      	bne.n	800b856 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b850:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b854:	e0e5      	b.n	800ba22 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b856:	7cfb      	ldrb	r3, [r7, #19]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d13b      	bne.n	800b8d4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b85c:	7f3a      	ldrb	r2, [r7, #28]
 800b85e:	4973      	ldr	r1, [pc, #460]	@ (800ba2c <etharp_find_entry+0x278>)
 800b860:	4613      	mov	r3, r2
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	4413      	add	r3, r2
 800b866:	00db      	lsls	r3, r3, #3
 800b868:	440b      	add	r3, r1
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d018      	beq.n	800b8a2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800b870:	7f3a      	ldrb	r2, [r7, #28]
 800b872:	496e      	ldr	r1, [pc, #440]	@ (800ba2c <etharp_find_entry+0x278>)
 800b874:	4613      	mov	r3, r2
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	4413      	add	r3, r2
 800b87a:	00db      	lsls	r3, r3, #3
 800b87c:	440b      	add	r3, r1
 800b87e:	3312      	adds	r3, #18
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	8b3a      	ldrh	r2, [r7, #24]
 800b884:	429a      	cmp	r2, r3
 800b886:	d840      	bhi.n	800b90a <etharp_find_entry+0x156>
            old_queue = i;
 800b888:	7f3b      	ldrb	r3, [r7, #28]
 800b88a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800b88c:	7f3a      	ldrb	r2, [r7, #28]
 800b88e:	4967      	ldr	r1, [pc, #412]	@ (800ba2c <etharp_find_entry+0x278>)
 800b890:	4613      	mov	r3, r2
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	4413      	add	r3, r2
 800b896:	00db      	lsls	r3, r3, #3
 800b898:	440b      	add	r3, r1
 800b89a:	3312      	adds	r3, #18
 800b89c:	881b      	ldrh	r3, [r3, #0]
 800b89e:	833b      	strh	r3, [r7, #24]
 800b8a0:	e033      	b.n	800b90a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b8a2:	7f3a      	ldrb	r2, [r7, #28]
 800b8a4:	4961      	ldr	r1, [pc, #388]	@ (800ba2c <etharp_find_entry+0x278>)
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	005b      	lsls	r3, r3, #1
 800b8aa:	4413      	add	r3, r2
 800b8ac:	00db      	lsls	r3, r3, #3
 800b8ae:	440b      	add	r3, r1
 800b8b0:	3312      	adds	r3, #18
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	8afa      	ldrh	r2, [r7, #22]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d827      	bhi.n	800b90a <etharp_find_entry+0x156>
            old_pending = i;
 800b8ba:	7f3b      	ldrb	r3, [r7, #28]
 800b8bc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800b8be:	7f3a      	ldrb	r2, [r7, #28]
 800b8c0:	495a      	ldr	r1, [pc, #360]	@ (800ba2c <etharp_find_entry+0x278>)
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	005b      	lsls	r3, r3, #1
 800b8c6:	4413      	add	r3, r2
 800b8c8:	00db      	lsls	r3, r3, #3
 800b8ca:	440b      	add	r3, r1
 800b8cc:	3312      	adds	r3, #18
 800b8ce:	881b      	ldrh	r3, [r3, #0]
 800b8d0:	82fb      	strh	r3, [r7, #22]
 800b8d2:	e01a      	b.n	800b90a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b8d4:	7cfb      	ldrb	r3, [r7, #19]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d917      	bls.n	800b90a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b8da:	7f3a      	ldrb	r2, [r7, #28]
 800b8dc:	4953      	ldr	r1, [pc, #332]	@ (800ba2c <etharp_find_entry+0x278>)
 800b8de:	4613      	mov	r3, r2
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	4413      	add	r3, r2
 800b8e4:	00db      	lsls	r3, r3, #3
 800b8e6:	440b      	add	r3, r1
 800b8e8:	3312      	adds	r3, #18
 800b8ea:	881b      	ldrh	r3, [r3, #0]
 800b8ec:	8aba      	ldrh	r2, [r7, #20]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d80b      	bhi.n	800b90a <etharp_find_entry+0x156>
            old_stable = i;
 800b8f2:	7f3b      	ldrb	r3, [r7, #28]
 800b8f4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800b8f6:	7f3a      	ldrb	r2, [r7, #28]
 800b8f8:	494c      	ldr	r1, [pc, #304]	@ (800ba2c <etharp_find_entry+0x278>)
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	4413      	add	r3, r2
 800b900:	00db      	lsls	r3, r3, #3
 800b902:	440b      	add	r3, r1
 800b904:	3312      	adds	r3, #18
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b90a:	7f3b      	ldrb	r3, [r7, #28]
 800b90c:	3301      	adds	r3, #1
 800b90e:	773b      	strb	r3, [r7, #28]
 800b910:	7f3b      	ldrb	r3, [r7, #28]
 800b912:	2b09      	cmp	r3, #9
 800b914:	f67f af68 	bls.w	800b7e8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b918:	7afb      	ldrb	r3, [r7, #11]
 800b91a:	f003 0302 	and.w	r3, r3, #2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d108      	bne.n	800b934 <etharp_find_entry+0x180>
 800b922:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b926:	2b0a      	cmp	r3, #10
 800b928:	d107      	bne.n	800b93a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b92a:	7afb      	ldrb	r3, [r7, #11]
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	2b00      	cmp	r3, #0
 800b932:	d102      	bne.n	800b93a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800b934:	f04f 33ff 	mov.w	r3, #4294967295
 800b938:	e073      	b.n	800ba22 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b93a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b93e:	2b09      	cmp	r3, #9
 800b940:	dc02      	bgt.n	800b948 <etharp_find_entry+0x194>
    i = empty;
 800b942:	7f7b      	ldrb	r3, [r7, #29]
 800b944:	773b      	strb	r3, [r7, #28]
 800b946:	e036      	b.n	800b9b6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b948:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b94c:	2b09      	cmp	r3, #9
 800b94e:	dc13      	bgt.n	800b978 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800b950:	7fbb      	ldrb	r3, [r7, #30]
 800b952:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b954:	7f3a      	ldrb	r2, [r7, #28]
 800b956:	4935      	ldr	r1, [pc, #212]	@ (800ba2c <etharp_find_entry+0x278>)
 800b958:	4613      	mov	r3, r2
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	4413      	add	r3, r2
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	440b      	add	r3, r1
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d018      	beq.n	800b99a <etharp_find_entry+0x1e6>
 800b968:	4b31      	ldr	r3, [pc, #196]	@ (800ba30 <etharp_find_entry+0x27c>)
 800b96a:	f240 126f 	movw	r2, #367	@ 0x16f
 800b96e:	4933      	ldr	r1, [pc, #204]	@ (800ba3c <etharp_find_entry+0x288>)
 800b970:	4831      	ldr	r0, [pc, #196]	@ (800ba38 <etharp_find_entry+0x284>)
 800b972:	f002 f8dd 	bl	800db30 <iprintf>
 800b976:	e010      	b.n	800b99a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b978:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b97c:	2b09      	cmp	r3, #9
 800b97e:	dc02      	bgt.n	800b986 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800b980:	7ffb      	ldrb	r3, [r7, #31]
 800b982:	773b      	strb	r3, [r7, #28]
 800b984:	e009      	b.n	800b99a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b986:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b98a:	2b09      	cmp	r3, #9
 800b98c:	dc02      	bgt.n	800b994 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b98e:	7efb      	ldrb	r3, [r7, #27]
 800b990:	773b      	strb	r3, [r7, #28]
 800b992:	e002      	b.n	800b99a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800b994:	f04f 33ff 	mov.w	r3, #4294967295
 800b998:	e043      	b.n	800ba22 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b99a:	7f3b      	ldrb	r3, [r7, #28]
 800b99c:	2b09      	cmp	r3, #9
 800b99e:	d906      	bls.n	800b9ae <etharp_find_entry+0x1fa>
 800b9a0:	4b23      	ldr	r3, [pc, #140]	@ (800ba30 <etharp_find_entry+0x27c>)
 800b9a2:	f240 1281 	movw	r2, #385	@ 0x181
 800b9a6:	4926      	ldr	r1, [pc, #152]	@ (800ba40 <etharp_find_entry+0x28c>)
 800b9a8:	4823      	ldr	r0, [pc, #140]	@ (800ba38 <etharp_find_entry+0x284>)
 800b9aa:	f002 f8c1 	bl	800db30 <iprintf>
    etharp_free_entry(i);
 800b9ae:	7f3b      	ldrb	r3, [r7, #28]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7ff fe25 	bl	800b600 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b9b6:	7f3b      	ldrb	r3, [r7, #28]
 800b9b8:	2b09      	cmp	r3, #9
 800b9ba:	d906      	bls.n	800b9ca <etharp_find_entry+0x216>
 800b9bc:	4b1c      	ldr	r3, [pc, #112]	@ (800ba30 <etharp_find_entry+0x27c>)
 800b9be:	f240 1285 	movw	r2, #389	@ 0x185
 800b9c2:	491f      	ldr	r1, [pc, #124]	@ (800ba40 <etharp_find_entry+0x28c>)
 800b9c4:	481c      	ldr	r0, [pc, #112]	@ (800ba38 <etharp_find_entry+0x284>)
 800b9c6:	f002 f8b3 	bl	800db30 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b9ca:	7f3a      	ldrb	r2, [r7, #28]
 800b9cc:	4917      	ldr	r1, [pc, #92]	@ (800ba2c <etharp_find_entry+0x278>)
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	4413      	add	r3, r2
 800b9d4:	00db      	lsls	r3, r3, #3
 800b9d6:	440b      	add	r3, r1
 800b9d8:	3314      	adds	r3, #20
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d006      	beq.n	800b9ee <etharp_find_entry+0x23a>
 800b9e0:	4b13      	ldr	r3, [pc, #76]	@ (800ba30 <etharp_find_entry+0x27c>)
 800b9e2:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 800b9e6:	4917      	ldr	r1, [pc, #92]	@ (800ba44 <etharp_find_entry+0x290>)
 800b9e8:	4813      	ldr	r0, [pc, #76]	@ (800ba38 <etharp_find_entry+0x284>)
 800b9ea:	f002 f8a1 	bl	800db30 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00a      	beq.n	800ba0a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b9f4:	7f3a      	ldrb	r2, [r7, #28]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6819      	ldr	r1, [r3, #0]
 800b9fa:	480c      	ldr	r0, [pc, #48]	@ (800ba2c <etharp_find_entry+0x278>)
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	005b      	lsls	r3, r3, #1
 800ba00:	4413      	add	r3, r2
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	4403      	add	r3, r0
 800ba06:	3304      	adds	r3, #4
 800ba08:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ba0a:	7f3a      	ldrb	r2, [r7, #28]
 800ba0c:	4907      	ldr	r1, [pc, #28]	@ (800ba2c <etharp_find_entry+0x278>)
 800ba0e:	4613      	mov	r3, r2
 800ba10:	005b      	lsls	r3, r3, #1
 800ba12:	4413      	add	r3, r2
 800ba14:	00db      	lsls	r3, r3, #3
 800ba16:	440b      	add	r3, r1
 800ba18:	3312      	adds	r3, #18
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800ba1e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3720      	adds	r7, #32
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20008368 	.word	0x20008368
 800ba30:	08010154 	.word	0x08010154
 800ba34:	0801018c 	.word	0x0801018c
 800ba38:	080101cc 	.word	0x080101cc
 800ba3c:	080101f4 	.word	0x080101f4
 800ba40:	0801020c 	.word	0x0801020c
 800ba44:	08010220 	.word	0x08010220

0800ba48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b088      	sub	sp, #32
 800ba4c:	af02      	add	r7, sp, #8
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
 800ba54:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba5c:	2b06      	cmp	r3, #6
 800ba5e:	d006      	beq.n	800ba6e <etharp_update_arp_entry+0x26>
 800ba60:	4b48      	ldr	r3, [pc, #288]	@ (800bb84 <etharp_update_arp_entry+0x13c>)
 800ba62:	f240 12ab 	movw	r2, #427	@ 0x1ab
 800ba66:	4948      	ldr	r1, [pc, #288]	@ (800bb88 <etharp_update_arp_entry+0x140>)
 800ba68:	4848      	ldr	r0, [pc, #288]	@ (800bb8c <etharp_update_arp_entry+0x144>)
 800ba6a:	f002 f861 	bl	800db30 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d012      	beq.n	800ba9a <etharp_update_arp_entry+0x52>
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00e      	beq.n	800ba9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68f9      	ldr	r1, [r7, #12]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f001 f8a8 	bl	800cbd8 <ip4_addr_isbroadcast_u32>
 800ba88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d105      	bne.n	800ba9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ba96:	2be0      	cmp	r3, #224	@ 0xe0
 800ba98:	d102      	bne.n	800baa0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ba9a:	f06f 030f 	mvn.w	r3, #15
 800ba9e:	e06c      	b.n	800bb7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	4619      	mov	r1, r3
 800baa6:	68b8      	ldr	r0, [r7, #8]
 800baa8:	f7ff fe84 	bl	800b7b4 <etharp_find_entry>
 800baac:	4603      	mov	r3, r0
 800baae:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800bab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	da02      	bge.n	800babe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800bab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800babc:	e05d      	b.n	800bb7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800babe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bac2:	4933      	ldr	r1, [pc, #204]	@ (800bb90 <etharp_update_arp_entry+0x148>)
 800bac4:	4613      	mov	r3, r2
 800bac6:	005b      	lsls	r3, r3, #1
 800bac8:	4413      	add	r3, r2
 800baca:	00db      	lsls	r3, r3, #3
 800bacc:	440b      	add	r3, r1
 800bace:	3314      	adds	r3, #20
 800bad0:	2202      	movs	r2, #2
 800bad2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800bad4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bad8:	492d      	ldr	r1, [pc, #180]	@ (800bb90 <etharp_update_arp_entry+0x148>)
 800bada:	4613      	mov	r3, r2
 800badc:	005b      	lsls	r3, r3, #1
 800bade:	4413      	add	r3, r2
 800bae0:	00db      	lsls	r3, r3, #3
 800bae2:	440b      	add	r3, r1
 800bae4:	3308      	adds	r3, #8
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800baea:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800baee:	4613      	mov	r3, r2
 800baf0:	005b      	lsls	r3, r3, #1
 800baf2:	4413      	add	r3, r2
 800baf4:	00db      	lsls	r3, r3, #3
 800baf6:	3308      	adds	r3, #8
 800baf8:	4a25      	ldr	r2, [pc, #148]	@ (800bb90 <etharp_update_arp_entry+0x148>)
 800bafa:	4413      	add	r3, r2
 800bafc:	3304      	adds	r3, #4
 800bafe:	2206      	movs	r2, #6
 800bb00:	6879      	ldr	r1, [r7, #4]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f002 f90d 	bl	800dd22 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800bb08:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb0c:	4920      	ldr	r1, [pc, #128]	@ (800bb90 <etharp_update_arp_entry+0x148>)
 800bb0e:	4613      	mov	r3, r2
 800bb10:	005b      	lsls	r3, r3, #1
 800bb12:	4413      	add	r3, r2
 800bb14:	00db      	lsls	r3, r3, #3
 800bb16:	440b      	add	r3, r1
 800bb18:	3312      	adds	r3, #18
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800bb1e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb22:	491b      	ldr	r1, [pc, #108]	@ (800bb90 <etharp_update_arp_entry+0x148>)
 800bb24:	4613      	mov	r3, r2
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	4413      	add	r3, r2
 800bb2a:	00db      	lsls	r3, r3, #3
 800bb2c:	440b      	add	r3, r1
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d021      	beq.n	800bb78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800bb34:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb38:	4915      	ldr	r1, [pc, #84]	@ (800bb90 <etharp_update_arp_entry+0x148>)
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	4413      	add	r3, r2
 800bb40:	00db      	lsls	r3, r3, #3
 800bb42:	440b      	add	r3, r1
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800bb48:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bb4c:	4910      	ldr	r1, [pc, #64]	@ (800bb90 <etharp_update_arp_entry+0x148>)
 800bb4e:	4613      	mov	r3, r2
 800bb50:	005b      	lsls	r3, r3, #1
 800bb52:	4413      	add	r3, r2
 800bb54:	00db      	lsls	r3, r3, #3
 800bb56:	440b      	add	r3, r1
 800bb58:	2200      	movs	r2, #0
 800bb5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800bb62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6939      	ldr	r1, [r7, #16]
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	f001 fed5 	bl	800d91c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800bb72:	6938      	ldr	r0, [r7, #16]
 800bb74:	f7f9 fe5a 	bl	800582c <pbuf_free>
  }
  return ERR_OK;
 800bb78:	2300      	movs	r3, #0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3718      	adds	r7, #24
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	08010154 	.word	0x08010154
 800bb88:	0801024c 	.word	0x0801024c
 800bb8c:	080101cc 	.word	0x080101cc
 800bb90:	20008368 	.word	0x20008368

0800bb94 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800bb94:	b5b0      	push	{r4, r5, r7, lr}
 800bb96:	b08a      	sub	sp, #40	@ 0x28
 800bb98:	af04      	add	r7, sp, #16
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d107      	bne.n	800bbb4 <etharp_input+0x20>
 800bba4:	4b3d      	ldr	r3, [pc, #244]	@ (800bc9c <etharp_input+0x108>)
 800bba6:	f44f 7222 	mov.w	r2, #648	@ 0x288
 800bbaa:	493d      	ldr	r1, [pc, #244]	@ (800bca0 <etharp_input+0x10c>)
 800bbac:	483d      	ldr	r0, [pc, #244]	@ (800bca4 <etharp_input+0x110>)
 800bbae:	f001 ffbf 	bl	800db30 <iprintf>
 800bbb2:	e06f      	b.n	800bc94 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	881b      	ldrh	r3, [r3, #0]
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbc4:	d10c      	bne.n	800bbe0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800bbca:	2b06      	cmp	r3, #6
 800bbcc:	d108      	bne.n	800bbe0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800bbd2:	2b04      	cmp	r3, #4
 800bbd4:	d104      	bne.n	800bbe0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	885b      	ldrh	r3, [r3, #2]
 800bbda:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800bbdc:	2b08      	cmp	r3, #8
 800bbde:	d003      	beq.n	800bbe8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f7f9 fe23 	bl	800582c <pbuf_free>
    return;
 800bbe6:	e055      	b.n	800bc94 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	330e      	adds	r3, #14
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	3318      	adds	r3, #24
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d102      	bne.n	800bc08 <etharp_input+0x74>
    for_us = 0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	75fb      	strb	r3, [r7, #23]
 800bc06:	e009      	b.n	800bc1c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	bf0c      	ite	eq
 800bc14:	2301      	moveq	r3, #1
 800bc16:	2300      	movne	r3, #0
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f103 0208 	add.w	r2, r3, #8
 800bc22:	7dfb      	ldrb	r3, [r7, #23]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <etharp_input+0x98>
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e000      	b.n	800bc2e <etharp_input+0x9a>
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	f107 010c 	add.w	r1, r7, #12
 800bc32:	6838      	ldr	r0, [r7, #0]
 800bc34:	f7ff ff08 	bl	800ba48 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	88db      	ldrh	r3, [r3, #6]
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc42:	d003      	beq.n	800bc4c <etharp_input+0xb8>
 800bc44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc48:	d01e      	beq.n	800bc88 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800bc4a:	e020      	b.n	800bc8e <etharp_input+0xfa>
    if (for_us) {
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d01c      	beq.n	800bc8c <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	f103 0529 	add.w	r5, r3, #41	@ 0x29
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800bc68:	693a      	ldr	r2, [r7, #16]
 800bc6a:	3208      	adds	r2, #8
      etharp_raw(netif,
 800bc6c:	2102      	movs	r1, #2
 800bc6e:	9103      	str	r1, [sp, #12]
 800bc70:	f107 010c 	add.w	r1, r7, #12
 800bc74:	9102      	str	r1, [sp, #8]
 800bc76:	9201      	str	r2, [sp, #4]
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	462b      	mov	r3, r5
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	4601      	mov	r1, r0
 800bc80:	6838      	ldr	r0, [r7, #0]
 800bc82:	f000 fae1 	bl	800c248 <etharp_raw>
    break;
 800bc86:	e001      	b.n	800bc8c <etharp_input+0xf8>
    break;
 800bc88:	bf00      	nop
 800bc8a:	e000      	b.n	800bc8e <etharp_input+0xfa>
    break;
 800bc8c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f7f9 fdcc 	bl	800582c <pbuf_free>
}
 800bc94:	3718      	adds	r7, #24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bdb0      	pop	{r4, r5, r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	08010154 	.word	0x08010154
 800bca0:	080102a4 	.word	0x080102a4
 800bca4:	080101cc 	.word	0x080101cc

0800bca8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af02      	add	r7, sp, #8
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800bcb6:	79fa      	ldrb	r2, [r7, #7]
 800bcb8:	4944      	ldr	r1, [pc, #272]	@ (800bdcc <etharp_output_to_arp_index+0x124>)
 800bcba:	4613      	mov	r3, r2
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	4413      	add	r3, r2
 800bcc0:	00db      	lsls	r3, r3, #3
 800bcc2:	440b      	add	r3, r1
 800bcc4:	3314      	adds	r3, #20
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d806      	bhi.n	800bcda <etharp_output_to_arp_index+0x32>
 800bccc:	4b40      	ldr	r3, [pc, #256]	@ (800bdd0 <etharp_output_to_arp_index+0x128>)
 800bcce:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 800bcd2:	4940      	ldr	r1, [pc, #256]	@ (800bdd4 <etharp_output_to_arp_index+0x12c>)
 800bcd4:	4840      	ldr	r0, [pc, #256]	@ (800bdd8 <etharp_output_to_arp_index+0x130>)
 800bcd6:	f001 ff2b 	bl	800db30 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bcda:	79fa      	ldrb	r2, [r7, #7]
 800bcdc:	493b      	ldr	r1, [pc, #236]	@ (800bdcc <etharp_output_to_arp_index+0x124>)
 800bcde:	4613      	mov	r3, r2
 800bce0:	005b      	lsls	r3, r3, #1
 800bce2:	4413      	add	r3, r2
 800bce4:	00db      	lsls	r3, r3, #3
 800bce6:	440b      	add	r3, r1
 800bce8:	3314      	adds	r3, #20
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d153      	bne.n	800bd98 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800bcf0:	79fa      	ldrb	r2, [r7, #7]
 800bcf2:	4936      	ldr	r1, [pc, #216]	@ (800bdcc <etharp_output_to_arp_index+0x124>)
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	4413      	add	r3, r2
 800bcfa:	00db      	lsls	r3, r3, #3
 800bcfc:	440b      	add	r3, r1
 800bcfe:	3312      	adds	r3, #18
 800bd00:	881b      	ldrh	r3, [r3, #0]
 800bd02:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800bd06:	d919      	bls.n	800bd3c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800bd08:	79fa      	ldrb	r2, [r7, #7]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	4413      	add	r3, r2
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	4a2e      	ldr	r2, [pc, #184]	@ (800bdcc <etharp_output_to_arp_index+0x124>)
 800bd14:	4413      	add	r3, r2
 800bd16:	3304      	adds	r3, #4
 800bd18:	4619      	mov	r1, r3
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f000 fb42 	bl	800c3a4 <etharp_request>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d138      	bne.n	800bd98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bd26:	79fa      	ldrb	r2, [r7, #7]
 800bd28:	4928      	ldr	r1, [pc, #160]	@ (800bdcc <etharp_output_to_arp_index+0x124>)
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	005b      	lsls	r3, r3, #1
 800bd2e:	4413      	add	r3, r2
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	440b      	add	r3, r1
 800bd34:	3314      	adds	r3, #20
 800bd36:	2203      	movs	r2, #3
 800bd38:	701a      	strb	r2, [r3, #0]
 800bd3a:	e02d      	b.n	800bd98 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800bd3c:	79fa      	ldrb	r2, [r7, #7]
 800bd3e:	4923      	ldr	r1, [pc, #140]	@ (800bdcc <etharp_output_to_arp_index+0x124>)
 800bd40:	4613      	mov	r3, r2
 800bd42:	005b      	lsls	r3, r3, #1
 800bd44:	4413      	add	r3, r2
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	440b      	add	r3, r1
 800bd4a:	3312      	adds	r3, #18
 800bd4c:	881b      	ldrh	r3, [r3, #0]
 800bd4e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800bd52:	d321      	bcc.n	800bd98 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800bd54:	79fa      	ldrb	r2, [r7, #7]
 800bd56:	4613      	mov	r3, r2
 800bd58:	005b      	lsls	r3, r3, #1
 800bd5a:	4413      	add	r3, r2
 800bd5c:	00db      	lsls	r3, r3, #3
 800bd5e:	4a1b      	ldr	r2, [pc, #108]	@ (800bdcc <etharp_output_to_arp_index+0x124>)
 800bd60:	4413      	add	r3, r2
 800bd62:	1d19      	adds	r1, r3, #4
 800bd64:	79fa      	ldrb	r2, [r7, #7]
 800bd66:	4613      	mov	r3, r2
 800bd68:	005b      	lsls	r3, r3, #1
 800bd6a:	4413      	add	r3, r2
 800bd6c:	00db      	lsls	r3, r3, #3
 800bd6e:	3308      	adds	r3, #8
 800bd70:	4a16      	ldr	r2, [pc, #88]	@ (800bdcc <etharp_output_to_arp_index+0x124>)
 800bd72:	4413      	add	r3, r2
 800bd74:	3304      	adds	r3, #4
 800bd76:	461a      	mov	r2, r3
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f000 faf1 	bl	800c360 <etharp_request_dst>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d109      	bne.n	800bd98 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bd84:	79fa      	ldrb	r2, [r7, #7]
 800bd86:	4911      	ldr	r1, [pc, #68]	@ (800bdcc <etharp_output_to_arp_index+0x124>)
 800bd88:	4613      	mov	r3, r2
 800bd8a:	005b      	lsls	r3, r3, #1
 800bd8c:	4413      	add	r3, r2
 800bd8e:	00db      	lsls	r3, r3, #3
 800bd90:	440b      	add	r3, r1
 800bd92:	3314      	adds	r3, #20
 800bd94:	2203      	movs	r2, #3
 800bd96:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f103 0129 	add.w	r1, r3, #41	@ 0x29
 800bd9e:	79fa      	ldrb	r2, [r7, #7]
 800bda0:	4613      	mov	r3, r2
 800bda2:	005b      	lsls	r3, r3, #1
 800bda4:	4413      	add	r3, r2
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	3308      	adds	r3, #8
 800bdaa:	4a08      	ldr	r2, [pc, #32]	@ (800bdcc <etharp_output_to_arp_index+0x124>)
 800bdac:	4413      	add	r3, r2
 800bdae:	3304      	adds	r3, #4
 800bdb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bdb4:	9200      	str	r2, [sp, #0]
 800bdb6:	460a      	mov	r2, r1
 800bdb8:	68b9      	ldr	r1, [r7, #8]
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f001 fdae 	bl	800d91c <ethernet_output>
 800bdc0:	4603      	mov	r3, r0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	20008368 	.word	0x20008368
 800bdd0:	08010154 	.word	0x08010154
 800bdd4:	080102c4 	.word	0x080102c4
 800bdd8:	080101cc 	.word	0x080101cc

0800bddc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08a      	sub	sp, #40	@ 0x28
 800bde0:	af02      	add	r7, sp, #8
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d106      	bne.n	800be00 <etharp_output+0x24>
 800bdf2:	4b69      	ldr	r3, [pc, #420]	@ (800bf98 <etharp_output+0x1bc>)
 800bdf4:	f240 321b 	movw	r2, #795	@ 0x31b
 800bdf8:	4968      	ldr	r1, [pc, #416]	@ (800bf9c <etharp_output+0x1c0>)
 800bdfa:	4869      	ldr	r0, [pc, #420]	@ (800bfa0 <etharp_output+0x1c4>)
 800bdfc:	f001 fe98 	bl	800db30 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d106      	bne.n	800be14 <etharp_output+0x38>
 800be06:	4b64      	ldr	r3, [pc, #400]	@ (800bf98 <etharp_output+0x1bc>)
 800be08:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800be0c:	4965      	ldr	r1, [pc, #404]	@ (800bfa4 <etharp_output+0x1c8>)
 800be0e:	4864      	ldr	r0, [pc, #400]	@ (800bfa0 <etharp_output+0x1c4>)
 800be10:	f001 fe8e 	bl	800db30 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d106      	bne.n	800be28 <etharp_output+0x4c>
 800be1a:	4b5f      	ldr	r3, [pc, #380]	@ (800bf98 <etharp_output+0x1bc>)
 800be1c:	f240 321d 	movw	r2, #797	@ 0x31d
 800be20:	4961      	ldr	r1, [pc, #388]	@ (800bfa8 <etharp_output+0x1cc>)
 800be22:	485f      	ldr	r0, [pc, #380]	@ (800bfa0 <etharp_output+0x1c4>)
 800be24:	f001 fe84 	bl	800db30 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68f9      	ldr	r1, [r7, #12]
 800be2e:	4618      	mov	r0, r3
 800be30:	f000 fed2 	bl	800cbd8 <ip4_addr_isbroadcast_u32>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d002      	beq.n	800be40 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800be3a:	4b5c      	ldr	r3, [pc, #368]	@ (800bfac <etharp_output+0x1d0>)
 800be3c:	61fb      	str	r3, [r7, #28]
 800be3e:	e09b      	b.n	800bf78 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be48:	2be0      	cmp	r3, #224	@ 0xe0
 800be4a:	d118      	bne.n	800be7e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800be4c:	2301      	movs	r3, #1
 800be4e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800be50:	2300      	movs	r3, #0
 800be52:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800be54:	235e      	movs	r3, #94	@ 0x5e
 800be56:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3301      	adds	r3, #1
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be62:	b2db      	uxtb	r3, r3
 800be64:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	3302      	adds	r3, #2
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	3303      	adds	r3, #3
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800be76:	f107 0310 	add.w	r3, r7, #16
 800be7a:	61fb      	str	r3, [r7, #28]
 800be7c:	e07c      	b.n	800bf78 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3304      	adds	r3, #4
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	405a      	eors	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3308      	adds	r3, #8
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4013      	ands	r3, r2
 800be92:	2b00      	cmp	r3, #0
 800be94:	d012      	beq.n	800bebc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800be9c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d00b      	beq.n	800bebc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	330c      	adds	r3, #12
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d003      	beq.n	800beb6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	330c      	adds	r3, #12
 800beb2:	61bb      	str	r3, [r7, #24]
 800beb4:	e002      	b.n	800bebc <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800beb6:	f06f 0303 	mvn.w	r3, #3
 800beba:	e069      	b.n	800bf90 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bebc:	4b3c      	ldr	r3, [pc, #240]	@ (800bfb0 <etharp_output+0x1d4>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	4619      	mov	r1, r3
 800bec2:	4a3c      	ldr	r2, [pc, #240]	@ (800bfb4 <etharp_output+0x1d8>)
 800bec4:	460b      	mov	r3, r1
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	440b      	add	r3, r1
 800beca:	00db      	lsls	r3, r3, #3
 800becc:	4413      	add	r3, r2
 800bece:	3314      	adds	r3, #20
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d917      	bls.n	800bf06 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	4b35      	ldr	r3, [pc, #212]	@ (800bfb0 <etharp_output+0x1d4>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	4618      	mov	r0, r3
 800bee0:	4934      	ldr	r1, [pc, #208]	@ (800bfb4 <etharp_output+0x1d8>)
 800bee2:	4603      	mov	r3, r0
 800bee4:	005b      	lsls	r3, r3, #1
 800bee6:	4403      	add	r3, r0
 800bee8:	00db      	lsls	r3, r3, #3
 800beea:	440b      	add	r3, r1
 800beec:	3304      	adds	r3, #4
 800beee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d108      	bne.n	800bf06 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bef4:	4b2e      	ldr	r3, [pc, #184]	@ (800bfb0 <etharp_output+0x1d4>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	461a      	mov	r2, r3
 800befa:	68b9      	ldr	r1, [r7, #8]
 800befc:	68f8      	ldr	r0, [r7, #12]
 800befe:	f7ff fed3 	bl	800bca8 <etharp_output_to_arp_index>
 800bf02:	4603      	mov	r3, r0
 800bf04:	e044      	b.n	800bf90 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bf06:	2300      	movs	r3, #0
 800bf08:	75fb      	strb	r3, [r7, #23]
 800bf0a:	e02a      	b.n	800bf62 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bf0c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bf10:	4928      	ldr	r1, [pc, #160]	@ (800bfb4 <etharp_output+0x1d8>)
 800bf12:	4613      	mov	r3, r2
 800bf14:	005b      	lsls	r3, r3, #1
 800bf16:	4413      	add	r3, r2
 800bf18:	00db      	lsls	r3, r3, #3
 800bf1a:	440b      	add	r3, r1
 800bf1c:	3314      	adds	r3, #20
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d918      	bls.n	800bf56 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	6819      	ldr	r1, [r3, #0]
 800bf28:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bf2c:	4821      	ldr	r0, [pc, #132]	@ (800bfb4 <etharp_output+0x1d8>)
 800bf2e:	4613      	mov	r3, r2
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	4413      	add	r3, r2
 800bf34:	00db      	lsls	r3, r3, #3
 800bf36:	4403      	add	r3, r0
 800bf38:	3304      	adds	r3, #4
 800bf3a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bf3c:	4299      	cmp	r1, r3
 800bf3e:	d10a      	bne.n	800bf56 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800bf40:	7dfa      	ldrb	r2, [r7, #23]
 800bf42:	4b1b      	ldr	r3, [pc, #108]	@ (800bfb0 <etharp_output+0x1d4>)
 800bf44:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	68b9      	ldr	r1, [r7, #8]
 800bf4c:	68f8      	ldr	r0, [r7, #12]
 800bf4e:	f7ff feab 	bl	800bca8 <etharp_output_to_arp_index>
 800bf52:	4603      	mov	r3, r0
 800bf54:	e01c      	b.n	800bf90 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bf56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	75fb      	strb	r3, [r7, #23]
 800bf62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf66:	2b09      	cmp	r3, #9
 800bf68:	ddd0      	ble.n	800bf0c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	69b9      	ldr	r1, [r7, #24]
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f000 f822 	bl	800bfb8 <etharp_query>
 800bf74:	4603      	mov	r3, r0
 800bf76:	e00b      	b.n	800bf90 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800bf7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f001 fcc7 	bl	800d91c <ethernet_output>
 800bf8e:	4603      	mov	r3, r0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3720      	adds	r7, #32
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	08010154 	.word	0x08010154
 800bf9c:	080102a4 	.word	0x080102a4
 800bfa0:	080101cc 	.word	0x080101cc
 800bfa4:	080102f4 	.word	0x080102f4
 800bfa8:	08010294 	.word	0x08010294
 800bfac:	08011910 	.word	0x08011910
 800bfb0:	20008458 	.word	0x20008458
 800bfb4:	20008368 	.word	0x20008368

0800bfb8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b08c      	sub	sp, #48	@ 0x30
 800bfbc:	af02      	add	r7, sp, #8
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3329      	adds	r3, #41	@ 0x29
 800bfc8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bfca:	23ff      	movs	r3, #255	@ 0xff
 800bfcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68f9      	ldr	r1, [r7, #12]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 fdfc 	bl	800cbd8 <ip4_addr_isbroadcast_u32>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d10c      	bne.n	800c000 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bfee:	2be0      	cmp	r3, #224	@ 0xe0
 800bff0:	d006      	beq.n	800c000 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d003      	beq.n	800c000 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d102      	bne.n	800c006 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c000:	f06f 030f 	mvn.w	r3, #15
 800c004:	e10e      	b.n	800c224 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	2101      	movs	r1, #1
 800c00a:	68b8      	ldr	r0, [r7, #8]
 800c00c:	f7ff fbd2 	bl	800b7b4 <etharp_find_entry>
 800c010:	4603      	mov	r3, r0
 800c012:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800c014:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	da02      	bge.n	800c022 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800c01c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c020:	e100      	b.n	800c224 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c022:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c026:	4981      	ldr	r1, [pc, #516]	@ (800c22c <etharp_query+0x274>)
 800c028:	4613      	mov	r3, r2
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	4413      	add	r3, r2
 800c02e:	00db      	lsls	r3, r3, #3
 800c030:	440b      	add	r3, r1
 800c032:	3314      	adds	r3, #20
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d117      	bne.n	800c06a <etharp_query+0xb2>
    is_new_entry = 1;
 800c03a:	2301      	movs	r3, #1
 800c03c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c03e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c042:	497a      	ldr	r1, [pc, #488]	@ (800c22c <etharp_query+0x274>)
 800c044:	4613      	mov	r3, r2
 800c046:	005b      	lsls	r3, r3, #1
 800c048:	4413      	add	r3, r2
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	440b      	add	r3, r1
 800c04e:	3314      	adds	r3, #20
 800c050:	2201      	movs	r2, #1
 800c052:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c054:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c058:	4974      	ldr	r1, [pc, #464]	@ (800c22c <etharp_query+0x274>)
 800c05a:	4613      	mov	r3, r2
 800c05c:	005b      	lsls	r3, r3, #1
 800c05e:	4413      	add	r3, r2
 800c060:	00db      	lsls	r3, r3, #3
 800c062:	440b      	add	r3, r1
 800c064:	3308      	adds	r3, #8
 800c066:	68fa      	ldr	r2, [r7, #12]
 800c068:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c06a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c06e:	496f      	ldr	r1, [pc, #444]	@ (800c22c <etharp_query+0x274>)
 800c070:	4613      	mov	r3, r2
 800c072:	005b      	lsls	r3, r3, #1
 800c074:	4413      	add	r3, r2
 800c076:	00db      	lsls	r3, r3, #3
 800c078:	440b      	add	r3, r1
 800c07a:	3314      	adds	r3, #20
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d012      	beq.n	800c0a8 <etharp_query+0xf0>
 800c082:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c086:	4969      	ldr	r1, [pc, #420]	@ (800c22c <etharp_query+0x274>)
 800c088:	4613      	mov	r3, r2
 800c08a:	005b      	lsls	r3, r3, #1
 800c08c:	4413      	add	r3, r2
 800c08e:	00db      	lsls	r3, r3, #3
 800c090:	440b      	add	r3, r1
 800c092:	3314      	adds	r3, #20
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d806      	bhi.n	800c0a8 <etharp_query+0xf0>
 800c09a:	4b65      	ldr	r3, [pc, #404]	@ (800c230 <etharp_query+0x278>)
 800c09c:	f240 32c7 	movw	r2, #967	@ 0x3c7
 800c0a0:	4964      	ldr	r1, [pc, #400]	@ (800c234 <etharp_query+0x27c>)
 800c0a2:	4865      	ldr	r0, [pc, #404]	@ (800c238 <etharp_query+0x280>)
 800c0a4:	f001 fd44 	bl	800db30 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c0a8:	6a3b      	ldr	r3, [r7, #32]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d102      	bne.n	800c0b4 <etharp_query+0xfc>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10c      	bne.n	800c0ce <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c0b4:	68b9      	ldr	r1, [r7, #8]
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	f000 f974 	bl	800c3a4 <etharp_request>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d102      	bne.n	800c0ce <etharp_query+0x116>
      return result;
 800c0c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c0cc:	e0aa      	b.n	800c224 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d106      	bne.n	800c0e2 <etharp_query+0x12a>
 800c0d4:	4b56      	ldr	r3, [pc, #344]	@ (800c230 <etharp_query+0x278>)
 800c0d6:	f240 32db 	movw	r2, #987	@ 0x3db
 800c0da:	4958      	ldr	r1, [pc, #352]	@ (800c23c <etharp_query+0x284>)
 800c0dc:	4856      	ldr	r0, [pc, #344]	@ (800c238 <etharp_query+0x280>)
 800c0de:	f001 fd27 	bl	800db30 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c0e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c0e6:	4951      	ldr	r1, [pc, #324]	@ (800c22c <etharp_query+0x274>)
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	005b      	lsls	r3, r3, #1
 800c0ec:	4413      	add	r3, r2
 800c0ee:	00db      	lsls	r3, r3, #3
 800c0f0:	440b      	add	r3, r1
 800c0f2:	3314      	adds	r3, #20
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d918      	bls.n	800c12c <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800c0fa:	7cfa      	ldrb	r2, [r7, #19]
 800c0fc:	4b50      	ldr	r3, [pc, #320]	@ (800c240 <etharp_query+0x288>)
 800c0fe:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c100:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c104:	4613      	mov	r3, r2
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	4413      	add	r3, r2
 800c10a:	00db      	lsls	r3, r3, #3
 800c10c:	3308      	adds	r3, #8
 800c10e:	4a47      	ldr	r2, [pc, #284]	@ (800c22c <etharp_query+0x274>)
 800c110:	4413      	add	r3, r2
 800c112:	3304      	adds	r3, #4
 800c114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c118:	9200      	str	r2, [sp, #0]
 800c11a:	697a      	ldr	r2, [r7, #20]
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f001 fbfc 	bl	800d91c <ethernet_output>
 800c124:	4603      	mov	r3, r0
 800c126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c12a:	e079      	b.n	800c220 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c12c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c130:	493e      	ldr	r1, [pc, #248]	@ (800c22c <etharp_query+0x274>)
 800c132:	4613      	mov	r3, r2
 800c134:	005b      	lsls	r3, r3, #1
 800c136:	4413      	add	r3, r2
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	440b      	add	r3, r1
 800c13c:	3314      	adds	r3, #20
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	2b01      	cmp	r3, #1
 800c142:	d16d      	bne.n	800c220 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c144:	2300      	movs	r3, #0
 800c146:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c14c:	e01a      	b.n	800c184 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	895a      	ldrh	r2, [r3, #10]
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	891b      	ldrh	r3, [r3, #8]
 800c156:	429a      	cmp	r2, r3
 800c158:	d10a      	bne.n	800c170 <etharp_query+0x1b8>
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d006      	beq.n	800c170 <etharp_query+0x1b8>
 800c162:	4b33      	ldr	r3, [pc, #204]	@ (800c230 <etharp_query+0x278>)
 800c164:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800c168:	4936      	ldr	r1, [pc, #216]	@ (800c244 <etharp_query+0x28c>)
 800c16a:	4833      	ldr	r0, [pc, #204]	@ (800c238 <etharp_query+0x280>)
 800c16c:	f001 fce0 	bl	800db30 <iprintf>
      if (p->type != PBUF_ROM) {
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	7b1b      	ldrb	r3, [r3, #12]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d002      	beq.n	800c17e <etharp_query+0x1c6>
        copy_needed = 1;
 800c178:	2301      	movs	r3, #1
 800c17a:	61bb      	str	r3, [r7, #24]
        break;
 800c17c:	e005      	b.n	800c18a <etharp_query+0x1d2>
      }
      p = p->next;
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1e1      	bne.n	800c14e <etharp_query+0x196>
    }
    if (copy_needed) {
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d017      	beq.n	800c1c0 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	891b      	ldrh	r3, [r3, #8]
 800c194:	2200      	movs	r2, #0
 800c196:	4619      	mov	r1, r3
 800c198:	2002      	movs	r0, #2
 800c19a:	f7f8 ffcf 	bl	800513c <pbuf_alloc>
 800c19e:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d011      	beq.n	800c1ca <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800c1a6:	6879      	ldr	r1, [r7, #4]
 800c1a8:	69f8      	ldr	r0, [r7, #28]
 800c1aa:	f7f9 fc61 	bl	8005a70 <pbuf_copy>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00a      	beq.n	800c1ca <etharp_query+0x212>
          pbuf_free(p);
 800c1b4:	69f8      	ldr	r0, [r7, #28]
 800c1b6:	f7f9 fb39 	bl	800582c <pbuf_free>
          p = NULL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	61fb      	str	r3, [r7, #28]
 800c1be:	e004      	b.n	800c1ca <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c1c4:	69f8      	ldr	r0, [r7, #28]
 800c1c6:	f7f9 fbdb 	bl	8005980 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d024      	beq.n	800c21a <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c1d0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c1d4:	4915      	ldr	r1, [pc, #84]	@ (800c22c <etharp_query+0x274>)
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	4413      	add	r3, r2
 800c1dc:	00db      	lsls	r3, r3, #3
 800c1de:	440b      	add	r3, r1
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00b      	beq.n	800c1fe <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800c1e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c1ea:	4910      	ldr	r1, [pc, #64]	@ (800c22c <etharp_query+0x274>)
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	005b      	lsls	r3, r3, #1
 800c1f0:	4413      	add	r3, r2
 800c1f2:	00db      	lsls	r3, r3, #3
 800c1f4:	440b      	add	r3, r1
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7f9 fb17 	bl	800582c <pbuf_free>
      }
      arp_table[i].q = p;
 800c1fe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800c202:	490a      	ldr	r1, [pc, #40]	@ (800c22c <etharp_query+0x274>)
 800c204:	4613      	mov	r3, r2
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	4413      	add	r3, r2
 800c20a:	00db      	lsls	r3, r3, #3
 800c20c:	440b      	add	r3, r1
 800c20e:	69fa      	ldr	r2, [r7, #28]
 800c210:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c218:	e002      	b.n	800c220 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c21a:	23ff      	movs	r3, #255	@ 0xff
 800c21c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800c220:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c224:	4618      	mov	r0, r3
 800c226:	3728      	adds	r7, #40	@ 0x28
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	20008368 	.word	0x20008368
 800c230:	08010154 	.word	0x08010154
 800c234:	08010300 	.word	0x08010300
 800c238:	080101cc 	.word	0x080101cc
 800c23c:	080102f4 	.word	0x080102f4
 800c240:	20008458 	.word	0x20008458
 800c244:	08010328 	.word	0x08010328

0800c248 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08a      	sub	sp, #40	@ 0x28
 800c24c:	af02      	add	r7, sp, #8
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
 800c254:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d106      	bne.n	800c26e <etharp_raw+0x26>
 800c260:	4b3a      	ldr	r3, [pc, #232]	@ (800c34c <etharp_raw+0x104>)
 800c262:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 800c266:	493a      	ldr	r1, [pc, #232]	@ (800c350 <etharp_raw+0x108>)
 800c268:	483a      	ldr	r0, [pc, #232]	@ (800c354 <etharp_raw+0x10c>)
 800c26a:	f001 fc61 	bl	800db30 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c26e:	2200      	movs	r2, #0
 800c270:	211c      	movs	r1, #28
 800c272:	2002      	movs	r0, #2
 800c274:	f7f8 ff62 	bl	800513c <pbuf_alloc>
 800c278:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d102      	bne.n	800c286 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c280:	f04f 33ff 	mov.w	r3, #4294967295
 800c284:	e05d      	b.n	800c342 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	895b      	ldrh	r3, [r3, #10]
 800c28a:	2b1b      	cmp	r3, #27
 800c28c:	d806      	bhi.n	800c29c <etharp_raw+0x54>
 800c28e:	4b2f      	ldr	r3, [pc, #188]	@ (800c34c <etharp_raw+0x104>)
 800c290:	f240 4263 	movw	r2, #1123	@ 0x463
 800c294:	4930      	ldr	r1, [pc, #192]	@ (800c358 <etharp_raw+0x110>)
 800c296:	482f      	ldr	r0, [pc, #188]	@ (800c354 <etharp_raw+0x10c>)
 800c298:	f001 fc4a 	bl	800db30 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c2a2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7f8 f97b 	bl	80045a0 <lwip_htons>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2b8:	2b06      	cmp	r3, #6
 800c2ba:	d006      	beq.n	800c2ca <etharp_raw+0x82>
 800c2bc:	4b23      	ldr	r3, [pc, #140]	@ (800c34c <etharp_raw+0x104>)
 800c2be:	f240 426a 	movw	r2, #1130	@ 0x46a
 800c2c2:	4926      	ldr	r1, [pc, #152]	@ (800c35c <etharp_raw+0x114>)
 800c2c4:	4823      	ldr	r0, [pc, #140]	@ (800c354 <etharp_raw+0x10c>)
 800c2c6:	f001 fc33 	bl	800db30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	2206      	movs	r2, #6
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f001 fd25 	bl	800dd22 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	3312      	adds	r3, #18
 800c2dc:	2206      	movs	r2, #6
 800c2de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f001 fd1e 	bl	800dd22 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	330e      	adds	r3, #14
 800c2ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2ec:	6812      	ldr	r2, [r2, #0]
 800c2ee:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	3318      	adds	r3, #24
 800c2f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2f6:	6812      	ldr	r2, [r2, #0]
 800c2f8:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	701a      	strb	r2, [r3, #0]
 800c300:	2200      	movs	r2, #0
 800c302:	f042 0201 	orr.w	r2, r2, #1
 800c306:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f042 0208 	orr.w	r2, r2, #8
 800c310:	709a      	strb	r2, [r3, #2]
 800c312:	2200      	movs	r2, #0
 800c314:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2206      	movs	r2, #6
 800c31a:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	2204      	movs	r2, #4
 800c320:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c322:	f640 0306 	movw	r3, #2054	@ 0x806
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	69b9      	ldr	r1, [r7, #24]
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f001 faf4 	bl	800d91c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c334:	69b8      	ldr	r0, [r7, #24]
 800c336:	f7f9 fa79 	bl	800582c <pbuf_free>
  p = NULL;
 800c33a:	2300      	movs	r3, #0
 800c33c:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c33e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c342:	4618      	mov	r0, r3
 800c344:	3720      	adds	r7, #32
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	08010154 	.word	0x08010154
 800c350:	080102a4 	.word	0x080102a4
 800c354:	080101cc 	.word	0x080101cc
 800c358:	08010344 	.word	0x08010344
 800c35c:	08010378 	.word	0x08010378

0800c360 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af04      	add	r7, sp, #16
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f103 0129 	add.w	r1, r3, #41	@ 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c37c:	2201      	movs	r2, #1
 800c37e:	9203      	str	r2, [sp, #12]
 800c380:	68ba      	ldr	r2, [r7, #8]
 800c382:	9202      	str	r2, [sp, #8]
 800c384:	4a06      	ldr	r2, [pc, #24]	@ (800c3a0 <etharp_request_dst+0x40>)
 800c386:	9201      	str	r2, [sp, #4]
 800c388:	9300      	str	r3, [sp, #0]
 800c38a:	4603      	mov	r3, r0
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f7ff ff5a 	bl	800c248 <etharp_raw>
 800c394:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	08011918 	.word	0x08011918

0800c3a4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c3ae:	4a05      	ldr	r2, [pc, #20]	@ (800c3c4 <etharp_request+0x20>)
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7ff ffd4 	bl	800c360 <etharp_request_dst>
 800c3b8:	4603      	mov	r3, r0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	08011910 	.word	0x08011910

0800c3c8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08e      	sub	sp, #56	@ 0x38
 800c3cc:	af04      	add	r7, sp, #16
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c3d2:	4b7a      	ldr	r3, [pc, #488]	@ (800c5bc <icmp_input+0x1f4>)
 800c3d4:	689b      	ldr	r3, [r3, #8]
 800c3d6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	f003 030f 	and.w	r3, r3, #15
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800c3e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c3e8:	2b13      	cmp	r3, #19
 800c3ea:	f240 80d1 	bls.w	800c590 <icmp_input+0x1c8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	895b      	ldrh	r3, [r3, #10]
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	f240 80ce 	bls.w	800c594 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c402:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c406:	2b00      	cmp	r3, #0
 800c408:	f000 80bb 	beq.w	800c582 <icmp_input+0x1ba>
 800c40c:	2b08      	cmp	r3, #8
 800c40e:	f040 80bb 	bne.w	800c588 <icmp_input+0x1c0>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c412:	4b6b      	ldr	r3, [pc, #428]	@ (800c5c0 <icmp_input+0x1f8>)
 800c414:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c416:	4b69      	ldr	r3, [pc, #420]	@ (800c5bc <icmp_input+0x1f4>)
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c41e:	2be0      	cmp	r3, #224	@ 0xe0
 800c420:	f000 80bf 	beq.w	800c5a2 <icmp_input+0x1da>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c424:	4b65      	ldr	r3, [pc, #404]	@ (800c5bc <icmp_input+0x1f4>)
 800c426:	695b      	ldr	r3, [r3, #20]
 800c428:	4a64      	ldr	r2, [pc, #400]	@ (800c5bc <icmp_input+0x1f4>)
 800c42a:	6812      	ldr	r2, [r2, #0]
 800c42c:	4611      	mov	r1, r2
 800c42e:	4618      	mov	r0, r3
 800c430:	f000 fbd2 	bl	800cbd8 <ip4_addr_isbroadcast_u32>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	f040 80b5 	bne.w	800c5a6 <icmp_input+0x1de>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	891b      	ldrh	r3, [r3, #8]
 800c440:	2b07      	cmp	r3, #7
 800c442:	f240 80a9 	bls.w	800c598 <icmp_input+0x1d0>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c446:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c448:	330e      	adds	r3, #14
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	b21b      	sxth	r3, r3
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7f9 f9c7 	bl	80057e4 <pbuf_header>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d046      	beq.n	800c4ea <icmp_input+0x122>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	891a      	ldrh	r2, [r3, #8]
 800c460:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c462:	4413      	add	r3, r2
 800c464:	b29b      	uxth	r3, r3
 800c466:	2200      	movs	r2, #0
 800c468:	4619      	mov	r1, r3
 800c46a:	2002      	movs	r0, #2
 800c46c:	f7f8 fe66 	bl	800513c <pbuf_alloc>
 800c470:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	2b00      	cmp	r3, #0
 800c476:	f000 8098 	beq.w	800c5aa <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	895b      	ldrh	r3, [r3, #10]
 800c47e:	461a      	mov	r2, r3
 800c480:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c482:	3308      	adds	r3, #8
 800c484:	429a      	cmp	r2, r3
 800c486:	d203      	bcs.n	800c490 <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c488:	69b8      	ldr	r0, [r7, #24]
 800c48a:	f7f9 f9cf 	bl	800582c <pbuf_free>
        goto icmperr;
 800c48e:	e08d      	b.n	800c5ac <icmp_input+0x1e4>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c496:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c498:	4618      	mov	r0, r3
 800c49a:	f001 fc42 	bl	800dd22 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c49e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4a0:	425b      	negs	r3, r3
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	b21b      	sxth	r3, r3
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	69b8      	ldr	r0, [r7, #24]
 800c4aa:	f7f9 f99b 	bl	80057e4 <pbuf_header>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d009      	beq.n	800c4c8 <icmp_input+0x100>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c4b4:	4b43      	ldr	r3, [pc, #268]	@ (800c5c4 <icmp_input+0x1fc>)
 800c4b6:	22af      	movs	r2, #175	@ 0xaf
 800c4b8:	4943      	ldr	r1, [pc, #268]	@ (800c5c8 <icmp_input+0x200>)
 800c4ba:	4844      	ldr	r0, [pc, #272]	@ (800c5cc <icmp_input+0x204>)
 800c4bc:	f001 fb38 	bl	800db30 <iprintf>
        pbuf_free(r);
 800c4c0:	69b8      	ldr	r0, [r7, #24]
 800c4c2:	f7f9 f9b3 	bl	800582c <pbuf_free>
        goto icmperr;
 800c4c6:	e071      	b.n	800c5ac <icmp_input+0x1e4>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c4c8:	6879      	ldr	r1, [r7, #4]
 800c4ca:	69b8      	ldr	r0, [r7, #24]
 800c4cc:	f7f9 fad0 	bl	8005a70 <pbuf_copy>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d003      	beq.n	800c4de <icmp_input+0x116>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c4d6:	69b8      	ldr	r0, [r7, #24]
 800c4d8:	f7f9 f9a8 	bl	800582c <pbuf_free>
        goto icmperr;
 800c4dc:	e066      	b.n	800c5ac <icmp_input+0x1e4>
      }
      /* free the original p */
      pbuf_free(p);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7f9 f9a4 	bl	800582c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	607b      	str	r3, [r7, #4]
 800c4e8:	e015      	b.n	800c516 <icmp_input+0x14e>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c4ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4ec:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800c4f0:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800c4f4:	33f2      	adds	r3, #242	@ 0xf2
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	b21b      	sxth	r3, r3
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f7f9 f971 	bl	80057e4 <pbuf_header>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d006      	beq.n	800c516 <icmp_input+0x14e>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c508:	4b2e      	ldr	r3, [pc, #184]	@ (800c5c4 <icmp_input+0x1fc>)
 800c50a:	22c0      	movs	r2, #192	@ 0xc0
 800c50c:	4930      	ldr	r1, [pc, #192]	@ (800c5d0 <icmp_input+0x208>)
 800c50e:	482f      	ldr	r0, [pc, #188]	@ (800c5cc <icmp_input+0x204>)
 800c510:	f001 fb0e 	bl	800db30 <iprintf>
        goto icmperr;
 800c514:	e04a      	b.n	800c5ac <icmp_input+0x1e4>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800c51c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7f9 f95e 	bl	80057e4 <pbuf_header>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d12b      	bne.n	800c586 <icmp_input+0x1be>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c53c:	4b1f      	ldr	r3, [pc, #124]	@ (800c5bc <icmp_input+0x1f4>)
 800c53e:	691a      	ldr	r2, [r3, #16]
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	2200      	movs	r2, #0
 800c548:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2200      	movs	r2, #0
 800c54e:	709a      	strb	r2, [r3, #2]
 800c550:	2200      	movs	r2, #0
 800c552:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	22ff      	movs	r2, #255	@ 0xff
 800c558:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	2200      	movs	r2, #0
 800c55e:	729a      	strb	r2, [r3, #10]
 800c560:	2200      	movs	r2, #0
 800c562:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	9302      	str	r3, [sp, #8]
 800c568:	2301      	movs	r3, #1
 800c56a:	9301      	str	r3, [sp, #4]
 800c56c:	2300      	movs	r3, #0
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	23ff      	movs	r3, #255	@ 0xff
 800c572:	2200      	movs	r2, #0
 800c574:	69f9      	ldr	r1, [r7, #28]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fa5c 	bl	800ca34 <ip4_output_if>
 800c57c:	4603      	mov	r3, r0
 800c57e:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800c580:	e001      	b.n	800c586 <icmp_input+0x1be>
    break;
 800c582:	bf00      	nop
 800c584:	e000      	b.n	800c588 <icmp_input+0x1c0>
    break;
 800c586:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7f9 f94f 	bl	800582c <pbuf_free>
  return;
 800c58e:	e011      	b.n	800c5b4 <icmp_input+0x1ec>
    goto lenerr;
 800c590:	bf00      	nop
 800c592:	e002      	b.n	800c59a <icmp_input+0x1d2>
    goto lenerr;
 800c594:	bf00      	nop
 800c596:	e000      	b.n	800c59a <icmp_input+0x1d2>
      goto lenerr;
 800c598:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7f9 f946 	bl	800582c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c5a0:	e008      	b.n	800c5b4 <icmp_input+0x1ec>
      goto icmperr;
 800c5a2:	bf00      	nop
 800c5a4:	e002      	b.n	800c5ac <icmp_input+0x1e4>
      goto icmperr;
 800c5a6:	bf00      	nop
 800c5a8:	e000      	b.n	800c5ac <icmp_input+0x1e4>
        goto icmperr;
 800c5aa:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7f9 f93d 	bl	800582c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c5b2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c5b4:	3728      	adds	r7, #40	@ 0x28
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	20004dac 	.word	0x20004dac
 800c5c0:	20004dc0 	.word	0x20004dc0
 800c5c4:	080103bc 	.word	0x080103bc
 800c5c8:	080103f4 	.word	0x080103f4
 800c5cc:	0801042c 	.word	0x0801042c
 800c5d0:	08010454 	.word	0x08010454

0800c5d4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c5e0:	78fb      	ldrb	r3, [r7, #3]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	2103      	movs	r1, #3
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f814 	bl	800c614 <icmp_send_response>
}
 800c5ec:	bf00      	nop
 800c5ee:	3708      	adds	r7, #8
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c600:	78fb      	ldrb	r3, [r7, #3]
 800c602:	461a      	mov	r2, r3
 800c604:	210b      	movs	r1, #11
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f804 	bl	800c614 <icmp_send_response>
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08c      	sub	sp, #48	@ 0x30
 800c618:	af04      	add	r7, sp, #16
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	460b      	mov	r3, r1
 800c61e:	70fb      	strb	r3, [r7, #3]
 800c620:	4613      	mov	r3, r2
 800c622:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c624:	2200      	movs	r2, #0
 800c626:	2124      	movs	r1, #36	@ 0x24
 800c628:	2001      	movs	r0, #1
 800c62a:	f7f8 fd87 	bl	800513c <pbuf_alloc>
 800c62e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d04c      	beq.n	800c6d0 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	895b      	ldrh	r3, [r3, #10]
 800c63a:	2b23      	cmp	r3, #35	@ 0x23
 800c63c:	d806      	bhi.n	800c64c <icmp_send_response+0x38>
 800c63e:	4b26      	ldr	r3, [pc, #152]	@ (800c6d8 <icmp_send_response+0xc4>)
 800c640:	f240 1261 	movw	r2, #353	@ 0x161
 800c644:	4925      	ldr	r1, [pc, #148]	@ (800c6dc <icmp_send_response+0xc8>)
 800c646:	4826      	ldr	r0, [pc, #152]	@ (800c6e0 <icmp_send_response+0xcc>)
 800c648:	f001 fa72 	bl	800db30 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	78fa      	ldrb	r2, [r7, #3]
 800c65c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	78ba      	ldrb	r2, [r7, #2]
 800c662:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	2200      	movs	r2, #0
 800c668:	711a      	strb	r2, [r3, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	2200      	movs	r2, #0
 800c672:	719a      	strb	r2, [r3, #6]
 800c674:	2200      	movs	r2, #0
 800c676:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	f103 0008 	add.w	r0, r3, #8
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	221c      	movs	r2, #28
 800c686:	4619      	mov	r1, r3
 800c688:	f001 fb4b 	bl	800dd22 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c692:	f107 030c 	add.w	r3, r7, #12
 800c696:	4618      	mov	r0, r3
 800c698:	f000 f824 	bl	800c6e4 <ip4_route>
 800c69c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d011      	beq.n	800c6c8 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	709a      	strb	r2, [r3, #2]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c6ae:	f107 020c 	add.w	r2, r7, #12
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	9302      	str	r3, [sp, #8]
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	9301      	str	r3, [sp, #4]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	23ff      	movs	r3, #255	@ 0xff
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	69f8      	ldr	r0, [r7, #28]
 800c6c4:	f000 f9b6 	bl	800ca34 <ip4_output_if>
  }
  pbuf_free(q);
 800c6c8:	69f8      	ldr	r0, [r7, #28]
 800c6ca:	f7f9 f8af 	bl	800582c <pbuf_free>
 800c6ce:	e000      	b.n	800c6d2 <icmp_send_response+0xbe>
    return;
 800c6d0:	bf00      	nop
}
 800c6d2:	3720      	adds	r7, #32
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	080103bc 	.word	0x080103bc
 800c6dc:	08010488 	.word	0x08010488
 800c6e0:	0801042c 	.word	0x0801042c

0800c6e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c6ec:	4b30      	ldr	r3, [pc, #192]	@ (800c7b0 <ip4_route+0xcc>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	60fb      	str	r3, [r7, #12]
 800c6f2:	e036      	b.n	800c762 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c6fa:	f003 0301 	and.w	r3, r3, #1
 800c6fe:	b2db      	uxtb	r3, r3
 800c700:	2b00      	cmp	r3, #0
 800c702:	d02b      	beq.n	800c75c <ip4_route+0x78>
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c70a:	089b      	lsrs	r3, r3, #2
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	b2db      	uxtb	r3, r3
 800c712:	2b00      	cmp	r3, #0
 800c714:	d022      	beq.n	800c75c <ip4_route+0x78>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3304      	adds	r3, #4
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d01d      	beq.n	800c75c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	3304      	adds	r3, #4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	405a      	eors	r2, r3
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	3308      	adds	r3, #8
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4013      	ands	r3, r2
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	e033      	b.n	800c7a4 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c742:	f003 0302 	and.w	r3, r3, #2
 800c746:	2b00      	cmp	r3, #0
 800c748:	d108      	bne.n	800c75c <ip4_route+0x78>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	330c      	adds	r3, #12
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	429a      	cmp	r2, r3
 800c756:	d101      	bne.n	800c75c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	e023      	b.n	800c7a4 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	60fb      	str	r3, [r7, #12]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1c5      	bne.n	800c6f4 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c768:	4b12      	ldr	r3, [pc, #72]	@ (800c7b4 <ip4_route+0xd0>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d015      	beq.n	800c79c <ip4_route+0xb8>
 800c770:	4b10      	ldr	r3, [pc, #64]	@ (800c7b4 <ip4_route+0xd0>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c778:	f003 0301 	and.w	r3, r3, #1
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00d      	beq.n	800c79c <ip4_route+0xb8>
 800c780:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b4 <ip4_route+0xd0>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c788:	f003 0304 	and.w	r3, r3, #4
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d005      	beq.n	800c79c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800c790:	4b08      	ldr	r3, [pc, #32]	@ (800c7b4 <ip4_route+0xd0>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	3304      	adds	r3, #4
 800c796:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d101      	bne.n	800c7a0 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c79c:	2300      	movs	r3, #0
 800c79e:	e001      	b.n	800c7a4 <ip4_route+0xc0>
  }

  return netif_default;
 800c7a0:	4b04      	ldr	r3, [pc, #16]	@ (800c7b4 <ip4_route+0xd0>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bc80      	pop	{r7}
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	200082fc 	.word	0x200082fc
 800c7b4:	20008300 	.word	0x20008300

0800c7b8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	091b      	lsrs	r3, r3, #4
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b04      	cmp	r3, #4
 800c7d2:	d004      	beq.n	800c7de <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7f9 f829 	bl	800582c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	e122      	b.n	800ca24 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	f003 030f 	and.w	r3, r3, #15
 800c7e6:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800c7e8:	897b      	ldrh	r3, [r7, #10]
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	885b      	ldrh	r3, [r3, #2]
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7f7 fed3 	bl	80045a0 <lwip_htons>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	891b      	ldrh	r3, [r3, #8]
 800c802:	893a      	ldrh	r2, [r7, #8]
 800c804:	429a      	cmp	r2, r3
 800c806:	d204      	bcs.n	800c812 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c808:	893b      	ldrh	r3, [r7, #8]
 800c80a:	4619      	mov	r1, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7f8 fe99 	bl	8005544 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	895b      	ldrh	r3, [r3, #10]
 800c816:	897a      	ldrh	r2, [r7, #10]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d807      	bhi.n	800c82c <ip4_input+0x74>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	891b      	ldrh	r3, [r3, #8]
 800c820:	893a      	ldrh	r2, [r7, #8]
 800c822:	429a      	cmp	r2, r3
 800c824:	d802      	bhi.n	800c82c <ip4_input+0x74>
 800c826:	897b      	ldrh	r3, [r7, #10]
 800c828:	2b13      	cmp	r3, #19
 800c82a:	d804      	bhi.n	800c836 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7f8 fffd 	bl	800582c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c832:	2300      	movs	r3, #0
 800c834:	e0f6      	b.n	800ca24 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	4a7c      	ldr	r2, [pc, #496]	@ (800ca2c <ip4_input+0x274>)
 800c83c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	4a7a      	ldr	r2, [pc, #488]	@ (800ca2c <ip4_input+0x274>)
 800c844:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c846:	4b79      	ldr	r3, [pc, #484]	@ (800ca2c <ip4_input+0x274>)
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c84e:	2be0      	cmp	r3, #224	@ 0xe0
 800c850:	d112      	bne.n	800c878 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d007      	beq.n	800c872 <ip4_input+0xba>
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	3304      	adds	r3, #4
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <ip4_input+0xba>
      netif = inp;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	613b      	str	r3, [r7, #16]
 800c870:	e041      	b.n	800c8f6 <ip4_input+0x13e>
    } else {
      netif = NULL;
 800c872:	2300      	movs	r3, #0
 800c874:	613b      	str	r3, [r7, #16]
 800c876:	e03e      	b.n	800c8f6 <ip4_input+0x13e>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800c878:	2301      	movs	r3, #1
 800c87a:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d014      	beq.n	800c8ba <ip4_input+0x102>
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	3304      	adds	r3, #4
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00f      	beq.n	800c8ba <ip4_input+0x102>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c89a:	4b64      	ldr	r3, [pc, #400]	@ (800ca2c <ip4_input+0x274>)
 800c89c:	695a      	ldr	r2, [r3, #20]
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d026      	beq.n	800c8f6 <ip4_input+0x13e>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c8a8:	4b60      	ldr	r3, [pc, #384]	@ (800ca2c <ip4_input+0x274>)
 800c8aa:	695b      	ldr	r3, [r3, #20]
 800c8ac:	6939      	ldr	r1, [r7, #16]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f000 f992 	bl	800cbd8 <ip4_addr_isbroadcast_u32>
 800c8b4:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d11d      	bne.n	800c8f6 <ip4_input+0x13e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00d      	beq.n	800c8dc <ip4_input+0x124>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800c8c0:	4b5a      	ldr	r3, [pc, #360]	@ (800ca2c <ip4_input+0x274>)
 800c8c2:	695b      	ldr	r3, [r3, #20]
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8c8:	d102      	bne.n	800c8d0 <ip4_input+0x118>
          netif = NULL;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	613b      	str	r3, [r7, #16]
          break;
 800c8ce:	e012      	b.n	800c8f6 <ip4_input+0x13e>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800c8d4:	4b56      	ldr	r3, [pc, #344]	@ (800ca30 <ip4_input+0x278>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	613b      	str	r3, [r7, #16]
 800c8da:	e002      	b.n	800c8e2 <ip4_input+0x12a>
      } else {
        netif = netif->next;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800c8e2:	693a      	ldr	r2, [r7, #16]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d102      	bne.n	800c8f0 <ip4_input+0x138>
        netif = netif->next;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1c4      	bne.n	800c880 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c8f6:	4b4d      	ldr	r3, [pc, #308]	@ (800ca2c <ip4_input+0x274>)
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f000 f96b 	bl	800cbd8 <ip4_addr_isbroadcast_u32>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d105      	bne.n	800c914 <ip4_input+0x15c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c908:	4b48      	ldr	r3, [pc, #288]	@ (800ca2c <ip4_input+0x274>)
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c910:	2be0      	cmp	r3, #224	@ 0xe0
 800c912:	d104      	bne.n	800c91e <ip4_input+0x166>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7f8 ff89 	bl	800582c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c91a:	2300      	movs	r3, #0
 800c91c:	e082      	b.n	800ca24 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d104      	bne.n	800c92e <ip4_input+0x176>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7f8 ff81 	bl	800582c <pbuf_free>
    return ERR_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	e07a      	b.n	800ca24 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	88db      	ldrh	r3, [r3, #6]
 800c932:	b29b      	uxth	r3, r3
 800c934:	461a      	mov	r2, r3
 800c936:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800c93a:	4013      	ands	r3, r2
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00b      	beq.n	800c958 <ip4_input+0x1a0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 fc8d 	bl	800d260 <ip4_reass>
 800c946:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d101      	bne.n	800c952 <ip4_input+0x19a>
      return ERR_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	e068      	b.n	800ca24 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c958:	4a34      	ldr	r2, [pc, #208]	@ (800ca2c <ip4_input+0x274>)
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c95e:	4a33      	ldr	r2, [pc, #204]	@ (800ca2c <ip4_input+0x274>)
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c964:	4a31      	ldr	r2, [pc, #196]	@ (800ca2c <ip4_input+0x274>)
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	f003 030f 	and.w	r3, r3, #15
 800c972:	b29b      	uxth	r3, r3
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	b29a      	uxth	r2, r3
 800c978:	4b2c      	ldr	r3, [pc, #176]	@ (800ca2c <ip4_input+0x274>)
 800c97a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800c97c:	897b      	ldrh	r3, [r7, #10]
 800c97e:	425b      	negs	r3, r3
 800c980:	b29b      	uxth	r3, r3
 800c982:	b21b      	sxth	r3, r3
 800c984:	4619      	mov	r1, r3
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f7f8 ff2c 	bl	80057e4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	7a5b      	ldrb	r3, [r3, #9]
 800c990:	2b11      	cmp	r3, #17
 800c992:	d006      	beq.n	800c9a2 <ip4_input+0x1ea>
 800c994:	2b11      	cmp	r3, #17
 800c996:	dc13      	bgt.n	800c9c0 <ip4_input+0x208>
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d00c      	beq.n	800c9b6 <ip4_input+0x1fe>
 800c99c:	2b06      	cmp	r3, #6
 800c99e:	d005      	beq.n	800c9ac <ip4_input+0x1f4>
 800c9a0:	e00e      	b.n	800c9c0 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7fe fd17 	bl	800b3d8 <udp_input>
      break;
 800c9aa:	e028      	b.n	800c9fe <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800c9ac:	6839      	ldr	r1, [r7, #0]
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7fa fdd4 	bl	800755c <tcp_input>
      break;
 800c9b4:	e023      	b.n	800c9fe <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7ff fd05 	bl	800c3c8 <icmp_input>
      break;
 800c9be:	e01e      	b.n	800c9fe <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c9c0:	4b1a      	ldr	r3, [pc, #104]	@ (800ca2c <ip4_input+0x274>)
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	6939      	ldr	r1, [r7, #16]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f000 f906 	bl	800cbd8 <ip4_addr_isbroadcast_u32>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d112      	bne.n	800c9f8 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c9d2:	4b16      	ldr	r3, [pc, #88]	@ (800ca2c <ip4_input+0x274>)
 800c9d4:	695b      	ldr	r3, [r3, #20]
 800c9d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c9da:	2be0      	cmp	r3, #224	@ 0xe0
 800c9dc:	d00c      	beq.n	800c9f8 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800c9de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7f8 ff0f 	bl	8005808 <pbuf_header_force>
        p->payload = iphdr;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c9f0:	2102      	movs	r1, #2
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7ff fdee 	bl	800c5d4 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7f8 ff17 	bl	800582c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c9fe:	4b0b      	ldr	r3, [pc, #44]	@ (800ca2c <ip4_input+0x274>)
 800ca00:	2200      	movs	r2, #0
 800ca02:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ca04:	4b09      	ldr	r3, [pc, #36]	@ (800ca2c <ip4_input+0x274>)
 800ca06:	2200      	movs	r2, #0
 800ca08:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ca0a:	4b08      	ldr	r3, [pc, #32]	@ (800ca2c <ip4_input+0x274>)
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ca10:	4b06      	ldr	r3, [pc, #24]	@ (800ca2c <ip4_input+0x274>)
 800ca12:	2200      	movs	r2, #0
 800ca14:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ca16:	4b05      	ldr	r3, [pc, #20]	@ (800ca2c <ip4_input+0x274>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ca1c:	4b03      	ldr	r3, [pc, #12]	@ (800ca2c <ip4_input+0x274>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3718      	adds	r7, #24
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	20004dac 	.word	0x20004dac
 800ca30:	200082fc 	.word	0x200082fc

0800ca34 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b08a      	sub	sp, #40	@ 0x28
 800ca38:	af04      	add	r7, sp, #16
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d009      	beq.n	800ca60 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d003      	beq.n	800ca5a <ip4_output_if+0x26>
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d102      	bne.n	800ca60 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ca5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca5c:	3304      	adds	r3, #4
 800ca5e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ca60:	78fa      	ldrb	r2, [r7, #3]
 800ca62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca64:	9302      	str	r3, [sp, #8]
 800ca66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	4613      	mov	r3, r2
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	6979      	ldr	r1, [r7, #20]
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f000 f805 	bl	800ca88 <ip4_output_if_src>
 800ca7e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3718      	adds	r7, #24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b088      	sub	sp, #32
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
 800ca94:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	89db      	ldrh	r3, [r3, #14]
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d006      	beq.n	800caac <ip4_output_if_src+0x24>
 800ca9e:	4b48      	ldr	r3, [pc, #288]	@ (800cbc0 <ip4_output_if_src+0x138>)
 800caa0:	f240 3233 	movw	r2, #819	@ 0x333
 800caa4:	4947      	ldr	r1, [pc, #284]	@ (800cbc4 <ip4_output_if_src+0x13c>)
 800caa6:	4848      	ldr	r0, [pc, #288]	@ (800cbc8 <ip4_output_if_src+0x140>)
 800caa8:	f001 f842 	bl	800db30 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d060      	beq.n	800cb74 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800cab2:	2314      	movs	r3, #20
 800cab4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800cab6:	2114      	movs	r1, #20
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f7f8 fe93 	bl	80057e4 <pbuf_header>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800cac4:	f06f 0301 	mvn.w	r3, #1
 800cac8:	e075      	b.n	800cbb6 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	895b      	ldrh	r3, [r3, #10]
 800cad4:	2b13      	cmp	r3, #19
 800cad6:	d806      	bhi.n	800cae6 <ip4_output_if_src+0x5e>
 800cad8:	4b39      	ldr	r3, [pc, #228]	@ (800cbc0 <ip4_output_if_src+0x138>)
 800cada:	f44f 7258 	mov.w	r2, #864	@ 0x360
 800cade:	493b      	ldr	r1, [pc, #236]	@ (800cbcc <ip4_output_if_src+0x144>)
 800cae0:	4839      	ldr	r0, [pc, #228]	@ (800cbc8 <ip4_output_if_src+0x140>)
 800cae2:	f001 f825 	bl	800db30 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	78fa      	ldrb	r2, [r7, #3]
 800caea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800caf2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	69fb      	ldr	r3, [r7, #28]
 800cafa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800cafc:	8b7b      	ldrh	r3, [r7, #26]
 800cafe:	089b      	lsrs	r3, r3, #2
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cb14:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	891b      	ldrh	r3, [r3, #8]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f7 fd40 	bl	80045a0 <lwip_htons>
 800cb20:	4603      	mov	r3, r0
 800cb22:	461a      	mov	r2, r3
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	719a      	strb	r2, [r3, #6]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800cb32:	4b27      	ldr	r3, [pc, #156]	@ (800cbd0 <ip4_output_if_src+0x148>)
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7f7 fd32 	bl	80045a0 <lwip_htons>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	461a      	mov	r2, r3
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800cb44:	4b22      	ldr	r3, [pc, #136]	@ (800cbd0 <ip4_output_if_src+0x148>)
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	4b20      	ldr	r3, [pc, #128]	@ (800cbd0 <ip4_output_if_src+0x148>)
 800cb4e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d104      	bne.n	800cb60 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800cb56:	4b1f      	ldr	r3, [pc, #124]	@ (800cbd4 <ip4_output_if_src+0x14c>)
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	60da      	str	r2, [r3, #12]
 800cb5e:	e003      	b.n	800cb68 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	729a      	strb	r2, [r3, #10]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	72da      	strb	r2, [r3, #11]
 800cb72:	e008      	b.n	800cb86 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800cb7a:	69fb      	ldr	r3, [r7, #28]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800cb80:	f107 0314 	add.w	r3, r7, #20
 800cb84:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00c      	beq.n	800cba8 <ip4_output_if_src+0x120>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	891a      	ldrh	r2, [r3, #8]
 800cb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d906      	bls.n	800cba8 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f000 fd08 	bl	800d5b4 <ip4_frag>
 800cba4:	4603      	mov	r3, r0
 800cba6:	e006      	b.n	800cbb6 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbaa:	695b      	ldr	r3, [r3, #20]
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	68f9      	ldr	r1, [r7, #12]
 800cbb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbb2:	4798      	blx	r3
 800cbb4:	4603      	mov	r3, r0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3720      	adds	r7, #32
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	080104b4 	.word	0x080104b4
 800cbc4:	080104e8 	.word	0x080104e8
 800cbc8:	080104f4 	.word	0x080104f4
 800cbcc:	0801051c 	.word	0x0801051c
 800cbd0:	2000845a 	.word	0x2000845a
 800cbd4:	0801190c 	.word	0x0801190c

0800cbd8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbec:	d002      	beq.n	800cbf4 <ip4_addr_isbroadcast_u32+0x1c>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d101      	bne.n	800cbf8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e02a      	b.n	800cc4e <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cbfe:	f003 0302 	and.w	r3, r3, #2
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d101      	bne.n	800cc0a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	e021      	b.n	800cc4e <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	3304      	adds	r3, #4
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d101      	bne.n	800cc1a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cc16:	2300      	movs	r3, #0
 800cc18:	e019      	b.n	800cc4e <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	3304      	adds	r3, #4
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	405a      	eors	r2, r3
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	3308      	adds	r3, #8
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10d      	bne.n	800cc4c <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	3308      	adds	r3, #8
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	43da      	mvns	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	3308      	adds	r3, #8
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d101      	bne.n	800cc4c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e000      	b.n	800cc4e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cc4c:	2300      	movs	r3, #0
  }
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bc80      	pop	{r7}
 800cc56:	4770      	bx	lr

0800cc58 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cc62:	4b12      	ldr	r3, [pc, #72]	@ (800ccac <ip_reass_tmr+0x54>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cc68:	e018      	b.n	800cc9c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	7fdb      	ldrb	r3, [r3, #31]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00b      	beq.n	800cc8a <ip_reass_tmr+0x32>
      r->timer--;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	7fdb      	ldrb	r3, [r3, #31]
 800cc76:	3b01      	subs	r3, #1
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	e008      	b.n	800cc9c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cc94:	68b9      	ldr	r1, [r7, #8]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 f80a 	bl	800ccb0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d1e3      	bne.n	800cc6a <ip_reass_tmr+0x12>
     }
   }
}
 800cca2:	bf00      	nop
 800cca4:	bf00      	nop
 800cca6:	3710      	adds	r7, #16
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	2000845c 	.word	0x2000845c

0800ccb0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b088      	sub	sp, #32
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d105      	bne.n	800ccd2 <ip_reass_free_complete_datagram+0x22>
 800ccc6:	4b45      	ldr	r3, [pc, #276]	@ (800cddc <ip_reass_free_complete_datagram+0x12c>)
 800ccc8:	22ab      	movs	r2, #171	@ 0xab
 800ccca:	4945      	ldr	r1, [pc, #276]	@ (800cde0 <ip_reass_free_complete_datagram+0x130>)
 800cccc:	4845      	ldr	r0, [pc, #276]	@ (800cde4 <ip_reass_free_complete_datagram+0x134>)
 800ccce:	f000 ff2f 	bl	800db30 <iprintf>
  if (prev != NULL) {
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00a      	beq.n	800ccee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d005      	beq.n	800ccee <ip_reass_free_complete_datagram+0x3e>
 800cce2:	4b3e      	ldr	r3, [pc, #248]	@ (800cddc <ip_reass_free_complete_datagram+0x12c>)
 800cce4:	22ad      	movs	r2, #173	@ 0xad
 800cce6:	4940      	ldr	r1, [pc, #256]	@ (800cde8 <ip_reass_free_complete_datagram+0x138>)
 800cce8:	483e      	ldr	r0, [pc, #248]	@ (800cde4 <ip_reass_free_complete_datagram+0x134>)
 800ccea:	f000 ff21 	bl	800db30 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	889b      	ldrh	r3, [r3, #4]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d12a      	bne.n	800cd56 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	6858      	ldr	r0, [r3, #4]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	3308      	adds	r3, #8
 800cd16:	2214      	movs	r2, #20
 800cd18:	4619      	mov	r1, r3
 800cd1a:	f001 f802 	bl	800dd22 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800cd1e:	2101      	movs	r1, #1
 800cd20:	69b8      	ldr	r0, [r7, #24]
 800cd22:	f7ff fc67 	bl	800c5f4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800cd26:	69b8      	ldr	r0, [r7, #24]
 800cd28:	f7f8 fe14 	bl	8005954 <pbuf_clen>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cd30:	8bfa      	ldrh	r2, [r7, #30]
 800cd32:	8a7b      	ldrh	r3, [r7, #18]
 800cd34:	4413      	add	r3, r2
 800cd36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd3a:	db05      	blt.n	800cd48 <ip_reass_free_complete_datagram+0x98>
 800cd3c:	4b27      	ldr	r3, [pc, #156]	@ (800cddc <ip_reass_free_complete_datagram+0x12c>)
 800cd3e:	22bc      	movs	r2, #188	@ 0xbc
 800cd40:	492a      	ldr	r1, [pc, #168]	@ (800cdec <ip_reass_free_complete_datagram+0x13c>)
 800cd42:	4828      	ldr	r0, [pc, #160]	@ (800cde4 <ip_reass_free_complete_datagram+0x134>)
 800cd44:	f000 fef4 	bl	800db30 <iprintf>
    pbufs_freed += clen;
 800cd48:	8bfa      	ldrh	r2, [r7, #30]
 800cd4a:	8a7b      	ldrh	r3, [r7, #18]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cd50:	69b8      	ldr	r0, [r7, #24]
 800cd52:	f7f8 fd6b 	bl	800582c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cd5c:	e01f      	b.n	800cd9e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cd6e:	68f8      	ldr	r0, [r7, #12]
 800cd70:	f7f8 fdf0 	bl	8005954 <pbuf_clen>
 800cd74:	4603      	mov	r3, r0
 800cd76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cd78:	8bfa      	ldrh	r2, [r7, #30]
 800cd7a:	8a7b      	ldrh	r3, [r7, #18]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd82:	db05      	blt.n	800cd90 <ip_reass_free_complete_datagram+0xe0>
 800cd84:	4b15      	ldr	r3, [pc, #84]	@ (800cddc <ip_reass_free_complete_datagram+0x12c>)
 800cd86:	22cc      	movs	r2, #204	@ 0xcc
 800cd88:	4918      	ldr	r1, [pc, #96]	@ (800cdec <ip_reass_free_complete_datagram+0x13c>)
 800cd8a:	4816      	ldr	r0, [pc, #88]	@ (800cde4 <ip_reass_free_complete_datagram+0x134>)
 800cd8c:	f000 fed0 	bl	800db30 <iprintf>
    pbufs_freed += clen;
 800cd90:	8bfa      	ldrh	r2, [r7, #30]
 800cd92:	8a7b      	ldrh	r3, [r7, #18]
 800cd94:	4413      	add	r3, r2
 800cd96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f7f8 fd47 	bl	800582c <pbuf_free>
  while (p != NULL) {
 800cd9e:	69bb      	ldr	r3, [r7, #24]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1dc      	bne.n	800cd5e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800cda4:	6839      	ldr	r1, [r7, #0]
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 f8c2 	bl	800cf30 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800cdac:	4b10      	ldr	r3, [pc, #64]	@ (800cdf0 <ip_reass_free_complete_datagram+0x140>)
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	8bfa      	ldrh	r2, [r7, #30]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d905      	bls.n	800cdc2 <ip_reass_free_complete_datagram+0x112>
 800cdb6:	4b09      	ldr	r3, [pc, #36]	@ (800cddc <ip_reass_free_complete_datagram+0x12c>)
 800cdb8:	22d2      	movs	r2, #210	@ 0xd2
 800cdba:	490e      	ldr	r1, [pc, #56]	@ (800cdf4 <ip_reass_free_complete_datagram+0x144>)
 800cdbc:	4809      	ldr	r0, [pc, #36]	@ (800cde4 <ip_reass_free_complete_datagram+0x134>)
 800cdbe:	f000 feb7 	bl	800db30 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800cdc2:	4b0b      	ldr	r3, [pc, #44]	@ (800cdf0 <ip_reass_free_complete_datagram+0x140>)
 800cdc4:	881a      	ldrh	r2, [r3, #0]
 800cdc6:	8bfb      	ldrh	r3, [r7, #30]
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	4b08      	ldr	r3, [pc, #32]	@ (800cdf0 <ip_reass_free_complete_datagram+0x140>)
 800cdce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800cdd0:	8bfb      	ldrh	r3, [r7, #30]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3720      	adds	r7, #32
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	0801054c 	.word	0x0801054c
 800cde0:	08010588 	.word	0x08010588
 800cde4:	08010594 	.word	0x08010594
 800cde8:	080105bc 	.word	0x080105bc
 800cdec:	080105d0 	.word	0x080105d0
 800cdf0:	20008460 	.word	0x20008460
 800cdf4:	080105f0 	.word	0x080105f0

0800cdf8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08a      	sub	sp, #40	@ 0x28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ce02:	2300      	movs	r3, #0
 800ce04:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ce06:	2300      	movs	r3, #0
 800ce08:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ce16:	4b28      	ldr	r3, [pc, #160]	@ (800ceb8 <ip_reass_remove_oldest_datagram+0xc0>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ce1c:	e030      	b.n	800ce80 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ce1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce20:	695a      	ldr	r2, [r3, #20]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d10c      	bne.n	800ce44 <ip_reass_remove_oldest_datagram+0x4c>
 800ce2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2c:	699a      	ldr	r2, [r3, #24]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d106      	bne.n	800ce44 <ip_reass_remove_oldest_datagram+0x4c>
 800ce36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce38:	899a      	ldrh	r2, [r3, #12]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	889b      	ldrh	r3, [r3, #4]
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d014      	beq.n	800ce6e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	3301      	adds	r3, #1
 800ce48:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ce4a:	6a3b      	ldr	r3, [r7, #32]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d104      	bne.n	800ce5a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ce50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce52:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	61bb      	str	r3, [r7, #24]
 800ce58:	e009      	b.n	800ce6e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5c:	7fda      	ldrb	r2, [r3, #31]
 800ce5e:	6a3b      	ldr	r3, [r7, #32]
 800ce60:	7fdb      	ldrb	r3, [r3, #31]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d803      	bhi.n	800ce6e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ce66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce68:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d001      	beq.n	800ce7a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ce76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce78:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ce80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d1cb      	bne.n	800ce1e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ce86:	6a3b      	ldr	r3, [r7, #32]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d008      	beq.n	800ce9e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ce8c:	69b9      	ldr	r1, [r7, #24]
 800ce8e:	6a38      	ldr	r0, [r7, #32]
 800ce90:	f7ff ff0e 	bl	800ccb0 <ip_reass_free_complete_datagram>
 800ce94:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ce96:	697a      	ldr	r2, [r7, #20]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ce9e:	697a      	ldr	r2, [r7, #20]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	da02      	bge.n	800ceac <ip_reass_remove_oldest_datagram+0xb4>
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	dcac      	bgt.n	800ce06 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ceac:	697b      	ldr	r3, [r7, #20]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3728      	adds	r7, #40	@ 0x28
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	2000845c 	.word	0x2000845c

0800cebc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cec6:	2004      	movs	r0, #4
 800cec8:	f7f7 ff48 	bl	8004d5c <memp_malloc>
 800cecc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d110      	bne.n	800cef6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff ff8e 	bl	800cdf8 <ip_reass_remove_oldest_datagram>
 800cedc:	4602      	mov	r2, r0
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	4293      	cmp	r3, r2
 800cee2:	dc03      	bgt.n	800ceec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cee4:	2004      	movs	r0, #4
 800cee6:	f7f7 ff39 	bl	8004d5c <memp_malloc>
 800ceea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d101      	bne.n	800cef6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800cef2:	2300      	movs	r3, #0
 800cef4:	e016      	b.n	800cf24 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cef6:	2220      	movs	r2, #32
 800cef8:	2100      	movs	r1, #0
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	f000 fe7d 	bl	800dbfa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2203      	movs	r2, #3
 800cf04:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cf06:	4b09      	ldr	r3, [pc, #36]	@ (800cf2c <ip_reass_enqueue_new_datagram+0x70>)
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cf0e:	4a07      	ldr	r2, [pc, #28]	@ (800cf2c <ip_reass_enqueue_new_datagram+0x70>)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3308      	adds	r3, #8
 800cf18:	2214      	movs	r2, #20
 800cf1a:	6879      	ldr	r1, [r7, #4]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f000 ff00 	bl	800dd22 <memcpy>
  return ipr;
 800cf22:	68fb      	ldr	r3, [r7, #12]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	2000845c 	.word	0x2000845c

0800cf30 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cf3a:	4b10      	ldr	r3, [pc, #64]	@ (800cf7c <ip_reass_dequeue_datagram+0x4c>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d104      	bne.n	800cf4e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a0c      	ldr	r2, [pc, #48]	@ (800cf7c <ip_reass_dequeue_datagram+0x4c>)
 800cf4a:	6013      	str	r3, [r2, #0]
 800cf4c:	e00d      	b.n	800cf6a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d106      	bne.n	800cf62 <ip_reass_dequeue_datagram+0x32>
 800cf54:	4b0a      	ldr	r3, [pc, #40]	@ (800cf80 <ip_reass_dequeue_datagram+0x50>)
 800cf56:	f240 1245 	movw	r2, #325	@ 0x145
 800cf5a:	490a      	ldr	r1, [pc, #40]	@ (800cf84 <ip_reass_dequeue_datagram+0x54>)
 800cf5c:	480a      	ldr	r0, [pc, #40]	@ (800cf88 <ip_reass_dequeue_datagram+0x58>)
 800cf5e:	f000 fde7 	bl	800db30 <iprintf>
    prev->next = ipr->next;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cf6a:	6879      	ldr	r1, [r7, #4]
 800cf6c:	2004      	movs	r0, #4
 800cf6e:	f7f7 ff41 	bl	8004df4 <memp_free>
}
 800cf72:	bf00      	nop
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	2000845c 	.word	0x2000845c
 800cf80:	0801054c 	.word	0x0801054c
 800cf84:	0801060c 	.word	0x0801060c
 800cf88:	08010594 	.word	0x08010594

0800cf8c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b08c      	sub	sp, #48	@ 0x30
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	60b9      	str	r1, [r7, #8]
 800cf96:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	885b      	ldrh	r3, [r3, #2]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f7 faf7 	bl	80045a0 <lwip_htons>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	69fb      	ldr	r3, [r7, #28]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	f003 030f 	and.w	r3, r3, #15
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	88db      	ldrh	r3, [r3, #6]
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7f7 fae6 	bl	80045a0 <lwip_htons>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	00db      	lsls	r3, r3, #3
 800cfde:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800cfe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe8:	2200      	movs	r2, #0
 800cfea:	701a      	strb	r2, [r3, #0]
 800cfec:	2200      	movs	r2, #0
 800cfee:	705a      	strb	r2, [r3, #1]
 800cff0:	2200      	movs	r2, #0
 800cff2:	709a      	strb	r2, [r3, #2]
 800cff4:	2200      	movs	r2, #0
 800cff6:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800cff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cffa:	8b3a      	ldrh	r2, [r7, #24]
 800cffc:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800cffe:	8b3a      	ldrh	r2, [r7, #24]
 800d000:	8b7b      	ldrh	r3, [r7, #26]
 800d002:	4413      	add	r3, r2
 800d004:	b29a      	uxth	r2, r3
 800d006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d008:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d010:	e061      	b.n	800d0d6 <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800d012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800d018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d01a:	889b      	ldrh	r3, [r3, #4]
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	889b      	ldrh	r3, [r3, #4]
 800d022:	b29b      	uxth	r3, r3
 800d024:	429a      	cmp	r2, r3
 800d026:	d232      	bcs.n	800d08e <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d02c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d030:	2b00      	cmp	r3, #0
 800d032:	d01f      	beq.n	800d074 <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d036:	889b      	ldrh	r3, [r3, #4]
 800d038:	b29a      	uxth	r2, r3
 800d03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03c:	88db      	ldrh	r3, [r3, #6]
 800d03e:	b29b      	uxth	r3, r3
 800d040:	429a      	cmp	r2, r3
 800d042:	f0c0 80e3 	bcc.w	800d20c <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 800d046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d048:	88db      	ldrh	r3, [r3, #6]
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	889b      	ldrh	r3, [r3, #4]
 800d050:	b29b      	uxth	r3, r3
 800d052:	429a      	cmp	r2, r3
 800d054:	f200 80da 	bhi.w	800d20c <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d05a:	68ba      	ldr	r2, [r7, #8]
 800d05c:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d060:	88db      	ldrh	r3, [r3, #6]
 800d062:	b29a      	uxth	r2, r3
 800d064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d066:	889b      	ldrh	r3, [r3, #4]
 800d068:	b29b      	uxth	r3, r3
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d037      	beq.n	800d0de <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d06e:	2300      	movs	r3, #0
 800d070:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d072:	e034      	b.n	800d0de <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 800d074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d076:	88db      	ldrh	r3, [r3, #6]
 800d078:	b29a      	uxth	r2, r3
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	889b      	ldrh	r3, [r3, #4]
 800d07e:	b29b      	uxth	r3, r3
 800d080:	429a      	cmp	r2, r3
 800d082:	f200 80c5 	bhi.w	800d210 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	68ba      	ldr	r2, [r7, #8]
 800d08a:	605a      	str	r2, [r3, #4]
      break;
 800d08c:	e027      	b.n	800d0de <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 800d08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d090:	889b      	ldrh	r3, [r3, #4]
 800d092:	b29a      	uxth	r2, r3
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	889b      	ldrh	r3, [r3, #4]
 800d098:	b29b      	uxth	r3, r3
 800d09a:	429a      	cmp	r2, r3
 800d09c:	f000 80ba 	beq.w	800d214 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a2:	889b      	ldrh	r3, [r3, #4]
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	88db      	ldrh	r3, [r3, #6]
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	f0c0 80b3 	bcc.w	800d218 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d009      	beq.n	800d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 800d0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ba:	88db      	ldrh	r3, [r3, #6]
 800d0bc:	b29a      	uxth	r2, r3
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	889b      	ldrh	r3, [r3, #4]
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d001      	beq.n	800d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d19a      	bne.n	800d012 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 800d0dc:	e000      	b.n	800d0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 800d0de:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d12d      	bne.n	800d142 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 800d0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d01c      	beq.n	800d126 <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ee:	88db      	ldrh	r3, [r3, #6]
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f4:	889b      	ldrh	r3, [r3, #4]
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d906      	bls.n	800d10a <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 800d0fc:	4b51      	ldr	r3, [pc, #324]	@ (800d244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d0fe:	f240 12ab 	movw	r2, #427	@ 0x1ab
 800d102:	4951      	ldr	r1, [pc, #324]	@ (800d248 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d104:	4851      	ldr	r0, [pc, #324]	@ (800d24c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d106:	f000 fd13 	bl	800db30 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d10c:	68ba      	ldr	r2, [r7, #8]
 800d10e:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d112:	88db      	ldrh	r3, [r3, #6]
 800d114:	b29a      	uxth	r2, r3
 800d116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d118:	889b      	ldrh	r3, [r3, #4]
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d010      	beq.n	800d142 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	623b      	str	r3, [r7, #32]
 800d124:	e00d      	b.n	800d142 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d006      	beq.n	800d13c <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 800d12e:	4b45      	ldr	r3, [pc, #276]	@ (800d244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d130:	f240 12b3 	movw	r2, #435	@ 0x1b3
 800d134:	4946      	ldr	r1, [pc, #280]	@ (800d250 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d136:	4845      	ldr	r0, [pc, #276]	@ (800d24c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d138:	f000 fcfa 	bl	800db30 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	68ba      	ldr	r2, [r7, #8]
 800d140:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d105      	bne.n	800d154 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	7f9b      	ldrb	r3, [r3, #30]
 800d14c:	f003 0301 	and.w	r3, r3, #1
 800d150:	2b00      	cmp	r3, #0
 800d152:	d059      	beq.n	800d208 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 800d154:	6a3b      	ldr	r3, [r7, #32]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d04f      	beq.n	800d1fa <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d006      	beq.n	800d170 <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	889b      	ldrh	r3, [r3, #4]
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d002      	beq.n	800d176 <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 800d170:	2300      	movs	r3, #0
 800d172:	623b      	str	r3, [r7, #32]
 800d174:	e041      	b.n	800d1fa <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d178:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800d17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d180:	e012      	b.n	800d1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 800d182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800d188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d18a:	88db      	ldrh	r3, [r3, #6]
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d190:	889b      	ldrh	r3, [r3, #4]
 800d192:	b29b      	uxth	r3, r3
 800d194:	429a      	cmp	r2, r3
 800d196:	d002      	beq.n	800d19e <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 800d198:	2300      	movs	r3, #0
 800d19a:	623b      	str	r3, [r7, #32]
            break;
 800d19c:	e007      	b.n	800d1ae <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 800d19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800d1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1e9      	bne.n	800d182 <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d1ae:	6a3b      	ldr	r3, [r7, #32]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d022      	beq.n	800d1fa <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d106      	bne.n	800d1ca <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 800d1bc:	4b21      	ldr	r3, [pc, #132]	@ (800d244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d1be:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 800d1c2:	4924      	ldr	r1, [pc, #144]	@ (800d254 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d1c4:	4821      	ldr	r0, [pc, #132]	@ (800d24c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d1c6:	f000 fcb3 	bl	800db30 <iprintf>
          LWIP_ASSERT("sanity check",
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d106      	bne.n	800d1e4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 800d1d6:	4b1b      	ldr	r3, [pc, #108]	@ (800d244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d1d8:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800d1dc:	491d      	ldr	r1, [pc, #116]	@ (800d254 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d1de:	481b      	ldr	r0, [pc, #108]	@ (800d24c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d1e0:	f000 fca6 	bl	800db30 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d006      	beq.n	800d1fa <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 800d1ec:	4b15      	ldr	r3, [pc, #84]	@ (800d244 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d1ee:	f240 12d7 	movw	r2, #471	@ 0x1d7
 800d1f2:	4919      	ldr	r1, [pc, #100]	@ (800d258 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d1f4:	4815      	ldr	r0, [pc, #84]	@ (800d24c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d1f6:	f000 fc9b 	bl	800db30 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	bf14      	ite	ne
 800d200:	2301      	movne	r3, #1
 800d202:	2300      	moveq	r3, #0
 800d204:	b2db      	uxtb	r3, r3
 800d206:	e018      	b.n	800d23a <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d208:	2300      	movs	r3, #0
 800d20a:	e016      	b.n	800d23a <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 800d20c:	bf00      	nop
 800d20e:	e004      	b.n	800d21a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 800d210:	bf00      	nop
 800d212:	e002      	b.n	800d21a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 800d214:	bf00      	nop
 800d216:	e000      	b.n	800d21a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 800d218:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d21a:	68b8      	ldr	r0, [r7, #8]
 800d21c:	f7f8 fb9a 	bl	8005954 <pbuf_clen>
 800d220:	4603      	mov	r3, r0
 800d222:	461a      	mov	r2, r3
 800d224:	4b0d      	ldr	r3, [pc, #52]	@ (800d25c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d226:	881b      	ldrh	r3, [r3, #0]
 800d228:	1a9b      	subs	r3, r3, r2
 800d22a:	b29a      	uxth	r2, r3
 800d22c:	4b0b      	ldr	r3, [pc, #44]	@ (800d25c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d22e:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d230:	68b8      	ldr	r0, [r7, #8]
 800d232:	f7f8 fafb 	bl	800582c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d236:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3730      	adds	r7, #48	@ 0x30
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	0801054c 	.word	0x0801054c
 800d248:	08010628 	.word	0x08010628
 800d24c:	08010594 	.word	0x08010594
 800d250:	08010648 	.word	0x08010648
 800d254:	08010680 	.word	0x08010680
 800d258:	08010690 	.word	0x08010690
 800d25c:	20008460 	.word	0x20008460

0800d260 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b08e      	sub	sp, #56	@ 0x38
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	f003 030f 	and.w	r3, r3, #15
 800d276:	2b05      	cmp	r3, #5
 800d278:	f040 8130 	bne.w	800d4dc <ip4_reass+0x27c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27e:	88db      	ldrh	r3, [r3, #6]
 800d280:	b29b      	uxth	r3, r3
 800d282:	4618      	mov	r0, r3
 800d284:	f7f7 f98c 	bl	80045a0 <lwip_htons>
 800d288:	4603      	mov	r3, r0
 800d28a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d28e:	b29b      	uxth	r3, r3
 800d290:	00db      	lsls	r3, r3, #3
 800d292:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d296:	885b      	ldrh	r3, [r3, #2]
 800d298:	b29b      	uxth	r3, r3
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7f7 f980 	bl	80045a0 <lwip_htons>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	f003 030f 	and.w	r3, r3, #15
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7f8 fb4c 	bl	8005954 <pbuf_clen>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d2c0:	4b8e      	ldr	r3, [pc, #568]	@ (800d4fc <ip4_reass+0x29c>)
 800d2c2:	881b      	ldrh	r3, [r3, #0]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d2c8:	4413      	add	r3, r2
 800d2ca:	2b0a      	cmp	r3, #10
 800d2cc:	dd10      	ble.n	800d2f0 <ip4_reass+0x90>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d2ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2d4:	f7ff fd90 	bl	800cdf8 <ip_reass_remove_oldest_datagram>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 8100 	beq.w	800d4e0 <ip4_reass+0x280>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d2e0:	4b86      	ldr	r3, [pc, #536]	@ (800d4fc <ip4_reass+0x29c>)
 800d2e2:	881b      	ldrh	r3, [r3, #0]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d2e8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d2ea:	2b0a      	cmp	r3, #10
 800d2ec:	f300 80f8 	bgt.w	800d4e0 <ip4_reass+0x280>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d2f0:	4b83      	ldr	r3, [pc, #524]	@ (800d500 <ip4_reass+0x2a0>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2f6:	e015      	b.n	800d324 <ip4_reass+0xc4>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2fa:	695a      	ldr	r2, [r3, #20]
 800d2fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fe:	68db      	ldr	r3, [r3, #12]
 800d300:	429a      	cmp	r2, r3
 800d302:	d10c      	bne.n	800d31e <ip4_reass+0xbe>
 800d304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d306:	699a      	ldr	r2, [r3, #24]
 800d308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d106      	bne.n	800d31e <ip4_reass+0xbe>
 800d310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d312:	899a      	ldrh	r2, [r3, #12]
 800d314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d316:	889b      	ldrh	r3, [r3, #4]
 800d318:	b29b      	uxth	r3, r3
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d006      	beq.n	800d32c <ip4_reass+0xcc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	633b      	str	r3, [r7, #48]	@ 0x30
 800d324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1e6      	bne.n	800d2f8 <ip4_reass+0x98>
 800d32a:	e000      	b.n	800d32e <ip4_reass+0xce>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d32c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d330:	2b00      	cmp	r3, #0
 800d332:	d109      	bne.n	800d348 <ip4_reass+0xe8>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d334:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d336:	4619      	mov	r1, r3
 800d338:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d33a:	f7ff fdbf 	bl	800cebc <ip_reass_enqueue_new_datagram>
 800d33e:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d342:	2b00      	cmp	r3, #0
 800d344:	d11c      	bne.n	800d380 <ip4_reass+0x120>
      goto nullreturn;
 800d346:	e0d0      	b.n	800d4ea <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d34a:	88db      	ldrh	r3, [r3, #6]
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	4618      	mov	r0, r3
 800d350:	f7f7 f926 	bl	80045a0 <lwip_htons>
 800d354:	4603      	mov	r3, r0
 800d356:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d110      	bne.n	800d380 <ip4_reass+0x120>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d360:	89db      	ldrh	r3, [r3, #14]
 800d362:	4618      	mov	r0, r3
 800d364:	f7f7 f91c 	bl	80045a0 <lwip_htons>
 800d368:	4603      	mov	r3, r0
 800d36a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d006      	beq.n	800d380 <ip4_reass+0x120>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d374:	3308      	adds	r3, #8
 800d376:	2214      	movs	r2, #20
 800d378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 fcd1 	bl	800dd22 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d382:	88db      	ldrh	r3, [r3, #6]
 800d384:	b29b      	uxth	r3, r3
 800d386:	f003 0320 	and.w	r3, r3, #32
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	bf0c      	ite	eq
 800d38e:	2301      	moveq	r3, #1
 800d390:	2300      	movne	r3, #0
 800d392:	b2db      	uxtb	r3, r3
 800d394:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00e      	beq.n	800d3ba <ip4_reass+0x15a>
    u16_t datagram_len = (u16_t)(offset + len);
 800d39c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d39e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3a0:	4413      	add	r3, r2
 800d3a2:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d3a4:	8b7a      	ldrh	r2, [r7, #26]
 800d3a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	f0c0 809b 	bcc.w	800d4e4 <ip4_reass+0x284>
 800d3ae:	8b7b      	ldrh	r3, [r7, #26]
 800d3b0:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	f200 8095 	bhi.w	800d4e4 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d3ba:	69fa      	ldr	r2, [r7, #28]
 800d3bc:	6879      	ldr	r1, [r7, #4]
 800d3be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3c0:	f7ff fde4 	bl	800cf8c <ip_reass_chain_frag_into_datagram_and_validate>
 800d3c4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3cc:	f000 808c 	beq.w	800d4e8 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d3d0:	4b4a      	ldr	r3, [pc, #296]	@ (800d4fc <ip4_reass+0x29c>)
 800d3d2:	881a      	ldrh	r2, [r3, #0]
 800d3d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d3d6:	4413      	add	r3, r2
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	4b48      	ldr	r3, [pc, #288]	@ (800d4fc <ip4_reass+0x29c>)
 800d3dc:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00d      	beq.n	800d400 <ip4_reass+0x1a0>
    u16_t datagram_len = (u16_t)(offset + len);
 800d3e4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d3e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d3e8:	4413      	add	r3, r2
 800d3ea:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ee:	8a7a      	ldrh	r2, [r7, #18]
 800d3f0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f4:	7f9b      	ldrb	r3, [r3, #30]
 800d3f6:	f043 0301 	orr.w	r3, r3, #1
 800d3fa:	b2da      	uxtb	r2, r3
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fe:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	2b01      	cmp	r3, #1
 800d404:	d168      	bne.n	800d4d8 <ip4_reass+0x278>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d408:	8b9b      	ldrh	r3, [r3, #28]
 800d40a:	3314      	adds	r3, #20
 800d40c:	b29a      	uxth	r2, r3
 800d40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d410:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d426:	3308      	adds	r3, #8
 800d428:	2214      	movs	r2, #20
 800d42a:	4619      	mov	r1, r3
 800d42c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d42e:	f000 fc78 	bl	800dd22 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d434:	8b9b      	ldrh	r3, [r3, #28]
 800d436:	4618      	mov	r0, r3
 800d438:	f7f7 f8b2 	bl	80045a0 <lwip_htons>
 800d43c:	4603      	mov	r3, r0
 800d43e:	461a      	mov	r2, r3
 800d440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d442:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d446:	2200      	movs	r2, #0
 800d448:	719a      	strb	r2, [r3, #6]
 800d44a:	2200      	movs	r2, #0
 800d44c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d450:	2200      	movs	r2, #0
 800d452:	729a      	strb	r2, [r3, #10]
 800d454:	2200      	movs	r2, #0
 800d456:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45a:	685b      	ldr	r3, [r3, #4]
 800d45c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d45e:	e00e      	b.n	800d47e <ip4_reass+0x21e>
      iprh = (struct ip_reass_helper*)r->payload;
 800d460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d466:	f06f 0113 	mvn.w	r1, #19
 800d46a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d46c:	f7f8 f9ba 	bl	80057e4 <pbuf_header>
      pbuf_cat(p, r);
 800d470:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f7f8 faa6 	bl	80059c4 <pbuf_cat>
      r = iprh->next_pbuf;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800d47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1ed      	bne.n	800d460 <ip4_reass+0x200>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d484:	4b1e      	ldr	r3, [pc, #120]	@ (800d500 <ip4_reass+0x2a0>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d102      	bne.n	800d494 <ip4_reass+0x234>
      ipr_prev = NULL;
 800d48e:	2300      	movs	r3, #0
 800d490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d492:	e010      	b.n	800d4b6 <ip4_reass+0x256>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d494:	4b1a      	ldr	r3, [pc, #104]	@ (800d500 <ip4_reass+0x2a0>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d49a:	e007      	b.n	800d4ac <ip4_reass+0x24c>
        if (ipr_prev->next == ipr) {
 800d49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d006      	beq.n	800d4b4 <ip4_reass+0x254>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1f4      	bne.n	800d49c <ip4_reass+0x23c>
 800d4b2:	e000      	b.n	800d4b6 <ip4_reass+0x256>
          break;
 800d4b4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d4b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4ba:	f7ff fd39 	bl	800cf30 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7f8 fa48 	bl	8005954 <pbuf_clen>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	4b0c      	ldr	r3, [pc, #48]	@ (800d4fc <ip4_reass+0x29c>)
 800d4ca:	881b      	ldrh	r3, [r3, #0]
 800d4cc:	1a9b      	subs	r3, r3, r2
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d4fc <ip4_reass+0x29c>)
 800d4d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	e00c      	b.n	800d4f2 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	e00a      	b.n	800d4f2 <ip4_reass+0x292>
    goto nullreturn;
 800d4dc:	bf00      	nop
 800d4de:	e004      	b.n	800d4ea <ip4_reass+0x28a>
      goto nullreturn;
 800d4e0:	bf00      	nop
 800d4e2:	e002      	b.n	800d4ea <ip4_reass+0x28a>
      goto nullreturn;
 800d4e4:	bf00      	nop
 800d4e6:	e000      	b.n	800d4ea <ip4_reass+0x28a>
    goto nullreturn;
 800d4e8:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7f8 f99e 	bl	800582c <pbuf_free>
  return NULL;
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3738      	adds	r7, #56	@ 0x38
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20008460 	.word	0x20008460
 800d500:	2000845c 	.word	0x2000845c

0800d504 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d508:	2005      	movs	r0, #5
 800d50a:	f7f7 fc27 	bl	8004d5c <memp_malloc>
 800d50e:	4603      	mov	r3, r0
}
 800d510:	4618      	mov	r0, r3
 800d512:	bd80      	pop	{r7, pc}

0800d514 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d522:	4b07      	ldr	r3, [pc, #28]	@ (800d540 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d524:	f240 22ae 	movw	r2, #686	@ 0x2ae
 800d528:	4906      	ldr	r1, [pc, #24]	@ (800d544 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d52a:	4807      	ldr	r0, [pc, #28]	@ (800d548 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d52c:	f000 fb00 	bl	800db30 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	2005      	movs	r0, #5
 800d534:	f7f7 fc5e 	bl	8004df4 <memp_free>
}
 800d538:	bf00      	nop
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	0801054c 	.word	0x0801054c
 800d544:	080106b4 	.word	0x080106b4
 800d548:	08010594 	.word	0x08010594

0800d54c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d106      	bne.n	800d56c <ipfrag_free_pbuf_custom+0x20>
 800d55e:	4b11      	ldr	r3, [pc, #68]	@ (800d5a4 <ipfrag_free_pbuf_custom+0x58>)
 800d560:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 800d564:	4910      	ldr	r1, [pc, #64]	@ (800d5a8 <ipfrag_free_pbuf_custom+0x5c>)
 800d566:	4811      	ldr	r0, [pc, #68]	@ (800d5ac <ipfrag_free_pbuf_custom+0x60>)
 800d568:	f000 fae2 	bl	800db30 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d56c:	68fa      	ldr	r2, [r7, #12]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	429a      	cmp	r2, r3
 800d572:	d006      	beq.n	800d582 <ipfrag_free_pbuf_custom+0x36>
 800d574:	4b0b      	ldr	r3, [pc, #44]	@ (800d5a4 <ipfrag_free_pbuf_custom+0x58>)
 800d576:	f240 22b9 	movw	r2, #697	@ 0x2b9
 800d57a:	490d      	ldr	r1, [pc, #52]	@ (800d5b0 <ipfrag_free_pbuf_custom+0x64>)
 800d57c:	480b      	ldr	r0, [pc, #44]	@ (800d5ac <ipfrag_free_pbuf_custom+0x60>)
 800d57e:	f000 fad7 	bl	800db30 <iprintf>
  if (pcr->original != NULL) {
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	695b      	ldr	r3, [r3, #20]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d004      	beq.n	800d594 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	695b      	ldr	r3, [r3, #20]
 800d58e:	4618      	mov	r0, r3
 800d590:	f7f8 f94c 	bl	800582c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d594:	68f8      	ldr	r0, [r7, #12]
 800d596:	f7ff ffbd 	bl	800d514 <ip_frag_free_pbuf_custom_ref>
}
 800d59a:	bf00      	nop
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	0801054c 	.word	0x0801054c
 800d5a8:	080106c0 	.word	0x080106c0
 800d5ac:	08010594 	.word	0x08010594
 800d5b0:	080106cc 	.word	0x080106cc

0800d5b4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b092      	sub	sp, #72	@ 0x48
 800d5b8:	af02      	add	r7, sp, #8
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d5c8:	3b14      	subs	r3, #20
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	da00      	bge.n	800d5d0 <ip4_frag+0x1c>
 800d5ce:	3307      	adds	r3, #7
 800d5d0:	10db      	asrs	r3, r3, #3
 800d5d2:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d5d4:	2314      	movs	r3, #20
 800d5d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 800d5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	f003 030f 	and.w	r3, r3, #15
 800d5ea:	2b05      	cmp	r3, #5
 800d5ec:	d009      	beq.n	800d602 <ip4_frag+0x4e>
 800d5ee:	4b7a      	ldr	r3, [pc, #488]	@ (800d7d8 <ip4_frag+0x224>)
 800d5f0:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800d5f4:	4979      	ldr	r1, [pc, #484]	@ (800d7dc <ip4_frag+0x228>)
 800d5f6:	487a      	ldr	r0, [pc, #488]	@ (800d7e0 <ip4_frag+0x22c>)
 800d5f8:	f000 fa9a 	bl	800db30 <iprintf>
 800d5fc:	f06f 0305 	mvn.w	r3, #5
 800d600:	e0e6      	b.n	800d7d0 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d604:	88db      	ldrh	r3, [r3, #6]
 800d606:	b29b      	uxth	r3, r3
 800d608:	4618      	mov	r0, r3
 800d60a:	f7f6 ffc9 	bl	80045a0 <lwip_htons>
 800d60e:	4603      	mov	r3, r0
 800d610:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 800d612:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d618:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d61a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d61c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d620:	2b00      	cmp	r3, #0
 800d622:	d009      	beq.n	800d638 <ip4_frag+0x84>
 800d624:	4b6c      	ldr	r3, [pc, #432]	@ (800d7d8 <ip4_frag+0x224>)
 800d626:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d62a:	496e      	ldr	r1, [pc, #440]	@ (800d7e4 <ip4_frag+0x230>)
 800d62c:	486c      	ldr	r0, [pc, #432]	@ (800d7e0 <ip4_frag+0x22c>)
 800d62e:	f000 fa7f 	bl	800db30 <iprintf>
 800d632:	f06f 0305 	mvn.w	r3, #5
 800d636:	e0cb      	b.n	800d7d0 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	891b      	ldrh	r3, [r3, #8]
 800d63c:	3b14      	subs	r3, #20
 800d63e:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 800d640:	e0bd      	b.n	800d7be <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d642:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d644:	00da      	lsls	r2, r3, #3
 800d646:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d648:	4293      	cmp	r3, r2
 800d64a:	bfa8      	it	ge
 800d64c:	4613      	movge	r3, r2
 800d64e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d650:	2200      	movs	r2, #0
 800d652:	2114      	movs	r1, #20
 800d654:	2002      	movs	r0, #2
 800d656:	f7f7 fd71 	bl	800513c <pbuf_alloc>
 800d65a:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d65c:	6a3b      	ldr	r3, [r7, #32]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f000 80b3 	beq.w	800d7ca <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	895b      	ldrh	r3, [r3, #10]
 800d668:	2b13      	cmp	r3, #19
 800d66a:	d806      	bhi.n	800d67a <ip4_frag+0xc6>
 800d66c:	4b5a      	ldr	r3, [pc, #360]	@ (800d7d8 <ip4_frag+0x224>)
 800d66e:	f44f 7242 	mov.w	r2, #776	@ 0x308
 800d672:	495d      	ldr	r1, [pc, #372]	@ (800d7e8 <ip4_frag+0x234>)
 800d674:	485a      	ldr	r0, [pc, #360]	@ (800d7e0 <ip4_frag+0x22c>)
 800d676:	f000 fa5b 	bl	800db30 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d67a:	6a3b      	ldr	r3, [r7, #32]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	2214      	movs	r2, #20
 800d680:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d682:	4618      	mov	r0, r3
 800d684:	f000 fb4d 	bl	800dd22 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d688:	6a3b      	ldr	r3, [r7, #32]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 800d68e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d690:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 800d692:	e04f      	b.n	800d734 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	895a      	ldrh	r2, [r3, #10]
 800d698:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d69e:	8b7a      	ldrh	r2, [r7, #26]
 800d6a0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	bf28      	it	cs
 800d6a6:	4613      	movcs	r3, r2
 800d6a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d6aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d105      	bne.n	800d6bc <ip4_frag+0x108>
        poff = 0;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	60fb      	str	r3, [r7, #12]
        continue;
 800d6ba:	e03b      	b.n	800d734 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d6bc:	f7ff ff22 	bl	800d504 <ip_frag_alloc_pbuf_custom_ref>
 800d6c0:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d103      	bne.n	800d6d0 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 800d6c8:	6a38      	ldr	r0, [r7, #32]
 800d6ca:	f7f8 f8af 	bl	800582c <pbuf_free>
        goto memerr;
 800d6ce:	e07d      	b.n	800d7cc <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d6d0:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d6d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d6d8:	4413      	add	r3, r2
 800d6da:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800d6dc:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d6de:	9201      	str	r2, [sp, #4]
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2202      	movs	r2, #2
 800d6e6:	2004      	movs	r0, #4
 800d6e8:	f7f7 fec2 	bl	8005470 <pbuf_alloced_custom>
 800d6ec:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d106      	bne.n	800d702 <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d6f4:	6978      	ldr	r0, [r7, #20]
 800d6f6:	f7ff ff0d 	bl	800d514 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d6fa:	6a38      	ldr	r0, [r7, #32]
 800d6fc:	f7f8 f896 	bl	800582c <pbuf_free>
        goto memerr;
 800d700:	e064      	b.n	800d7cc <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800d702:	68f8      	ldr	r0, [r7, #12]
 800d704:	f7f8 f93c 	bl	8005980 <pbuf_ref>
      pcr->original = p;
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	4a36      	ldr	r2, [pc, #216]	@ (800d7ec <ip4_frag+0x238>)
 800d712:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d714:	6939      	ldr	r1, [r7, #16]
 800d716:	6a38      	ldr	r0, [r7, #32]
 800d718:	f7f8 f954 	bl	80059c4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800d71c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800d71e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 800d724:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d726:	2b00      	cmp	r3, #0
 800d728:	d004      	beq.n	800d734 <ip4_frag+0x180>
        poff = 0;
 800d72a:	2300      	movs	r3, #0
 800d72c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d734:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1ac      	bne.n	800d694 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 800d73a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d73c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d73e:	4413      	add	r3, r2
 800d740:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d746:	f1a3 0213 	sub.w	r2, r3, #19
 800d74a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d74c:	429a      	cmp	r2, r3
 800d74e:	bfcc      	ite	gt
 800d750:	2301      	movgt	r3, #1
 800d752:	2300      	movle	r3, #0
 800d754:	b2db      	uxtb	r3, r3
 800d756:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d758:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d75a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d75e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d103      	bne.n	800d76e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800d766:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d768:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d76c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d76e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d770:	4618      	mov	r0, r3
 800d772:	f7f6 ff15 	bl	80045a0 <lwip_htons>
 800d776:	4603      	mov	r3, r0
 800d778:	461a      	mov	r2, r3
 800d77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800d77e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d780:	3314      	adds	r3, #20
 800d782:	b29b      	uxth	r3, r3
 800d784:	4618      	mov	r0, r3
 800d786:	f7f6 ff0b 	bl	80045a0 <lwip_htons>
 800d78a:	4603      	mov	r3, r0
 800d78c:	461a      	mov	r2, r3
 800d78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d790:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d794:	2200      	movs	r2, #0
 800d796:	729a      	strb	r2, [r3, #10]
 800d798:	2200      	movs	r2, #0
 800d79a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	695b      	ldr	r3, [r3, #20]
 800d7a0:	687a      	ldr	r2, [r7, #4]
 800d7a2:	6a39      	ldr	r1, [r7, #32]
 800d7a4:	68b8      	ldr	r0, [r7, #8]
 800d7a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d7a8:	6a38      	ldr	r0, [r7, #32]
 800d7aa:	f7f8 f83f 	bl	800582c <pbuf_free>
    left -= fragsize;
 800d7ae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d7b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d7b2:	1ad3      	subs	r3, r2, r3
 800d7b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 800d7b6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800d7b8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d7ba:	4413      	add	r3, r2
 800d7bc:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 800d7be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f47f af3e 	bne.w	800d642 <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	e002      	b.n	800d7d0 <ip4_frag+0x21c>
      goto memerr;
 800d7ca:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d7cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3740      	adds	r7, #64	@ 0x40
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	0801054c 	.word	0x0801054c
 800d7dc:	080106d8 	.word	0x080106d8
 800d7e0:	08010594 	.word	0x08010594
 800d7e4:	08010700 	.word	0x08010700
 800d7e8:	0801071c 	.word	0x0801071c
 800d7ec:	0800d54d 	.word	0x0800d54d

0800d7f0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800d7fa:	230e      	movs	r3, #14
 800d7fc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	895b      	ldrh	r3, [r3, #10]
 800d802:	2b0e      	cmp	r3, #14
 800d804:	d977      	bls.n	800d8f6 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	7b1a      	ldrb	r2, [r3, #12]
 800d810:	7b5b      	ldrb	r3, [r3, #13]
 800d812:	021b      	lsls	r3, r3, #8
 800d814:	4313      	orrs	r3, r2
 800d816:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	2b00      	cmp	r3, #0
 800d822:	d023      	beq.n	800d86c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d10f      	bne.n	800d84c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	785b      	ldrb	r3, [r3, #1]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d11b      	bne.n	800d86c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d838:	2b5e      	cmp	r3, #94	@ 0x5e
 800d83a:	d117      	bne.n	800d86c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	7b5b      	ldrb	r3, [r3, #13]
 800d840:	f043 0310 	orr.w	r3, r3, #16
 800d844:	b2da      	uxtb	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	735a      	strb	r2, [r3, #13]
 800d84a:	e00f      	b.n	800d86c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	2206      	movs	r2, #6
 800d850:	4931      	ldr	r1, [pc, #196]	@ (800d918 <ethernet_input+0x128>)
 800d852:	4618      	mov	r0, r3
 800d854:	f000 f9c1 	bl	800dbda <memcmp>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d106      	bne.n	800d86c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	7b5b      	ldrb	r3, [r3, #13]
 800d862:	f043 0308 	orr.w	r3, r3, #8
 800d866:	b2da      	uxtb	r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d86c:	89fb      	ldrh	r3, [r7, #14]
 800d86e:	2b08      	cmp	r3, #8
 800d870:	d003      	beq.n	800d87a <ethernet_input+0x8a>
 800d872:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d876:	d01e      	beq.n	800d8b6 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d878:	e046      	b.n	800d908 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d880:	f003 0308 	and.w	r3, r3, #8
 800d884:	2b00      	cmp	r3, #0
 800d886:	d038      	beq.n	800d8fa <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	895b      	ldrh	r3, [r3, #10]
 800d88c:	461a      	mov	r2, r3
 800d88e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d892:	429a      	cmp	r2, r3
 800d894:	db33      	blt.n	800d8fe <ethernet_input+0x10e>
 800d896:	8afb      	ldrh	r3, [r7, #22]
 800d898:	425b      	negs	r3, r3
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	b21b      	sxth	r3, r3
 800d89e:	4619      	mov	r1, r3
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7f7 ff9f 	bl	80057e4 <pbuf_header>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d128      	bne.n	800d8fe <ethernet_input+0x10e>
        ip4_input(p, netif);
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7fe ff82 	bl	800c7b8 <ip4_input>
      break;
 800d8b4:	e01d      	b.n	800d8f2 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d8bc:	f003 0308 	and.w	r3, r3, #8
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d01e      	beq.n	800d902 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	895b      	ldrh	r3, [r3, #10]
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	db19      	blt.n	800d906 <ethernet_input+0x116>
 800d8d2:	8afb      	ldrh	r3, [r7, #22]
 800d8d4:	425b      	negs	r3, r3
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	b21b      	sxth	r3, r3
 800d8da:	4619      	mov	r1, r3
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f7f7 ff81 	bl	80057e4 <pbuf_header>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10e      	bne.n	800d906 <ethernet_input+0x116>
        etharp_input(p, netif);
 800d8e8:	6839      	ldr	r1, [r7, #0]
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7fe f952 	bl	800bb94 <etharp_input>
      break;
 800d8f0:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	e00c      	b.n	800d910 <ethernet_input+0x120>
    goto free_and_return;
 800d8f6:	bf00      	nop
 800d8f8:	e006      	b.n	800d908 <ethernet_input+0x118>
        goto free_and_return;
 800d8fa:	bf00      	nop
 800d8fc:	e004      	b.n	800d908 <ethernet_input+0x118>
        goto free_and_return;
 800d8fe:	bf00      	nop
 800d900:	e002      	b.n	800d908 <ethernet_input+0x118>
        goto free_and_return;
 800d902:	bf00      	nop
 800d904:	e000      	b.n	800d908 <ethernet_input+0x118>
        goto free_and_return;
 800d906:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7f7 ff8f 	bl	800582c <pbuf_free>
  return ERR_OK;
 800d90e:	2300      	movs	r3, #0
}
 800d910:	4618      	mov	r0, r3
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	08011910 	.word	0x08011910

0800d91c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
 800d928:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d92a:	8c3b      	ldrh	r3, [r7, #32]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7f6 fe37 	bl	80045a0 <lwip_htons>
 800d932:	4603      	mov	r3, r0
 800d934:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d936:	210e      	movs	r1, #14
 800d938:	68b8      	ldr	r0, [r7, #8]
 800d93a:	f7f7 ff53 	bl	80057e4 <pbuf_header>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d125      	bne.n	800d990 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	8afa      	ldrh	r2, [r7, #22]
 800d94e:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	2206      	movs	r2, #6
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	4618      	mov	r0, r3
 800d958:	f000 f9e3 	bl	800dd22 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	3306      	adds	r3, #6
 800d960:	2206      	movs	r2, #6
 800d962:	6879      	ldr	r1, [r7, #4]
 800d964:	4618      	mov	r0, r3
 800d966:	f000 f9dc 	bl	800dd22 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d970:	2b06      	cmp	r3, #6
 800d972:	d006      	beq.n	800d982 <ethernet_output+0x66>
 800d974:	4b0a      	ldr	r3, [pc, #40]	@ (800d9a0 <ethernet_output+0x84>)
 800d976:	f240 122b 	movw	r2, #299	@ 0x12b
 800d97a:	490a      	ldr	r1, [pc, #40]	@ (800d9a4 <ethernet_output+0x88>)
 800d97c:	480a      	ldr	r0, [pc, #40]	@ (800d9a8 <ethernet_output+0x8c>)
 800d97e:	f000 f8d7 	bl	800db30 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	699b      	ldr	r3, [r3, #24]
 800d986:	68b9      	ldr	r1, [r7, #8]
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	4798      	blx	r3
 800d98c:	4603      	mov	r3, r0
 800d98e:	e002      	b.n	800d996 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d990:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d992:	f06f 0301 	mvn.w	r3, #1
}
 800d996:	4618      	mov	r0, r3
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	0801073c 	.word	0x0801073c
 800d9a4:	08010774 	.word	0x08010774
 800d9a8:	080107a8 	.word	0x080107a8

0800d9ac <std>:
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	b510      	push	{r4, lr}
 800d9b0:	4604      	mov	r4, r0
 800d9b2:	e9c0 3300 	strd	r3, r3, [r0]
 800d9b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9ba:	6083      	str	r3, [r0, #8]
 800d9bc:	8181      	strh	r1, [r0, #12]
 800d9be:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9c0:	81c2      	strh	r2, [r0, #14]
 800d9c2:	6183      	str	r3, [r0, #24]
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	2208      	movs	r2, #8
 800d9c8:	305c      	adds	r0, #92	@ 0x5c
 800d9ca:	f000 f916 	bl	800dbfa <memset>
 800d9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800da04 <std+0x58>)
 800d9d0:	6224      	str	r4, [r4, #32]
 800d9d2:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9d4:	4b0c      	ldr	r3, [pc, #48]	@ (800da08 <std+0x5c>)
 800d9d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9d8:	4b0c      	ldr	r3, [pc, #48]	@ (800da0c <std+0x60>)
 800d9da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9dc:	4b0c      	ldr	r3, [pc, #48]	@ (800da10 <std+0x64>)
 800d9de:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9e0:	4b0c      	ldr	r3, [pc, #48]	@ (800da14 <std+0x68>)
 800d9e2:	429c      	cmp	r4, r3
 800d9e4:	d006      	beq.n	800d9f4 <std+0x48>
 800d9e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9ea:	4294      	cmp	r4, r2
 800d9ec:	d002      	beq.n	800d9f4 <std+0x48>
 800d9ee:	33d0      	adds	r3, #208	@ 0xd0
 800d9f0:	429c      	cmp	r4, r3
 800d9f2:	d105      	bne.n	800da00 <std+0x54>
 800d9f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fc:	f000 b98e 	b.w	800dd1c <__retarget_lock_init_recursive>
 800da00:	bd10      	pop	{r4, pc}
 800da02:	bf00      	nop
 800da04:	0800db55 	.word	0x0800db55
 800da08:	0800db77 	.word	0x0800db77
 800da0c:	0800dbaf 	.word	0x0800dbaf
 800da10:	0800dbd3 	.word	0x0800dbd3
 800da14:	20008464 	.word	0x20008464

0800da18 <stdio_exit_handler>:
 800da18:	4a02      	ldr	r2, [pc, #8]	@ (800da24 <stdio_exit_handler+0xc>)
 800da1a:	4903      	ldr	r1, [pc, #12]	@ (800da28 <stdio_exit_handler+0x10>)
 800da1c:	4803      	ldr	r0, [pc, #12]	@ (800da2c <stdio_exit_handler+0x14>)
 800da1e:	f000 b869 	b.w	800daf4 <_fwalk_sglue>
 800da22:	bf00      	nop
 800da24:	20000010 	.word	0x20000010
 800da28:	0800e5d1 	.word	0x0800e5d1
 800da2c:	20000020 	.word	0x20000020

0800da30 <cleanup_stdio>:
 800da30:	6841      	ldr	r1, [r0, #4]
 800da32:	4b0c      	ldr	r3, [pc, #48]	@ (800da64 <cleanup_stdio+0x34>)
 800da34:	b510      	push	{r4, lr}
 800da36:	4299      	cmp	r1, r3
 800da38:	4604      	mov	r4, r0
 800da3a:	d001      	beq.n	800da40 <cleanup_stdio+0x10>
 800da3c:	f000 fdc8 	bl	800e5d0 <_fflush_r>
 800da40:	68a1      	ldr	r1, [r4, #8]
 800da42:	4b09      	ldr	r3, [pc, #36]	@ (800da68 <cleanup_stdio+0x38>)
 800da44:	4299      	cmp	r1, r3
 800da46:	d002      	beq.n	800da4e <cleanup_stdio+0x1e>
 800da48:	4620      	mov	r0, r4
 800da4a:	f000 fdc1 	bl	800e5d0 <_fflush_r>
 800da4e:	68e1      	ldr	r1, [r4, #12]
 800da50:	4b06      	ldr	r3, [pc, #24]	@ (800da6c <cleanup_stdio+0x3c>)
 800da52:	4299      	cmp	r1, r3
 800da54:	d004      	beq.n	800da60 <cleanup_stdio+0x30>
 800da56:	4620      	mov	r0, r4
 800da58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da5c:	f000 bdb8 	b.w	800e5d0 <_fflush_r>
 800da60:	bd10      	pop	{r4, pc}
 800da62:	bf00      	nop
 800da64:	20008464 	.word	0x20008464
 800da68:	200084cc 	.word	0x200084cc
 800da6c:	20008534 	.word	0x20008534

0800da70 <global_stdio_init.part.0>:
 800da70:	b510      	push	{r4, lr}
 800da72:	4b0b      	ldr	r3, [pc, #44]	@ (800daa0 <global_stdio_init.part.0+0x30>)
 800da74:	4c0b      	ldr	r4, [pc, #44]	@ (800daa4 <global_stdio_init.part.0+0x34>)
 800da76:	4a0c      	ldr	r2, [pc, #48]	@ (800daa8 <global_stdio_init.part.0+0x38>)
 800da78:	4620      	mov	r0, r4
 800da7a:	601a      	str	r2, [r3, #0]
 800da7c:	2104      	movs	r1, #4
 800da7e:	2200      	movs	r2, #0
 800da80:	f7ff ff94 	bl	800d9ac <std>
 800da84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da88:	2201      	movs	r2, #1
 800da8a:	2109      	movs	r1, #9
 800da8c:	f7ff ff8e 	bl	800d9ac <std>
 800da90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da94:	2202      	movs	r2, #2
 800da96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da9a:	2112      	movs	r1, #18
 800da9c:	f7ff bf86 	b.w	800d9ac <std>
 800daa0:	2000859c 	.word	0x2000859c
 800daa4:	20008464 	.word	0x20008464
 800daa8:	0800da19 	.word	0x0800da19

0800daac <__sfp_lock_acquire>:
 800daac:	4801      	ldr	r0, [pc, #4]	@ (800dab4 <__sfp_lock_acquire+0x8>)
 800daae:	f000 b936 	b.w	800dd1e <__retarget_lock_acquire_recursive>
 800dab2:	bf00      	nop
 800dab4:	200085a5 	.word	0x200085a5

0800dab8 <__sfp_lock_release>:
 800dab8:	4801      	ldr	r0, [pc, #4]	@ (800dac0 <__sfp_lock_release+0x8>)
 800daba:	f000 b931 	b.w	800dd20 <__retarget_lock_release_recursive>
 800dabe:	bf00      	nop
 800dac0:	200085a5 	.word	0x200085a5

0800dac4 <__sinit>:
 800dac4:	b510      	push	{r4, lr}
 800dac6:	4604      	mov	r4, r0
 800dac8:	f7ff fff0 	bl	800daac <__sfp_lock_acquire>
 800dacc:	6a23      	ldr	r3, [r4, #32]
 800dace:	b11b      	cbz	r3, 800dad8 <__sinit+0x14>
 800dad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dad4:	f7ff bff0 	b.w	800dab8 <__sfp_lock_release>
 800dad8:	4b04      	ldr	r3, [pc, #16]	@ (800daec <__sinit+0x28>)
 800dada:	6223      	str	r3, [r4, #32]
 800dadc:	4b04      	ldr	r3, [pc, #16]	@ (800daf0 <__sinit+0x2c>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d1f5      	bne.n	800dad0 <__sinit+0xc>
 800dae4:	f7ff ffc4 	bl	800da70 <global_stdio_init.part.0>
 800dae8:	e7f2      	b.n	800dad0 <__sinit+0xc>
 800daea:	bf00      	nop
 800daec:	0800da31 	.word	0x0800da31
 800daf0:	2000859c 	.word	0x2000859c

0800daf4 <_fwalk_sglue>:
 800daf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf8:	4607      	mov	r7, r0
 800dafa:	4688      	mov	r8, r1
 800dafc:	4614      	mov	r4, r2
 800dafe:	2600      	movs	r6, #0
 800db00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db04:	f1b9 0901 	subs.w	r9, r9, #1
 800db08:	d505      	bpl.n	800db16 <_fwalk_sglue+0x22>
 800db0a:	6824      	ldr	r4, [r4, #0]
 800db0c:	2c00      	cmp	r4, #0
 800db0e:	d1f7      	bne.n	800db00 <_fwalk_sglue+0xc>
 800db10:	4630      	mov	r0, r6
 800db12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db16:	89ab      	ldrh	r3, [r5, #12]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d907      	bls.n	800db2c <_fwalk_sglue+0x38>
 800db1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db20:	3301      	adds	r3, #1
 800db22:	d003      	beq.n	800db2c <_fwalk_sglue+0x38>
 800db24:	4629      	mov	r1, r5
 800db26:	4638      	mov	r0, r7
 800db28:	47c0      	blx	r8
 800db2a:	4306      	orrs	r6, r0
 800db2c:	3568      	adds	r5, #104	@ 0x68
 800db2e:	e7e9      	b.n	800db04 <_fwalk_sglue+0x10>

0800db30 <iprintf>:
 800db30:	b40f      	push	{r0, r1, r2, r3}
 800db32:	b507      	push	{r0, r1, r2, lr}
 800db34:	4906      	ldr	r1, [pc, #24]	@ (800db50 <iprintf+0x20>)
 800db36:	ab04      	add	r3, sp, #16
 800db38:	6808      	ldr	r0, [r1, #0]
 800db3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db3e:	6881      	ldr	r1, [r0, #8]
 800db40:	9301      	str	r3, [sp, #4]
 800db42:	f000 fa1b 	bl	800df7c <_vfiprintf_r>
 800db46:	b003      	add	sp, #12
 800db48:	f85d eb04 	ldr.w	lr, [sp], #4
 800db4c:	b004      	add	sp, #16
 800db4e:	4770      	bx	lr
 800db50:	2000001c 	.word	0x2000001c

0800db54 <__sread>:
 800db54:	b510      	push	{r4, lr}
 800db56:	460c      	mov	r4, r1
 800db58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db5c:	f000 f896 	bl	800dc8c <_read_r>
 800db60:	2800      	cmp	r0, #0
 800db62:	bfab      	itete	ge
 800db64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db66:	89a3      	ldrhlt	r3, [r4, #12]
 800db68:	181b      	addge	r3, r3, r0
 800db6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800db6e:	bfac      	ite	ge
 800db70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800db72:	81a3      	strhlt	r3, [r4, #12]
 800db74:	bd10      	pop	{r4, pc}

0800db76 <__swrite>:
 800db76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7a:	461f      	mov	r7, r3
 800db7c:	898b      	ldrh	r3, [r1, #12]
 800db7e:	4605      	mov	r5, r0
 800db80:	05db      	lsls	r3, r3, #23
 800db82:	460c      	mov	r4, r1
 800db84:	4616      	mov	r6, r2
 800db86:	d505      	bpl.n	800db94 <__swrite+0x1e>
 800db88:	2302      	movs	r3, #2
 800db8a:	2200      	movs	r2, #0
 800db8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db90:	f000 f86a 	bl	800dc68 <_lseek_r>
 800db94:	89a3      	ldrh	r3, [r4, #12]
 800db96:	4632      	mov	r2, r6
 800db98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800db9c:	81a3      	strh	r3, [r4, #12]
 800db9e:	4628      	mov	r0, r5
 800dba0:	463b      	mov	r3, r7
 800dba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbaa:	f000 b881 	b.w	800dcb0 <_write_r>

0800dbae <__sseek>:
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb6:	f000 f857 	bl	800dc68 <_lseek_r>
 800dbba:	1c43      	adds	r3, r0, #1
 800dbbc:	89a3      	ldrh	r3, [r4, #12]
 800dbbe:	bf15      	itete	ne
 800dbc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbca:	81a3      	strheq	r3, [r4, #12]
 800dbcc:	bf18      	it	ne
 800dbce:	81a3      	strhne	r3, [r4, #12]
 800dbd0:	bd10      	pop	{r4, pc}

0800dbd2 <__sclose>:
 800dbd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbd6:	f000 b837 	b.w	800dc48 <_close_r>

0800dbda <memcmp>:
 800dbda:	b510      	push	{r4, lr}
 800dbdc:	3901      	subs	r1, #1
 800dbde:	4402      	add	r2, r0
 800dbe0:	4290      	cmp	r0, r2
 800dbe2:	d101      	bne.n	800dbe8 <memcmp+0xe>
 800dbe4:	2000      	movs	r0, #0
 800dbe6:	e005      	b.n	800dbf4 <memcmp+0x1a>
 800dbe8:	7803      	ldrb	r3, [r0, #0]
 800dbea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dbee:	42a3      	cmp	r3, r4
 800dbf0:	d001      	beq.n	800dbf6 <memcmp+0x1c>
 800dbf2:	1b18      	subs	r0, r3, r4
 800dbf4:	bd10      	pop	{r4, pc}
 800dbf6:	3001      	adds	r0, #1
 800dbf8:	e7f2      	b.n	800dbe0 <memcmp+0x6>

0800dbfa <memset>:
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	4402      	add	r2, r0
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d100      	bne.n	800dc04 <memset+0xa>
 800dc02:	4770      	bx	lr
 800dc04:	f803 1b01 	strb.w	r1, [r3], #1
 800dc08:	e7f9      	b.n	800dbfe <memset+0x4>

0800dc0a <strchr>:
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	b2c9      	uxtb	r1, r1
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc14:	b112      	cbz	r2, 800dc1c <strchr+0x12>
 800dc16:	428a      	cmp	r2, r1
 800dc18:	d1f9      	bne.n	800dc0e <strchr+0x4>
 800dc1a:	4770      	bx	lr
 800dc1c:	2900      	cmp	r1, #0
 800dc1e:	bf18      	it	ne
 800dc20:	2000      	movne	r0, #0
 800dc22:	4770      	bx	lr

0800dc24 <strncmp>:
 800dc24:	b510      	push	{r4, lr}
 800dc26:	b16a      	cbz	r2, 800dc44 <strncmp+0x20>
 800dc28:	3901      	subs	r1, #1
 800dc2a:	1884      	adds	r4, r0, r2
 800dc2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d103      	bne.n	800dc40 <strncmp+0x1c>
 800dc38:	42a0      	cmp	r0, r4
 800dc3a:	d001      	beq.n	800dc40 <strncmp+0x1c>
 800dc3c:	2a00      	cmp	r2, #0
 800dc3e:	d1f5      	bne.n	800dc2c <strncmp+0x8>
 800dc40:	1ad0      	subs	r0, r2, r3
 800dc42:	bd10      	pop	{r4, pc}
 800dc44:	4610      	mov	r0, r2
 800dc46:	e7fc      	b.n	800dc42 <strncmp+0x1e>

0800dc48 <_close_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	4d05      	ldr	r5, [pc, #20]	@ (800dc64 <_close_r+0x1c>)
 800dc4e:	4604      	mov	r4, r0
 800dc50:	4608      	mov	r0, r1
 800dc52:	602b      	str	r3, [r5, #0]
 800dc54:	f7f2 feb1 	bl	80009ba <_close>
 800dc58:	1c43      	adds	r3, r0, #1
 800dc5a:	d102      	bne.n	800dc62 <_close_r+0x1a>
 800dc5c:	682b      	ldr	r3, [r5, #0]
 800dc5e:	b103      	cbz	r3, 800dc62 <_close_r+0x1a>
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	bd38      	pop	{r3, r4, r5, pc}
 800dc64:	200085a0 	.word	0x200085a0

0800dc68 <_lseek_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	4608      	mov	r0, r1
 800dc6e:	4611      	mov	r1, r2
 800dc70:	2200      	movs	r2, #0
 800dc72:	4d05      	ldr	r5, [pc, #20]	@ (800dc88 <_lseek_r+0x20>)
 800dc74:	602a      	str	r2, [r5, #0]
 800dc76:	461a      	mov	r2, r3
 800dc78:	f7f2 fec3 	bl	8000a02 <_lseek>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d102      	bne.n	800dc86 <_lseek_r+0x1e>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	b103      	cbz	r3, 800dc86 <_lseek_r+0x1e>
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	200085a0 	.word	0x200085a0

0800dc8c <_read_r>:
 800dc8c:	b538      	push	{r3, r4, r5, lr}
 800dc8e:	4604      	mov	r4, r0
 800dc90:	4608      	mov	r0, r1
 800dc92:	4611      	mov	r1, r2
 800dc94:	2200      	movs	r2, #0
 800dc96:	4d05      	ldr	r5, [pc, #20]	@ (800dcac <_read_r+0x20>)
 800dc98:	602a      	str	r2, [r5, #0]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	f7f2 fe54 	bl	8000948 <_read>
 800dca0:	1c43      	adds	r3, r0, #1
 800dca2:	d102      	bne.n	800dcaa <_read_r+0x1e>
 800dca4:	682b      	ldr	r3, [r5, #0]
 800dca6:	b103      	cbz	r3, 800dcaa <_read_r+0x1e>
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	bd38      	pop	{r3, r4, r5, pc}
 800dcac:	200085a0 	.word	0x200085a0

0800dcb0 <_write_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	4608      	mov	r0, r1
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	2200      	movs	r2, #0
 800dcba:	4d05      	ldr	r5, [pc, #20]	@ (800dcd0 <_write_r+0x20>)
 800dcbc:	602a      	str	r2, [r5, #0]
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	f7f2 fe5f 	bl	8000982 <_write>
 800dcc4:	1c43      	adds	r3, r0, #1
 800dcc6:	d102      	bne.n	800dcce <_write_r+0x1e>
 800dcc8:	682b      	ldr	r3, [r5, #0]
 800dcca:	b103      	cbz	r3, 800dcce <_write_r+0x1e>
 800dccc:	6023      	str	r3, [r4, #0]
 800dcce:	bd38      	pop	{r3, r4, r5, pc}
 800dcd0:	200085a0 	.word	0x200085a0

0800dcd4 <__libc_init_array>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	2600      	movs	r6, #0
 800dcd8:	4d0c      	ldr	r5, [pc, #48]	@ (800dd0c <__libc_init_array+0x38>)
 800dcda:	4c0d      	ldr	r4, [pc, #52]	@ (800dd10 <__libc_init_array+0x3c>)
 800dcdc:	1b64      	subs	r4, r4, r5
 800dcde:	10a4      	asrs	r4, r4, #2
 800dce0:	42a6      	cmp	r6, r4
 800dce2:	d109      	bne.n	800dcf8 <__libc_init_array+0x24>
 800dce4:	f000 fdd2 	bl	800e88c <_init>
 800dce8:	2600      	movs	r6, #0
 800dcea:	4d0a      	ldr	r5, [pc, #40]	@ (800dd14 <__libc_init_array+0x40>)
 800dcec:	4c0a      	ldr	r4, [pc, #40]	@ (800dd18 <__libc_init_array+0x44>)
 800dcee:	1b64      	subs	r4, r4, r5
 800dcf0:	10a4      	asrs	r4, r4, #2
 800dcf2:	42a6      	cmp	r6, r4
 800dcf4:	d105      	bne.n	800dd02 <__libc_init_array+0x2e>
 800dcf6:	bd70      	pop	{r4, r5, r6, pc}
 800dcf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcfc:	4798      	blx	r3
 800dcfe:	3601      	adds	r6, #1
 800dd00:	e7ee      	b.n	800dce0 <__libc_init_array+0xc>
 800dd02:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd06:	4798      	blx	r3
 800dd08:	3601      	adds	r6, #1
 800dd0a:	e7f2      	b.n	800dcf2 <__libc_init_array+0x1e>
 800dd0c:	0801195c 	.word	0x0801195c
 800dd10:	0801195c 	.word	0x0801195c
 800dd14:	0801195c 	.word	0x0801195c
 800dd18:	08011960 	.word	0x08011960

0800dd1c <__retarget_lock_init_recursive>:
 800dd1c:	4770      	bx	lr

0800dd1e <__retarget_lock_acquire_recursive>:
 800dd1e:	4770      	bx	lr

0800dd20 <__retarget_lock_release_recursive>:
 800dd20:	4770      	bx	lr

0800dd22 <memcpy>:
 800dd22:	440a      	add	r2, r1
 800dd24:	4291      	cmp	r1, r2
 800dd26:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd2a:	d100      	bne.n	800dd2e <memcpy+0xc>
 800dd2c:	4770      	bx	lr
 800dd2e:	b510      	push	{r4, lr}
 800dd30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd34:	4291      	cmp	r1, r2
 800dd36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd3a:	d1f9      	bne.n	800dd30 <memcpy+0xe>
 800dd3c:	bd10      	pop	{r4, pc}
	...

0800dd40 <_free_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4605      	mov	r5, r0
 800dd44:	2900      	cmp	r1, #0
 800dd46:	d040      	beq.n	800ddca <_free_r+0x8a>
 800dd48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd4c:	1f0c      	subs	r4, r1, #4
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	bfb8      	it	lt
 800dd52:	18e4      	addlt	r4, r4, r3
 800dd54:	f000 f8de 	bl	800df14 <__malloc_lock>
 800dd58:	4a1c      	ldr	r2, [pc, #112]	@ (800ddcc <_free_r+0x8c>)
 800dd5a:	6813      	ldr	r3, [r2, #0]
 800dd5c:	b933      	cbnz	r3, 800dd6c <_free_r+0x2c>
 800dd5e:	6063      	str	r3, [r4, #4]
 800dd60:	6014      	str	r4, [r2, #0]
 800dd62:	4628      	mov	r0, r5
 800dd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd68:	f000 b8da 	b.w	800df20 <__malloc_unlock>
 800dd6c:	42a3      	cmp	r3, r4
 800dd6e:	d908      	bls.n	800dd82 <_free_r+0x42>
 800dd70:	6820      	ldr	r0, [r4, #0]
 800dd72:	1821      	adds	r1, r4, r0
 800dd74:	428b      	cmp	r3, r1
 800dd76:	bf01      	itttt	eq
 800dd78:	6819      	ldreq	r1, [r3, #0]
 800dd7a:	685b      	ldreq	r3, [r3, #4]
 800dd7c:	1809      	addeq	r1, r1, r0
 800dd7e:	6021      	streq	r1, [r4, #0]
 800dd80:	e7ed      	b.n	800dd5e <_free_r+0x1e>
 800dd82:	461a      	mov	r2, r3
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	b10b      	cbz	r3, 800dd8c <_free_r+0x4c>
 800dd88:	42a3      	cmp	r3, r4
 800dd8a:	d9fa      	bls.n	800dd82 <_free_r+0x42>
 800dd8c:	6811      	ldr	r1, [r2, #0]
 800dd8e:	1850      	adds	r0, r2, r1
 800dd90:	42a0      	cmp	r0, r4
 800dd92:	d10b      	bne.n	800ddac <_free_r+0x6c>
 800dd94:	6820      	ldr	r0, [r4, #0]
 800dd96:	4401      	add	r1, r0
 800dd98:	1850      	adds	r0, r2, r1
 800dd9a:	4283      	cmp	r3, r0
 800dd9c:	6011      	str	r1, [r2, #0]
 800dd9e:	d1e0      	bne.n	800dd62 <_free_r+0x22>
 800dda0:	6818      	ldr	r0, [r3, #0]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	4408      	add	r0, r1
 800dda6:	6010      	str	r0, [r2, #0]
 800dda8:	6053      	str	r3, [r2, #4]
 800ddaa:	e7da      	b.n	800dd62 <_free_r+0x22>
 800ddac:	d902      	bls.n	800ddb4 <_free_r+0x74>
 800ddae:	230c      	movs	r3, #12
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	e7d6      	b.n	800dd62 <_free_r+0x22>
 800ddb4:	6820      	ldr	r0, [r4, #0]
 800ddb6:	1821      	adds	r1, r4, r0
 800ddb8:	428b      	cmp	r3, r1
 800ddba:	bf01      	itttt	eq
 800ddbc:	6819      	ldreq	r1, [r3, #0]
 800ddbe:	685b      	ldreq	r3, [r3, #4]
 800ddc0:	1809      	addeq	r1, r1, r0
 800ddc2:	6021      	streq	r1, [r4, #0]
 800ddc4:	6063      	str	r3, [r4, #4]
 800ddc6:	6054      	str	r4, [r2, #4]
 800ddc8:	e7cb      	b.n	800dd62 <_free_r+0x22>
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	200085ac 	.word	0x200085ac

0800ddd0 <sbrk_aligned>:
 800ddd0:	b570      	push	{r4, r5, r6, lr}
 800ddd2:	4e0f      	ldr	r6, [pc, #60]	@ (800de10 <sbrk_aligned+0x40>)
 800ddd4:	460c      	mov	r4, r1
 800ddd6:	6831      	ldr	r1, [r6, #0]
 800ddd8:	4605      	mov	r5, r0
 800ddda:	b911      	cbnz	r1, 800dde2 <sbrk_aligned+0x12>
 800dddc:	f000 fcb4 	bl	800e748 <_sbrk_r>
 800dde0:	6030      	str	r0, [r6, #0]
 800dde2:	4621      	mov	r1, r4
 800dde4:	4628      	mov	r0, r5
 800dde6:	f000 fcaf 	bl	800e748 <_sbrk_r>
 800ddea:	1c43      	adds	r3, r0, #1
 800ddec:	d103      	bne.n	800ddf6 <sbrk_aligned+0x26>
 800ddee:	f04f 34ff 	mov.w	r4, #4294967295
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	bd70      	pop	{r4, r5, r6, pc}
 800ddf6:	1cc4      	adds	r4, r0, #3
 800ddf8:	f024 0403 	bic.w	r4, r4, #3
 800ddfc:	42a0      	cmp	r0, r4
 800ddfe:	d0f8      	beq.n	800ddf2 <sbrk_aligned+0x22>
 800de00:	1a21      	subs	r1, r4, r0
 800de02:	4628      	mov	r0, r5
 800de04:	f000 fca0 	bl	800e748 <_sbrk_r>
 800de08:	3001      	adds	r0, #1
 800de0a:	d1f2      	bne.n	800ddf2 <sbrk_aligned+0x22>
 800de0c:	e7ef      	b.n	800ddee <sbrk_aligned+0x1e>
 800de0e:	bf00      	nop
 800de10:	200085a8 	.word	0x200085a8

0800de14 <_malloc_r>:
 800de14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de18:	1ccd      	adds	r5, r1, #3
 800de1a:	f025 0503 	bic.w	r5, r5, #3
 800de1e:	3508      	adds	r5, #8
 800de20:	2d0c      	cmp	r5, #12
 800de22:	bf38      	it	cc
 800de24:	250c      	movcc	r5, #12
 800de26:	2d00      	cmp	r5, #0
 800de28:	4606      	mov	r6, r0
 800de2a:	db01      	blt.n	800de30 <_malloc_r+0x1c>
 800de2c:	42a9      	cmp	r1, r5
 800de2e:	d904      	bls.n	800de3a <_malloc_r+0x26>
 800de30:	230c      	movs	r3, #12
 800de32:	6033      	str	r3, [r6, #0]
 800de34:	2000      	movs	r0, #0
 800de36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df10 <_malloc_r+0xfc>
 800de3e:	f000 f869 	bl	800df14 <__malloc_lock>
 800de42:	f8d8 3000 	ldr.w	r3, [r8]
 800de46:	461c      	mov	r4, r3
 800de48:	bb44      	cbnz	r4, 800de9c <_malloc_r+0x88>
 800de4a:	4629      	mov	r1, r5
 800de4c:	4630      	mov	r0, r6
 800de4e:	f7ff ffbf 	bl	800ddd0 <sbrk_aligned>
 800de52:	1c43      	adds	r3, r0, #1
 800de54:	4604      	mov	r4, r0
 800de56:	d158      	bne.n	800df0a <_malloc_r+0xf6>
 800de58:	f8d8 4000 	ldr.w	r4, [r8]
 800de5c:	4627      	mov	r7, r4
 800de5e:	2f00      	cmp	r7, #0
 800de60:	d143      	bne.n	800deea <_malloc_r+0xd6>
 800de62:	2c00      	cmp	r4, #0
 800de64:	d04b      	beq.n	800defe <_malloc_r+0xea>
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	4639      	mov	r1, r7
 800de6a:	4630      	mov	r0, r6
 800de6c:	eb04 0903 	add.w	r9, r4, r3
 800de70:	f000 fc6a 	bl	800e748 <_sbrk_r>
 800de74:	4581      	cmp	r9, r0
 800de76:	d142      	bne.n	800defe <_malloc_r+0xea>
 800de78:	6821      	ldr	r1, [r4, #0]
 800de7a:	4630      	mov	r0, r6
 800de7c:	1a6d      	subs	r5, r5, r1
 800de7e:	4629      	mov	r1, r5
 800de80:	f7ff ffa6 	bl	800ddd0 <sbrk_aligned>
 800de84:	3001      	adds	r0, #1
 800de86:	d03a      	beq.n	800defe <_malloc_r+0xea>
 800de88:	6823      	ldr	r3, [r4, #0]
 800de8a:	442b      	add	r3, r5
 800de8c:	6023      	str	r3, [r4, #0]
 800de8e:	f8d8 3000 	ldr.w	r3, [r8]
 800de92:	685a      	ldr	r2, [r3, #4]
 800de94:	bb62      	cbnz	r2, 800def0 <_malloc_r+0xdc>
 800de96:	f8c8 7000 	str.w	r7, [r8]
 800de9a:	e00f      	b.n	800debc <_malloc_r+0xa8>
 800de9c:	6822      	ldr	r2, [r4, #0]
 800de9e:	1b52      	subs	r2, r2, r5
 800dea0:	d420      	bmi.n	800dee4 <_malloc_r+0xd0>
 800dea2:	2a0b      	cmp	r2, #11
 800dea4:	d917      	bls.n	800ded6 <_malloc_r+0xc2>
 800dea6:	1961      	adds	r1, r4, r5
 800dea8:	42a3      	cmp	r3, r4
 800deaa:	6025      	str	r5, [r4, #0]
 800deac:	bf18      	it	ne
 800deae:	6059      	strne	r1, [r3, #4]
 800deb0:	6863      	ldr	r3, [r4, #4]
 800deb2:	bf08      	it	eq
 800deb4:	f8c8 1000 	streq.w	r1, [r8]
 800deb8:	5162      	str	r2, [r4, r5]
 800deba:	604b      	str	r3, [r1, #4]
 800debc:	4630      	mov	r0, r6
 800debe:	f000 f82f 	bl	800df20 <__malloc_unlock>
 800dec2:	f104 000b 	add.w	r0, r4, #11
 800dec6:	1d23      	adds	r3, r4, #4
 800dec8:	f020 0007 	bic.w	r0, r0, #7
 800decc:	1ac2      	subs	r2, r0, r3
 800dece:	bf1c      	itt	ne
 800ded0:	1a1b      	subne	r3, r3, r0
 800ded2:	50a3      	strne	r3, [r4, r2]
 800ded4:	e7af      	b.n	800de36 <_malloc_r+0x22>
 800ded6:	6862      	ldr	r2, [r4, #4]
 800ded8:	42a3      	cmp	r3, r4
 800deda:	bf0c      	ite	eq
 800dedc:	f8c8 2000 	streq.w	r2, [r8]
 800dee0:	605a      	strne	r2, [r3, #4]
 800dee2:	e7eb      	b.n	800debc <_malloc_r+0xa8>
 800dee4:	4623      	mov	r3, r4
 800dee6:	6864      	ldr	r4, [r4, #4]
 800dee8:	e7ae      	b.n	800de48 <_malloc_r+0x34>
 800deea:	463c      	mov	r4, r7
 800deec:	687f      	ldr	r7, [r7, #4]
 800deee:	e7b6      	b.n	800de5e <_malloc_r+0x4a>
 800def0:	461a      	mov	r2, r3
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	42a3      	cmp	r3, r4
 800def6:	d1fb      	bne.n	800def0 <_malloc_r+0xdc>
 800def8:	2300      	movs	r3, #0
 800defa:	6053      	str	r3, [r2, #4]
 800defc:	e7de      	b.n	800debc <_malloc_r+0xa8>
 800defe:	230c      	movs	r3, #12
 800df00:	4630      	mov	r0, r6
 800df02:	6033      	str	r3, [r6, #0]
 800df04:	f000 f80c 	bl	800df20 <__malloc_unlock>
 800df08:	e794      	b.n	800de34 <_malloc_r+0x20>
 800df0a:	6005      	str	r5, [r0, #0]
 800df0c:	e7d6      	b.n	800debc <_malloc_r+0xa8>
 800df0e:	bf00      	nop
 800df10:	200085ac 	.word	0x200085ac

0800df14 <__malloc_lock>:
 800df14:	4801      	ldr	r0, [pc, #4]	@ (800df1c <__malloc_lock+0x8>)
 800df16:	f7ff bf02 	b.w	800dd1e <__retarget_lock_acquire_recursive>
 800df1a:	bf00      	nop
 800df1c:	200085a4 	.word	0x200085a4

0800df20 <__malloc_unlock>:
 800df20:	4801      	ldr	r0, [pc, #4]	@ (800df28 <__malloc_unlock+0x8>)
 800df22:	f7ff befd 	b.w	800dd20 <__retarget_lock_release_recursive>
 800df26:	bf00      	nop
 800df28:	200085a4 	.word	0x200085a4

0800df2c <__sfputc_r>:
 800df2c:	6893      	ldr	r3, [r2, #8]
 800df2e:	b410      	push	{r4}
 800df30:	3b01      	subs	r3, #1
 800df32:	2b00      	cmp	r3, #0
 800df34:	6093      	str	r3, [r2, #8]
 800df36:	da07      	bge.n	800df48 <__sfputc_r+0x1c>
 800df38:	6994      	ldr	r4, [r2, #24]
 800df3a:	42a3      	cmp	r3, r4
 800df3c:	db01      	blt.n	800df42 <__sfputc_r+0x16>
 800df3e:	290a      	cmp	r1, #10
 800df40:	d102      	bne.n	800df48 <__sfputc_r+0x1c>
 800df42:	bc10      	pop	{r4}
 800df44:	f000 bb6c 	b.w	800e620 <__swbuf_r>
 800df48:	6813      	ldr	r3, [r2, #0]
 800df4a:	1c58      	adds	r0, r3, #1
 800df4c:	6010      	str	r0, [r2, #0]
 800df4e:	7019      	strb	r1, [r3, #0]
 800df50:	4608      	mov	r0, r1
 800df52:	bc10      	pop	{r4}
 800df54:	4770      	bx	lr

0800df56 <__sfputs_r>:
 800df56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df58:	4606      	mov	r6, r0
 800df5a:	460f      	mov	r7, r1
 800df5c:	4614      	mov	r4, r2
 800df5e:	18d5      	adds	r5, r2, r3
 800df60:	42ac      	cmp	r4, r5
 800df62:	d101      	bne.n	800df68 <__sfputs_r+0x12>
 800df64:	2000      	movs	r0, #0
 800df66:	e007      	b.n	800df78 <__sfputs_r+0x22>
 800df68:	463a      	mov	r2, r7
 800df6a:	4630      	mov	r0, r6
 800df6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df70:	f7ff ffdc 	bl	800df2c <__sfputc_r>
 800df74:	1c43      	adds	r3, r0, #1
 800df76:	d1f3      	bne.n	800df60 <__sfputs_r+0xa>
 800df78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df7c <_vfiprintf_r>:
 800df7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df80:	460d      	mov	r5, r1
 800df82:	4614      	mov	r4, r2
 800df84:	4698      	mov	r8, r3
 800df86:	4606      	mov	r6, r0
 800df88:	b09d      	sub	sp, #116	@ 0x74
 800df8a:	b118      	cbz	r0, 800df94 <_vfiprintf_r+0x18>
 800df8c:	6a03      	ldr	r3, [r0, #32]
 800df8e:	b90b      	cbnz	r3, 800df94 <_vfiprintf_r+0x18>
 800df90:	f7ff fd98 	bl	800dac4 <__sinit>
 800df94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df96:	07d9      	lsls	r1, r3, #31
 800df98:	d405      	bmi.n	800dfa6 <_vfiprintf_r+0x2a>
 800df9a:	89ab      	ldrh	r3, [r5, #12]
 800df9c:	059a      	lsls	r2, r3, #22
 800df9e:	d402      	bmi.n	800dfa6 <_vfiprintf_r+0x2a>
 800dfa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfa2:	f7ff febc 	bl	800dd1e <__retarget_lock_acquire_recursive>
 800dfa6:	89ab      	ldrh	r3, [r5, #12]
 800dfa8:	071b      	lsls	r3, r3, #28
 800dfaa:	d501      	bpl.n	800dfb0 <_vfiprintf_r+0x34>
 800dfac:	692b      	ldr	r3, [r5, #16]
 800dfae:	b99b      	cbnz	r3, 800dfd8 <_vfiprintf_r+0x5c>
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	f000 fb72 	bl	800e69c <__swsetup_r>
 800dfb8:	b170      	cbz	r0, 800dfd8 <_vfiprintf_r+0x5c>
 800dfba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfbc:	07dc      	lsls	r4, r3, #31
 800dfbe:	d504      	bpl.n	800dfca <_vfiprintf_r+0x4e>
 800dfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfc4:	b01d      	add	sp, #116	@ 0x74
 800dfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfca:	89ab      	ldrh	r3, [r5, #12]
 800dfcc:	0598      	lsls	r0, r3, #22
 800dfce:	d4f7      	bmi.n	800dfc0 <_vfiprintf_r+0x44>
 800dfd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfd2:	f7ff fea5 	bl	800dd20 <__retarget_lock_release_recursive>
 800dfd6:	e7f3      	b.n	800dfc0 <_vfiprintf_r+0x44>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfdc:	2320      	movs	r3, #32
 800dfde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfe2:	2330      	movs	r3, #48	@ 0x30
 800dfe4:	f04f 0901 	mov.w	r9, #1
 800dfe8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e198 <_vfiprintf_r+0x21c>
 800dff0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dff4:	4623      	mov	r3, r4
 800dff6:	469a      	mov	sl, r3
 800dff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dffc:	b10a      	cbz	r2, 800e002 <_vfiprintf_r+0x86>
 800dffe:	2a25      	cmp	r2, #37	@ 0x25
 800e000:	d1f9      	bne.n	800dff6 <_vfiprintf_r+0x7a>
 800e002:	ebba 0b04 	subs.w	fp, sl, r4
 800e006:	d00b      	beq.n	800e020 <_vfiprintf_r+0xa4>
 800e008:	465b      	mov	r3, fp
 800e00a:	4622      	mov	r2, r4
 800e00c:	4629      	mov	r1, r5
 800e00e:	4630      	mov	r0, r6
 800e010:	f7ff ffa1 	bl	800df56 <__sfputs_r>
 800e014:	3001      	adds	r0, #1
 800e016:	f000 80a7 	beq.w	800e168 <_vfiprintf_r+0x1ec>
 800e01a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e01c:	445a      	add	r2, fp
 800e01e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e020:	f89a 3000 	ldrb.w	r3, [sl]
 800e024:	2b00      	cmp	r3, #0
 800e026:	f000 809f 	beq.w	800e168 <_vfiprintf_r+0x1ec>
 800e02a:	2300      	movs	r3, #0
 800e02c:	f04f 32ff 	mov.w	r2, #4294967295
 800e030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e034:	f10a 0a01 	add.w	sl, sl, #1
 800e038:	9304      	str	r3, [sp, #16]
 800e03a:	9307      	str	r3, [sp, #28]
 800e03c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e040:	931a      	str	r3, [sp, #104]	@ 0x68
 800e042:	4654      	mov	r4, sl
 800e044:	2205      	movs	r2, #5
 800e046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e04a:	4853      	ldr	r0, [pc, #332]	@ (800e198 <_vfiprintf_r+0x21c>)
 800e04c:	f000 fb8c 	bl	800e768 <memchr>
 800e050:	9a04      	ldr	r2, [sp, #16]
 800e052:	b9d8      	cbnz	r0, 800e08c <_vfiprintf_r+0x110>
 800e054:	06d1      	lsls	r1, r2, #27
 800e056:	bf44      	itt	mi
 800e058:	2320      	movmi	r3, #32
 800e05a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e05e:	0713      	lsls	r3, r2, #28
 800e060:	bf44      	itt	mi
 800e062:	232b      	movmi	r3, #43	@ 0x2b
 800e064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e068:	f89a 3000 	ldrb.w	r3, [sl]
 800e06c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e06e:	d015      	beq.n	800e09c <_vfiprintf_r+0x120>
 800e070:	4654      	mov	r4, sl
 800e072:	2000      	movs	r0, #0
 800e074:	f04f 0c0a 	mov.w	ip, #10
 800e078:	9a07      	ldr	r2, [sp, #28]
 800e07a:	4621      	mov	r1, r4
 800e07c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e080:	3b30      	subs	r3, #48	@ 0x30
 800e082:	2b09      	cmp	r3, #9
 800e084:	d94b      	bls.n	800e11e <_vfiprintf_r+0x1a2>
 800e086:	b1b0      	cbz	r0, 800e0b6 <_vfiprintf_r+0x13a>
 800e088:	9207      	str	r2, [sp, #28]
 800e08a:	e014      	b.n	800e0b6 <_vfiprintf_r+0x13a>
 800e08c:	eba0 0308 	sub.w	r3, r0, r8
 800e090:	fa09 f303 	lsl.w	r3, r9, r3
 800e094:	4313      	orrs	r3, r2
 800e096:	46a2      	mov	sl, r4
 800e098:	9304      	str	r3, [sp, #16]
 800e09a:	e7d2      	b.n	800e042 <_vfiprintf_r+0xc6>
 800e09c:	9b03      	ldr	r3, [sp, #12]
 800e09e:	1d19      	adds	r1, r3, #4
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	9103      	str	r1, [sp, #12]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	bfbb      	ittet	lt
 800e0a8:	425b      	neglt	r3, r3
 800e0aa:	f042 0202 	orrlt.w	r2, r2, #2
 800e0ae:	9307      	strge	r3, [sp, #28]
 800e0b0:	9307      	strlt	r3, [sp, #28]
 800e0b2:	bfb8      	it	lt
 800e0b4:	9204      	strlt	r2, [sp, #16]
 800e0b6:	7823      	ldrb	r3, [r4, #0]
 800e0b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0ba:	d10a      	bne.n	800e0d2 <_vfiprintf_r+0x156>
 800e0bc:	7863      	ldrb	r3, [r4, #1]
 800e0be:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0c0:	d132      	bne.n	800e128 <_vfiprintf_r+0x1ac>
 800e0c2:	9b03      	ldr	r3, [sp, #12]
 800e0c4:	3402      	adds	r4, #2
 800e0c6:	1d1a      	adds	r2, r3, #4
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	9203      	str	r2, [sp, #12]
 800e0cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0d0:	9305      	str	r3, [sp, #20]
 800e0d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e19c <_vfiprintf_r+0x220>
 800e0d6:	2203      	movs	r2, #3
 800e0d8:	4650      	mov	r0, sl
 800e0da:	7821      	ldrb	r1, [r4, #0]
 800e0dc:	f000 fb44 	bl	800e768 <memchr>
 800e0e0:	b138      	cbz	r0, 800e0f2 <_vfiprintf_r+0x176>
 800e0e2:	2240      	movs	r2, #64	@ 0x40
 800e0e4:	9b04      	ldr	r3, [sp, #16]
 800e0e6:	eba0 000a 	sub.w	r0, r0, sl
 800e0ea:	4082      	lsls	r2, r0
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	3401      	adds	r4, #1
 800e0f0:	9304      	str	r3, [sp, #16]
 800e0f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f6:	2206      	movs	r2, #6
 800e0f8:	4829      	ldr	r0, [pc, #164]	@ (800e1a0 <_vfiprintf_r+0x224>)
 800e0fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0fe:	f000 fb33 	bl	800e768 <memchr>
 800e102:	2800      	cmp	r0, #0
 800e104:	d03f      	beq.n	800e186 <_vfiprintf_r+0x20a>
 800e106:	4b27      	ldr	r3, [pc, #156]	@ (800e1a4 <_vfiprintf_r+0x228>)
 800e108:	bb1b      	cbnz	r3, 800e152 <_vfiprintf_r+0x1d6>
 800e10a:	9b03      	ldr	r3, [sp, #12]
 800e10c:	3307      	adds	r3, #7
 800e10e:	f023 0307 	bic.w	r3, r3, #7
 800e112:	3308      	adds	r3, #8
 800e114:	9303      	str	r3, [sp, #12]
 800e116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e118:	443b      	add	r3, r7
 800e11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e11c:	e76a      	b.n	800dff4 <_vfiprintf_r+0x78>
 800e11e:	460c      	mov	r4, r1
 800e120:	2001      	movs	r0, #1
 800e122:	fb0c 3202 	mla	r2, ip, r2, r3
 800e126:	e7a8      	b.n	800e07a <_vfiprintf_r+0xfe>
 800e128:	2300      	movs	r3, #0
 800e12a:	f04f 0c0a 	mov.w	ip, #10
 800e12e:	4619      	mov	r1, r3
 800e130:	3401      	adds	r4, #1
 800e132:	9305      	str	r3, [sp, #20]
 800e134:	4620      	mov	r0, r4
 800e136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e13a:	3a30      	subs	r2, #48	@ 0x30
 800e13c:	2a09      	cmp	r2, #9
 800e13e:	d903      	bls.n	800e148 <_vfiprintf_r+0x1cc>
 800e140:	2b00      	cmp	r3, #0
 800e142:	d0c6      	beq.n	800e0d2 <_vfiprintf_r+0x156>
 800e144:	9105      	str	r1, [sp, #20]
 800e146:	e7c4      	b.n	800e0d2 <_vfiprintf_r+0x156>
 800e148:	4604      	mov	r4, r0
 800e14a:	2301      	movs	r3, #1
 800e14c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e150:	e7f0      	b.n	800e134 <_vfiprintf_r+0x1b8>
 800e152:	ab03      	add	r3, sp, #12
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	462a      	mov	r2, r5
 800e158:	4630      	mov	r0, r6
 800e15a:	4b13      	ldr	r3, [pc, #76]	@ (800e1a8 <_vfiprintf_r+0x22c>)
 800e15c:	a904      	add	r1, sp, #16
 800e15e:	f3af 8000 	nop.w
 800e162:	4607      	mov	r7, r0
 800e164:	1c78      	adds	r0, r7, #1
 800e166:	d1d6      	bne.n	800e116 <_vfiprintf_r+0x19a>
 800e168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e16a:	07d9      	lsls	r1, r3, #31
 800e16c:	d405      	bmi.n	800e17a <_vfiprintf_r+0x1fe>
 800e16e:	89ab      	ldrh	r3, [r5, #12]
 800e170:	059a      	lsls	r2, r3, #22
 800e172:	d402      	bmi.n	800e17a <_vfiprintf_r+0x1fe>
 800e174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e176:	f7ff fdd3 	bl	800dd20 <__retarget_lock_release_recursive>
 800e17a:	89ab      	ldrh	r3, [r5, #12]
 800e17c:	065b      	lsls	r3, r3, #25
 800e17e:	f53f af1f 	bmi.w	800dfc0 <_vfiprintf_r+0x44>
 800e182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e184:	e71e      	b.n	800dfc4 <_vfiprintf_r+0x48>
 800e186:	ab03      	add	r3, sp, #12
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	462a      	mov	r2, r5
 800e18c:	4630      	mov	r0, r6
 800e18e:	4b06      	ldr	r3, [pc, #24]	@ (800e1a8 <_vfiprintf_r+0x22c>)
 800e190:	a904      	add	r1, sp, #16
 800e192:	f000 f87d 	bl	800e290 <_printf_i>
 800e196:	e7e4      	b.n	800e162 <_vfiprintf_r+0x1e6>
 800e198:	0801191e 	.word	0x0801191e
 800e19c:	08011924 	.word	0x08011924
 800e1a0:	08011928 	.word	0x08011928
 800e1a4:	00000000 	.word	0x00000000
 800e1a8:	0800df57 	.word	0x0800df57

0800e1ac <_printf_common>:
 800e1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1b0:	4616      	mov	r6, r2
 800e1b2:	4698      	mov	r8, r3
 800e1b4:	688a      	ldr	r2, [r1, #8]
 800e1b6:	690b      	ldr	r3, [r1, #16]
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	bfb8      	it	lt
 800e1be:	4613      	movlt	r3, r2
 800e1c0:	6033      	str	r3, [r6, #0]
 800e1c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e1cc:	b10a      	cbz	r2, 800e1d2 <_printf_common+0x26>
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	6033      	str	r3, [r6, #0]
 800e1d2:	6823      	ldr	r3, [r4, #0]
 800e1d4:	0699      	lsls	r1, r3, #26
 800e1d6:	bf42      	ittt	mi
 800e1d8:	6833      	ldrmi	r3, [r6, #0]
 800e1da:	3302      	addmi	r3, #2
 800e1dc:	6033      	strmi	r3, [r6, #0]
 800e1de:	6825      	ldr	r5, [r4, #0]
 800e1e0:	f015 0506 	ands.w	r5, r5, #6
 800e1e4:	d106      	bne.n	800e1f4 <_printf_common+0x48>
 800e1e6:	f104 0a19 	add.w	sl, r4, #25
 800e1ea:	68e3      	ldr	r3, [r4, #12]
 800e1ec:	6832      	ldr	r2, [r6, #0]
 800e1ee:	1a9b      	subs	r3, r3, r2
 800e1f0:	42ab      	cmp	r3, r5
 800e1f2:	dc2b      	bgt.n	800e24c <_printf_common+0xa0>
 800e1f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e1f8:	6822      	ldr	r2, [r4, #0]
 800e1fa:	3b00      	subs	r3, #0
 800e1fc:	bf18      	it	ne
 800e1fe:	2301      	movne	r3, #1
 800e200:	0692      	lsls	r2, r2, #26
 800e202:	d430      	bmi.n	800e266 <_printf_common+0xba>
 800e204:	4641      	mov	r1, r8
 800e206:	4638      	mov	r0, r7
 800e208:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e20c:	47c8      	blx	r9
 800e20e:	3001      	adds	r0, #1
 800e210:	d023      	beq.n	800e25a <_printf_common+0xae>
 800e212:	6823      	ldr	r3, [r4, #0]
 800e214:	6922      	ldr	r2, [r4, #16]
 800e216:	f003 0306 	and.w	r3, r3, #6
 800e21a:	2b04      	cmp	r3, #4
 800e21c:	bf14      	ite	ne
 800e21e:	2500      	movne	r5, #0
 800e220:	6833      	ldreq	r3, [r6, #0]
 800e222:	f04f 0600 	mov.w	r6, #0
 800e226:	bf08      	it	eq
 800e228:	68e5      	ldreq	r5, [r4, #12]
 800e22a:	f104 041a 	add.w	r4, r4, #26
 800e22e:	bf08      	it	eq
 800e230:	1aed      	subeq	r5, r5, r3
 800e232:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e236:	bf08      	it	eq
 800e238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e23c:	4293      	cmp	r3, r2
 800e23e:	bfc4      	itt	gt
 800e240:	1a9b      	subgt	r3, r3, r2
 800e242:	18ed      	addgt	r5, r5, r3
 800e244:	42b5      	cmp	r5, r6
 800e246:	d11a      	bne.n	800e27e <_printf_common+0xd2>
 800e248:	2000      	movs	r0, #0
 800e24a:	e008      	b.n	800e25e <_printf_common+0xb2>
 800e24c:	2301      	movs	r3, #1
 800e24e:	4652      	mov	r2, sl
 800e250:	4641      	mov	r1, r8
 800e252:	4638      	mov	r0, r7
 800e254:	47c8      	blx	r9
 800e256:	3001      	adds	r0, #1
 800e258:	d103      	bne.n	800e262 <_printf_common+0xb6>
 800e25a:	f04f 30ff 	mov.w	r0, #4294967295
 800e25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e262:	3501      	adds	r5, #1
 800e264:	e7c1      	b.n	800e1ea <_printf_common+0x3e>
 800e266:	2030      	movs	r0, #48	@ 0x30
 800e268:	18e1      	adds	r1, r4, r3
 800e26a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e26e:	1c5a      	adds	r2, r3, #1
 800e270:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e274:	4422      	add	r2, r4
 800e276:	3302      	adds	r3, #2
 800e278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e27c:	e7c2      	b.n	800e204 <_printf_common+0x58>
 800e27e:	2301      	movs	r3, #1
 800e280:	4622      	mov	r2, r4
 800e282:	4641      	mov	r1, r8
 800e284:	4638      	mov	r0, r7
 800e286:	47c8      	blx	r9
 800e288:	3001      	adds	r0, #1
 800e28a:	d0e6      	beq.n	800e25a <_printf_common+0xae>
 800e28c:	3601      	adds	r6, #1
 800e28e:	e7d9      	b.n	800e244 <_printf_common+0x98>

0800e290 <_printf_i>:
 800e290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e294:	7e0f      	ldrb	r7, [r1, #24]
 800e296:	4691      	mov	r9, r2
 800e298:	2f78      	cmp	r7, #120	@ 0x78
 800e29a:	4680      	mov	r8, r0
 800e29c:	460c      	mov	r4, r1
 800e29e:	469a      	mov	sl, r3
 800e2a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e2a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e2a6:	d807      	bhi.n	800e2b8 <_printf_i+0x28>
 800e2a8:	2f62      	cmp	r7, #98	@ 0x62
 800e2aa:	d80a      	bhi.n	800e2c2 <_printf_i+0x32>
 800e2ac:	2f00      	cmp	r7, #0
 800e2ae:	f000 80d3 	beq.w	800e458 <_printf_i+0x1c8>
 800e2b2:	2f58      	cmp	r7, #88	@ 0x58
 800e2b4:	f000 80ba 	beq.w	800e42c <_printf_i+0x19c>
 800e2b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e2c0:	e03a      	b.n	800e338 <_printf_i+0xa8>
 800e2c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e2c6:	2b15      	cmp	r3, #21
 800e2c8:	d8f6      	bhi.n	800e2b8 <_printf_i+0x28>
 800e2ca:	a101      	add	r1, pc, #4	@ (adr r1, 800e2d0 <_printf_i+0x40>)
 800e2cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2d0:	0800e329 	.word	0x0800e329
 800e2d4:	0800e33d 	.word	0x0800e33d
 800e2d8:	0800e2b9 	.word	0x0800e2b9
 800e2dc:	0800e2b9 	.word	0x0800e2b9
 800e2e0:	0800e2b9 	.word	0x0800e2b9
 800e2e4:	0800e2b9 	.word	0x0800e2b9
 800e2e8:	0800e33d 	.word	0x0800e33d
 800e2ec:	0800e2b9 	.word	0x0800e2b9
 800e2f0:	0800e2b9 	.word	0x0800e2b9
 800e2f4:	0800e2b9 	.word	0x0800e2b9
 800e2f8:	0800e2b9 	.word	0x0800e2b9
 800e2fc:	0800e43f 	.word	0x0800e43f
 800e300:	0800e367 	.word	0x0800e367
 800e304:	0800e3f9 	.word	0x0800e3f9
 800e308:	0800e2b9 	.word	0x0800e2b9
 800e30c:	0800e2b9 	.word	0x0800e2b9
 800e310:	0800e461 	.word	0x0800e461
 800e314:	0800e2b9 	.word	0x0800e2b9
 800e318:	0800e367 	.word	0x0800e367
 800e31c:	0800e2b9 	.word	0x0800e2b9
 800e320:	0800e2b9 	.word	0x0800e2b9
 800e324:	0800e401 	.word	0x0800e401
 800e328:	6833      	ldr	r3, [r6, #0]
 800e32a:	1d1a      	adds	r2, r3, #4
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	6032      	str	r2, [r6, #0]
 800e330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e334:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e338:	2301      	movs	r3, #1
 800e33a:	e09e      	b.n	800e47a <_printf_i+0x1ea>
 800e33c:	6833      	ldr	r3, [r6, #0]
 800e33e:	6820      	ldr	r0, [r4, #0]
 800e340:	1d19      	adds	r1, r3, #4
 800e342:	6031      	str	r1, [r6, #0]
 800e344:	0606      	lsls	r6, r0, #24
 800e346:	d501      	bpl.n	800e34c <_printf_i+0xbc>
 800e348:	681d      	ldr	r5, [r3, #0]
 800e34a:	e003      	b.n	800e354 <_printf_i+0xc4>
 800e34c:	0645      	lsls	r5, r0, #25
 800e34e:	d5fb      	bpl.n	800e348 <_printf_i+0xb8>
 800e350:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e354:	2d00      	cmp	r5, #0
 800e356:	da03      	bge.n	800e360 <_printf_i+0xd0>
 800e358:	232d      	movs	r3, #45	@ 0x2d
 800e35a:	426d      	negs	r5, r5
 800e35c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e360:	230a      	movs	r3, #10
 800e362:	4859      	ldr	r0, [pc, #356]	@ (800e4c8 <_printf_i+0x238>)
 800e364:	e011      	b.n	800e38a <_printf_i+0xfa>
 800e366:	6821      	ldr	r1, [r4, #0]
 800e368:	6833      	ldr	r3, [r6, #0]
 800e36a:	0608      	lsls	r0, r1, #24
 800e36c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e370:	d402      	bmi.n	800e378 <_printf_i+0xe8>
 800e372:	0649      	lsls	r1, r1, #25
 800e374:	bf48      	it	mi
 800e376:	b2ad      	uxthmi	r5, r5
 800e378:	2f6f      	cmp	r7, #111	@ 0x6f
 800e37a:	6033      	str	r3, [r6, #0]
 800e37c:	bf14      	ite	ne
 800e37e:	230a      	movne	r3, #10
 800e380:	2308      	moveq	r3, #8
 800e382:	4851      	ldr	r0, [pc, #324]	@ (800e4c8 <_printf_i+0x238>)
 800e384:	2100      	movs	r1, #0
 800e386:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e38a:	6866      	ldr	r6, [r4, #4]
 800e38c:	2e00      	cmp	r6, #0
 800e38e:	bfa8      	it	ge
 800e390:	6821      	ldrge	r1, [r4, #0]
 800e392:	60a6      	str	r6, [r4, #8]
 800e394:	bfa4      	itt	ge
 800e396:	f021 0104 	bicge.w	r1, r1, #4
 800e39a:	6021      	strge	r1, [r4, #0]
 800e39c:	b90d      	cbnz	r5, 800e3a2 <_printf_i+0x112>
 800e39e:	2e00      	cmp	r6, #0
 800e3a0:	d04b      	beq.n	800e43a <_printf_i+0x1aa>
 800e3a2:	4616      	mov	r6, r2
 800e3a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3a8:	fb03 5711 	mls	r7, r3, r1, r5
 800e3ac:	5dc7      	ldrb	r7, [r0, r7]
 800e3ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3b2:	462f      	mov	r7, r5
 800e3b4:	42bb      	cmp	r3, r7
 800e3b6:	460d      	mov	r5, r1
 800e3b8:	d9f4      	bls.n	800e3a4 <_printf_i+0x114>
 800e3ba:	2b08      	cmp	r3, #8
 800e3bc:	d10b      	bne.n	800e3d6 <_printf_i+0x146>
 800e3be:	6823      	ldr	r3, [r4, #0]
 800e3c0:	07df      	lsls	r7, r3, #31
 800e3c2:	d508      	bpl.n	800e3d6 <_printf_i+0x146>
 800e3c4:	6923      	ldr	r3, [r4, #16]
 800e3c6:	6861      	ldr	r1, [r4, #4]
 800e3c8:	4299      	cmp	r1, r3
 800e3ca:	bfde      	ittt	le
 800e3cc:	2330      	movle	r3, #48	@ 0x30
 800e3ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e3d6:	1b92      	subs	r2, r2, r6
 800e3d8:	6122      	str	r2, [r4, #16]
 800e3da:	464b      	mov	r3, r9
 800e3dc:	4621      	mov	r1, r4
 800e3de:	4640      	mov	r0, r8
 800e3e0:	f8cd a000 	str.w	sl, [sp]
 800e3e4:	aa03      	add	r2, sp, #12
 800e3e6:	f7ff fee1 	bl	800e1ac <_printf_common>
 800e3ea:	3001      	adds	r0, #1
 800e3ec:	d14a      	bne.n	800e484 <_printf_i+0x1f4>
 800e3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f2:	b004      	add	sp, #16
 800e3f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	f043 0320 	orr.w	r3, r3, #32
 800e3fe:	6023      	str	r3, [r4, #0]
 800e400:	2778      	movs	r7, #120	@ 0x78
 800e402:	4832      	ldr	r0, [pc, #200]	@ (800e4cc <_printf_i+0x23c>)
 800e404:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e408:	6823      	ldr	r3, [r4, #0]
 800e40a:	6831      	ldr	r1, [r6, #0]
 800e40c:	061f      	lsls	r7, r3, #24
 800e40e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e412:	d402      	bmi.n	800e41a <_printf_i+0x18a>
 800e414:	065f      	lsls	r7, r3, #25
 800e416:	bf48      	it	mi
 800e418:	b2ad      	uxthmi	r5, r5
 800e41a:	6031      	str	r1, [r6, #0]
 800e41c:	07d9      	lsls	r1, r3, #31
 800e41e:	bf44      	itt	mi
 800e420:	f043 0320 	orrmi.w	r3, r3, #32
 800e424:	6023      	strmi	r3, [r4, #0]
 800e426:	b11d      	cbz	r5, 800e430 <_printf_i+0x1a0>
 800e428:	2310      	movs	r3, #16
 800e42a:	e7ab      	b.n	800e384 <_printf_i+0xf4>
 800e42c:	4826      	ldr	r0, [pc, #152]	@ (800e4c8 <_printf_i+0x238>)
 800e42e:	e7e9      	b.n	800e404 <_printf_i+0x174>
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	f023 0320 	bic.w	r3, r3, #32
 800e436:	6023      	str	r3, [r4, #0]
 800e438:	e7f6      	b.n	800e428 <_printf_i+0x198>
 800e43a:	4616      	mov	r6, r2
 800e43c:	e7bd      	b.n	800e3ba <_printf_i+0x12a>
 800e43e:	6833      	ldr	r3, [r6, #0]
 800e440:	6825      	ldr	r5, [r4, #0]
 800e442:	1d18      	adds	r0, r3, #4
 800e444:	6961      	ldr	r1, [r4, #20]
 800e446:	6030      	str	r0, [r6, #0]
 800e448:	062e      	lsls	r6, r5, #24
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	d501      	bpl.n	800e452 <_printf_i+0x1c2>
 800e44e:	6019      	str	r1, [r3, #0]
 800e450:	e002      	b.n	800e458 <_printf_i+0x1c8>
 800e452:	0668      	lsls	r0, r5, #25
 800e454:	d5fb      	bpl.n	800e44e <_printf_i+0x1be>
 800e456:	8019      	strh	r1, [r3, #0]
 800e458:	2300      	movs	r3, #0
 800e45a:	4616      	mov	r6, r2
 800e45c:	6123      	str	r3, [r4, #16]
 800e45e:	e7bc      	b.n	800e3da <_printf_i+0x14a>
 800e460:	6833      	ldr	r3, [r6, #0]
 800e462:	2100      	movs	r1, #0
 800e464:	1d1a      	adds	r2, r3, #4
 800e466:	6032      	str	r2, [r6, #0]
 800e468:	681e      	ldr	r6, [r3, #0]
 800e46a:	6862      	ldr	r2, [r4, #4]
 800e46c:	4630      	mov	r0, r6
 800e46e:	f000 f97b 	bl	800e768 <memchr>
 800e472:	b108      	cbz	r0, 800e478 <_printf_i+0x1e8>
 800e474:	1b80      	subs	r0, r0, r6
 800e476:	6060      	str	r0, [r4, #4]
 800e478:	6863      	ldr	r3, [r4, #4]
 800e47a:	6123      	str	r3, [r4, #16]
 800e47c:	2300      	movs	r3, #0
 800e47e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e482:	e7aa      	b.n	800e3da <_printf_i+0x14a>
 800e484:	4632      	mov	r2, r6
 800e486:	4649      	mov	r1, r9
 800e488:	4640      	mov	r0, r8
 800e48a:	6923      	ldr	r3, [r4, #16]
 800e48c:	47d0      	blx	sl
 800e48e:	3001      	adds	r0, #1
 800e490:	d0ad      	beq.n	800e3ee <_printf_i+0x15e>
 800e492:	6823      	ldr	r3, [r4, #0]
 800e494:	079b      	lsls	r3, r3, #30
 800e496:	d413      	bmi.n	800e4c0 <_printf_i+0x230>
 800e498:	68e0      	ldr	r0, [r4, #12]
 800e49a:	9b03      	ldr	r3, [sp, #12]
 800e49c:	4298      	cmp	r0, r3
 800e49e:	bfb8      	it	lt
 800e4a0:	4618      	movlt	r0, r3
 800e4a2:	e7a6      	b.n	800e3f2 <_printf_i+0x162>
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	4632      	mov	r2, r6
 800e4a8:	4649      	mov	r1, r9
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	47d0      	blx	sl
 800e4ae:	3001      	adds	r0, #1
 800e4b0:	d09d      	beq.n	800e3ee <_printf_i+0x15e>
 800e4b2:	3501      	adds	r5, #1
 800e4b4:	68e3      	ldr	r3, [r4, #12]
 800e4b6:	9903      	ldr	r1, [sp, #12]
 800e4b8:	1a5b      	subs	r3, r3, r1
 800e4ba:	42ab      	cmp	r3, r5
 800e4bc:	dcf2      	bgt.n	800e4a4 <_printf_i+0x214>
 800e4be:	e7eb      	b.n	800e498 <_printf_i+0x208>
 800e4c0:	2500      	movs	r5, #0
 800e4c2:	f104 0619 	add.w	r6, r4, #25
 800e4c6:	e7f5      	b.n	800e4b4 <_printf_i+0x224>
 800e4c8:	0801192f 	.word	0x0801192f
 800e4cc:	08011940 	.word	0x08011940

0800e4d0 <__sflush_r>:
 800e4d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d6:	0716      	lsls	r6, r2, #28
 800e4d8:	4605      	mov	r5, r0
 800e4da:	460c      	mov	r4, r1
 800e4dc:	d454      	bmi.n	800e588 <__sflush_r+0xb8>
 800e4de:	684b      	ldr	r3, [r1, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	dc02      	bgt.n	800e4ea <__sflush_r+0x1a>
 800e4e4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	dd48      	ble.n	800e57c <__sflush_r+0xac>
 800e4ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e4ec:	2e00      	cmp	r6, #0
 800e4ee:	d045      	beq.n	800e57c <__sflush_r+0xac>
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e4f6:	682f      	ldr	r7, [r5, #0]
 800e4f8:	6a21      	ldr	r1, [r4, #32]
 800e4fa:	602b      	str	r3, [r5, #0]
 800e4fc:	d030      	beq.n	800e560 <__sflush_r+0x90>
 800e4fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e500:	89a3      	ldrh	r3, [r4, #12]
 800e502:	0759      	lsls	r1, r3, #29
 800e504:	d505      	bpl.n	800e512 <__sflush_r+0x42>
 800e506:	6863      	ldr	r3, [r4, #4]
 800e508:	1ad2      	subs	r2, r2, r3
 800e50a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e50c:	b10b      	cbz	r3, 800e512 <__sflush_r+0x42>
 800e50e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e510:	1ad2      	subs	r2, r2, r3
 800e512:	2300      	movs	r3, #0
 800e514:	4628      	mov	r0, r5
 800e516:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e518:	6a21      	ldr	r1, [r4, #32]
 800e51a:	47b0      	blx	r6
 800e51c:	1c43      	adds	r3, r0, #1
 800e51e:	89a3      	ldrh	r3, [r4, #12]
 800e520:	d106      	bne.n	800e530 <__sflush_r+0x60>
 800e522:	6829      	ldr	r1, [r5, #0]
 800e524:	291d      	cmp	r1, #29
 800e526:	d82b      	bhi.n	800e580 <__sflush_r+0xb0>
 800e528:	4a28      	ldr	r2, [pc, #160]	@ (800e5cc <__sflush_r+0xfc>)
 800e52a:	410a      	asrs	r2, r1
 800e52c:	07d6      	lsls	r6, r2, #31
 800e52e:	d427      	bmi.n	800e580 <__sflush_r+0xb0>
 800e530:	2200      	movs	r2, #0
 800e532:	6062      	str	r2, [r4, #4]
 800e534:	6922      	ldr	r2, [r4, #16]
 800e536:	04d9      	lsls	r1, r3, #19
 800e538:	6022      	str	r2, [r4, #0]
 800e53a:	d504      	bpl.n	800e546 <__sflush_r+0x76>
 800e53c:	1c42      	adds	r2, r0, #1
 800e53e:	d101      	bne.n	800e544 <__sflush_r+0x74>
 800e540:	682b      	ldr	r3, [r5, #0]
 800e542:	b903      	cbnz	r3, 800e546 <__sflush_r+0x76>
 800e544:	6560      	str	r0, [r4, #84]	@ 0x54
 800e546:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e548:	602f      	str	r7, [r5, #0]
 800e54a:	b1b9      	cbz	r1, 800e57c <__sflush_r+0xac>
 800e54c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e550:	4299      	cmp	r1, r3
 800e552:	d002      	beq.n	800e55a <__sflush_r+0x8a>
 800e554:	4628      	mov	r0, r5
 800e556:	f7ff fbf3 	bl	800dd40 <_free_r>
 800e55a:	2300      	movs	r3, #0
 800e55c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e55e:	e00d      	b.n	800e57c <__sflush_r+0xac>
 800e560:	2301      	movs	r3, #1
 800e562:	4628      	mov	r0, r5
 800e564:	47b0      	blx	r6
 800e566:	4602      	mov	r2, r0
 800e568:	1c50      	adds	r0, r2, #1
 800e56a:	d1c9      	bne.n	800e500 <__sflush_r+0x30>
 800e56c:	682b      	ldr	r3, [r5, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d0c6      	beq.n	800e500 <__sflush_r+0x30>
 800e572:	2b1d      	cmp	r3, #29
 800e574:	d001      	beq.n	800e57a <__sflush_r+0xaa>
 800e576:	2b16      	cmp	r3, #22
 800e578:	d11d      	bne.n	800e5b6 <__sflush_r+0xe6>
 800e57a:	602f      	str	r7, [r5, #0]
 800e57c:	2000      	movs	r0, #0
 800e57e:	e021      	b.n	800e5c4 <__sflush_r+0xf4>
 800e580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e584:	b21b      	sxth	r3, r3
 800e586:	e01a      	b.n	800e5be <__sflush_r+0xee>
 800e588:	690f      	ldr	r7, [r1, #16]
 800e58a:	2f00      	cmp	r7, #0
 800e58c:	d0f6      	beq.n	800e57c <__sflush_r+0xac>
 800e58e:	0793      	lsls	r3, r2, #30
 800e590:	bf18      	it	ne
 800e592:	2300      	movne	r3, #0
 800e594:	680e      	ldr	r6, [r1, #0]
 800e596:	bf08      	it	eq
 800e598:	694b      	ldreq	r3, [r1, #20]
 800e59a:	1bf6      	subs	r6, r6, r7
 800e59c:	600f      	str	r7, [r1, #0]
 800e59e:	608b      	str	r3, [r1, #8]
 800e5a0:	2e00      	cmp	r6, #0
 800e5a2:	ddeb      	ble.n	800e57c <__sflush_r+0xac>
 800e5a4:	4633      	mov	r3, r6
 800e5a6:	463a      	mov	r2, r7
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	6a21      	ldr	r1, [r4, #32]
 800e5ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e5b0:	47e0      	blx	ip
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	dc07      	bgt.n	800e5c6 <__sflush_r+0xf6>
 800e5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5be:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c2:	81a3      	strh	r3, [r4, #12]
 800e5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5c6:	4407      	add	r7, r0
 800e5c8:	1a36      	subs	r6, r6, r0
 800e5ca:	e7e9      	b.n	800e5a0 <__sflush_r+0xd0>
 800e5cc:	dfbffffe 	.word	0xdfbffffe

0800e5d0 <_fflush_r>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	690b      	ldr	r3, [r1, #16]
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	b913      	cbnz	r3, 800e5e0 <_fflush_r+0x10>
 800e5da:	2500      	movs	r5, #0
 800e5dc:	4628      	mov	r0, r5
 800e5de:	bd38      	pop	{r3, r4, r5, pc}
 800e5e0:	b118      	cbz	r0, 800e5ea <_fflush_r+0x1a>
 800e5e2:	6a03      	ldr	r3, [r0, #32]
 800e5e4:	b90b      	cbnz	r3, 800e5ea <_fflush_r+0x1a>
 800e5e6:	f7ff fa6d 	bl	800dac4 <__sinit>
 800e5ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d0f3      	beq.n	800e5da <_fflush_r+0xa>
 800e5f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e5f4:	07d0      	lsls	r0, r2, #31
 800e5f6:	d404      	bmi.n	800e602 <_fflush_r+0x32>
 800e5f8:	0599      	lsls	r1, r3, #22
 800e5fa:	d402      	bmi.n	800e602 <_fflush_r+0x32>
 800e5fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e5fe:	f7ff fb8e 	bl	800dd1e <__retarget_lock_acquire_recursive>
 800e602:	4628      	mov	r0, r5
 800e604:	4621      	mov	r1, r4
 800e606:	f7ff ff63 	bl	800e4d0 <__sflush_r>
 800e60a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e60c:	4605      	mov	r5, r0
 800e60e:	07da      	lsls	r2, r3, #31
 800e610:	d4e4      	bmi.n	800e5dc <_fflush_r+0xc>
 800e612:	89a3      	ldrh	r3, [r4, #12]
 800e614:	059b      	lsls	r3, r3, #22
 800e616:	d4e1      	bmi.n	800e5dc <_fflush_r+0xc>
 800e618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e61a:	f7ff fb81 	bl	800dd20 <__retarget_lock_release_recursive>
 800e61e:	e7dd      	b.n	800e5dc <_fflush_r+0xc>

0800e620 <__swbuf_r>:
 800e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e622:	460e      	mov	r6, r1
 800e624:	4614      	mov	r4, r2
 800e626:	4605      	mov	r5, r0
 800e628:	b118      	cbz	r0, 800e632 <__swbuf_r+0x12>
 800e62a:	6a03      	ldr	r3, [r0, #32]
 800e62c:	b90b      	cbnz	r3, 800e632 <__swbuf_r+0x12>
 800e62e:	f7ff fa49 	bl	800dac4 <__sinit>
 800e632:	69a3      	ldr	r3, [r4, #24]
 800e634:	60a3      	str	r3, [r4, #8]
 800e636:	89a3      	ldrh	r3, [r4, #12]
 800e638:	071a      	lsls	r2, r3, #28
 800e63a:	d501      	bpl.n	800e640 <__swbuf_r+0x20>
 800e63c:	6923      	ldr	r3, [r4, #16]
 800e63e:	b943      	cbnz	r3, 800e652 <__swbuf_r+0x32>
 800e640:	4621      	mov	r1, r4
 800e642:	4628      	mov	r0, r5
 800e644:	f000 f82a 	bl	800e69c <__swsetup_r>
 800e648:	b118      	cbz	r0, 800e652 <__swbuf_r+0x32>
 800e64a:	f04f 37ff 	mov.w	r7, #4294967295
 800e64e:	4638      	mov	r0, r7
 800e650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	6922      	ldr	r2, [r4, #16]
 800e656:	b2f6      	uxtb	r6, r6
 800e658:	1a98      	subs	r0, r3, r2
 800e65a:	6963      	ldr	r3, [r4, #20]
 800e65c:	4637      	mov	r7, r6
 800e65e:	4283      	cmp	r3, r0
 800e660:	dc05      	bgt.n	800e66e <__swbuf_r+0x4e>
 800e662:	4621      	mov	r1, r4
 800e664:	4628      	mov	r0, r5
 800e666:	f7ff ffb3 	bl	800e5d0 <_fflush_r>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d1ed      	bne.n	800e64a <__swbuf_r+0x2a>
 800e66e:	68a3      	ldr	r3, [r4, #8]
 800e670:	3b01      	subs	r3, #1
 800e672:	60a3      	str	r3, [r4, #8]
 800e674:	6823      	ldr	r3, [r4, #0]
 800e676:	1c5a      	adds	r2, r3, #1
 800e678:	6022      	str	r2, [r4, #0]
 800e67a:	701e      	strb	r6, [r3, #0]
 800e67c:	6962      	ldr	r2, [r4, #20]
 800e67e:	1c43      	adds	r3, r0, #1
 800e680:	429a      	cmp	r2, r3
 800e682:	d004      	beq.n	800e68e <__swbuf_r+0x6e>
 800e684:	89a3      	ldrh	r3, [r4, #12]
 800e686:	07db      	lsls	r3, r3, #31
 800e688:	d5e1      	bpl.n	800e64e <__swbuf_r+0x2e>
 800e68a:	2e0a      	cmp	r6, #10
 800e68c:	d1df      	bne.n	800e64e <__swbuf_r+0x2e>
 800e68e:	4621      	mov	r1, r4
 800e690:	4628      	mov	r0, r5
 800e692:	f7ff ff9d 	bl	800e5d0 <_fflush_r>
 800e696:	2800      	cmp	r0, #0
 800e698:	d0d9      	beq.n	800e64e <__swbuf_r+0x2e>
 800e69a:	e7d6      	b.n	800e64a <__swbuf_r+0x2a>

0800e69c <__swsetup_r>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	4b29      	ldr	r3, [pc, #164]	@ (800e744 <__swsetup_r+0xa8>)
 800e6a0:	4605      	mov	r5, r0
 800e6a2:	6818      	ldr	r0, [r3, #0]
 800e6a4:	460c      	mov	r4, r1
 800e6a6:	b118      	cbz	r0, 800e6b0 <__swsetup_r+0x14>
 800e6a8:	6a03      	ldr	r3, [r0, #32]
 800e6aa:	b90b      	cbnz	r3, 800e6b0 <__swsetup_r+0x14>
 800e6ac:	f7ff fa0a 	bl	800dac4 <__sinit>
 800e6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b4:	0719      	lsls	r1, r3, #28
 800e6b6:	d422      	bmi.n	800e6fe <__swsetup_r+0x62>
 800e6b8:	06da      	lsls	r2, r3, #27
 800e6ba:	d407      	bmi.n	800e6cc <__swsetup_r+0x30>
 800e6bc:	2209      	movs	r2, #9
 800e6be:	602a      	str	r2, [r5, #0]
 800e6c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c8:	81a3      	strh	r3, [r4, #12]
 800e6ca:	e033      	b.n	800e734 <__swsetup_r+0x98>
 800e6cc:	0758      	lsls	r0, r3, #29
 800e6ce:	d512      	bpl.n	800e6f6 <__swsetup_r+0x5a>
 800e6d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6d2:	b141      	cbz	r1, 800e6e6 <__swsetup_r+0x4a>
 800e6d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6d8:	4299      	cmp	r1, r3
 800e6da:	d002      	beq.n	800e6e2 <__swsetup_r+0x46>
 800e6dc:	4628      	mov	r0, r5
 800e6de:	f7ff fb2f 	bl	800dd40 <_free_r>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6e6:	89a3      	ldrh	r3, [r4, #12]
 800e6e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6ec:	81a3      	strh	r3, [r4, #12]
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	6063      	str	r3, [r4, #4]
 800e6f2:	6923      	ldr	r3, [r4, #16]
 800e6f4:	6023      	str	r3, [r4, #0]
 800e6f6:	89a3      	ldrh	r3, [r4, #12]
 800e6f8:	f043 0308 	orr.w	r3, r3, #8
 800e6fc:	81a3      	strh	r3, [r4, #12]
 800e6fe:	6923      	ldr	r3, [r4, #16]
 800e700:	b94b      	cbnz	r3, 800e716 <__swsetup_r+0x7a>
 800e702:	89a3      	ldrh	r3, [r4, #12]
 800e704:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e70c:	d003      	beq.n	800e716 <__swsetup_r+0x7a>
 800e70e:	4621      	mov	r1, r4
 800e710:	4628      	mov	r0, r5
 800e712:	f000 f85c 	bl	800e7ce <__smakebuf_r>
 800e716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e71a:	f013 0201 	ands.w	r2, r3, #1
 800e71e:	d00a      	beq.n	800e736 <__swsetup_r+0x9a>
 800e720:	2200      	movs	r2, #0
 800e722:	60a2      	str	r2, [r4, #8]
 800e724:	6962      	ldr	r2, [r4, #20]
 800e726:	4252      	negs	r2, r2
 800e728:	61a2      	str	r2, [r4, #24]
 800e72a:	6922      	ldr	r2, [r4, #16]
 800e72c:	b942      	cbnz	r2, 800e740 <__swsetup_r+0xa4>
 800e72e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e732:	d1c5      	bne.n	800e6c0 <__swsetup_r+0x24>
 800e734:	bd38      	pop	{r3, r4, r5, pc}
 800e736:	0799      	lsls	r1, r3, #30
 800e738:	bf58      	it	pl
 800e73a:	6962      	ldrpl	r2, [r4, #20]
 800e73c:	60a2      	str	r2, [r4, #8]
 800e73e:	e7f4      	b.n	800e72a <__swsetup_r+0x8e>
 800e740:	2000      	movs	r0, #0
 800e742:	e7f7      	b.n	800e734 <__swsetup_r+0x98>
 800e744:	2000001c 	.word	0x2000001c

0800e748 <_sbrk_r>:
 800e748:	b538      	push	{r3, r4, r5, lr}
 800e74a:	2300      	movs	r3, #0
 800e74c:	4d05      	ldr	r5, [pc, #20]	@ (800e764 <_sbrk_r+0x1c>)
 800e74e:	4604      	mov	r4, r0
 800e750:	4608      	mov	r0, r1
 800e752:	602b      	str	r3, [r5, #0]
 800e754:	f7f2 f962 	bl	8000a1c <_sbrk>
 800e758:	1c43      	adds	r3, r0, #1
 800e75a:	d102      	bne.n	800e762 <_sbrk_r+0x1a>
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	b103      	cbz	r3, 800e762 <_sbrk_r+0x1a>
 800e760:	6023      	str	r3, [r4, #0]
 800e762:	bd38      	pop	{r3, r4, r5, pc}
 800e764:	200085a0 	.word	0x200085a0

0800e768 <memchr>:
 800e768:	4603      	mov	r3, r0
 800e76a:	b510      	push	{r4, lr}
 800e76c:	b2c9      	uxtb	r1, r1
 800e76e:	4402      	add	r2, r0
 800e770:	4293      	cmp	r3, r2
 800e772:	4618      	mov	r0, r3
 800e774:	d101      	bne.n	800e77a <memchr+0x12>
 800e776:	2000      	movs	r0, #0
 800e778:	e003      	b.n	800e782 <memchr+0x1a>
 800e77a:	7804      	ldrb	r4, [r0, #0]
 800e77c:	3301      	adds	r3, #1
 800e77e:	428c      	cmp	r4, r1
 800e780:	d1f6      	bne.n	800e770 <memchr+0x8>
 800e782:	bd10      	pop	{r4, pc}

0800e784 <__swhatbuf_r>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	460c      	mov	r4, r1
 800e788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e78c:	4615      	mov	r5, r2
 800e78e:	2900      	cmp	r1, #0
 800e790:	461e      	mov	r6, r3
 800e792:	b096      	sub	sp, #88	@ 0x58
 800e794:	da0c      	bge.n	800e7b0 <__swhatbuf_r+0x2c>
 800e796:	89a3      	ldrh	r3, [r4, #12]
 800e798:	2100      	movs	r1, #0
 800e79a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e79e:	bf14      	ite	ne
 800e7a0:	2340      	movne	r3, #64	@ 0x40
 800e7a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	6031      	str	r1, [r6, #0]
 800e7aa:	602b      	str	r3, [r5, #0]
 800e7ac:	b016      	add	sp, #88	@ 0x58
 800e7ae:	bd70      	pop	{r4, r5, r6, pc}
 800e7b0:	466a      	mov	r2, sp
 800e7b2:	f000 f849 	bl	800e848 <_fstat_r>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	dbed      	blt.n	800e796 <__swhatbuf_r+0x12>
 800e7ba:	9901      	ldr	r1, [sp, #4]
 800e7bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e7c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e7c4:	4259      	negs	r1, r3
 800e7c6:	4159      	adcs	r1, r3
 800e7c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e7cc:	e7eb      	b.n	800e7a6 <__swhatbuf_r+0x22>

0800e7ce <__smakebuf_r>:
 800e7ce:	898b      	ldrh	r3, [r1, #12]
 800e7d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7d2:	079d      	lsls	r5, r3, #30
 800e7d4:	4606      	mov	r6, r0
 800e7d6:	460c      	mov	r4, r1
 800e7d8:	d507      	bpl.n	800e7ea <__smakebuf_r+0x1c>
 800e7da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7de:	6023      	str	r3, [r4, #0]
 800e7e0:	6123      	str	r3, [r4, #16]
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	6163      	str	r3, [r4, #20]
 800e7e6:	b003      	add	sp, #12
 800e7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ea:	466a      	mov	r2, sp
 800e7ec:	ab01      	add	r3, sp, #4
 800e7ee:	f7ff ffc9 	bl	800e784 <__swhatbuf_r>
 800e7f2:	9f00      	ldr	r7, [sp, #0]
 800e7f4:	4605      	mov	r5, r0
 800e7f6:	4639      	mov	r1, r7
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f7ff fb0b 	bl	800de14 <_malloc_r>
 800e7fe:	b948      	cbnz	r0, 800e814 <__smakebuf_r+0x46>
 800e800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e804:	059a      	lsls	r2, r3, #22
 800e806:	d4ee      	bmi.n	800e7e6 <__smakebuf_r+0x18>
 800e808:	f023 0303 	bic.w	r3, r3, #3
 800e80c:	f043 0302 	orr.w	r3, r3, #2
 800e810:	81a3      	strh	r3, [r4, #12]
 800e812:	e7e2      	b.n	800e7da <__smakebuf_r+0xc>
 800e814:	89a3      	ldrh	r3, [r4, #12]
 800e816:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e81a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e81e:	81a3      	strh	r3, [r4, #12]
 800e820:	9b01      	ldr	r3, [sp, #4]
 800e822:	6020      	str	r0, [r4, #0]
 800e824:	b15b      	cbz	r3, 800e83e <__smakebuf_r+0x70>
 800e826:	4630      	mov	r0, r6
 800e828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e82c:	f000 f81e 	bl	800e86c <_isatty_r>
 800e830:	b128      	cbz	r0, 800e83e <__smakebuf_r+0x70>
 800e832:	89a3      	ldrh	r3, [r4, #12]
 800e834:	f023 0303 	bic.w	r3, r3, #3
 800e838:	f043 0301 	orr.w	r3, r3, #1
 800e83c:	81a3      	strh	r3, [r4, #12]
 800e83e:	89a3      	ldrh	r3, [r4, #12]
 800e840:	431d      	orrs	r5, r3
 800e842:	81a5      	strh	r5, [r4, #12]
 800e844:	e7cf      	b.n	800e7e6 <__smakebuf_r+0x18>
	...

0800e848 <_fstat_r>:
 800e848:	b538      	push	{r3, r4, r5, lr}
 800e84a:	2300      	movs	r3, #0
 800e84c:	4d06      	ldr	r5, [pc, #24]	@ (800e868 <_fstat_r+0x20>)
 800e84e:	4604      	mov	r4, r0
 800e850:	4608      	mov	r0, r1
 800e852:	4611      	mov	r1, r2
 800e854:	602b      	str	r3, [r5, #0]
 800e856:	f7f2 f8bb 	bl	80009d0 <_fstat>
 800e85a:	1c43      	adds	r3, r0, #1
 800e85c:	d102      	bne.n	800e864 <_fstat_r+0x1c>
 800e85e:	682b      	ldr	r3, [r5, #0]
 800e860:	b103      	cbz	r3, 800e864 <_fstat_r+0x1c>
 800e862:	6023      	str	r3, [r4, #0]
 800e864:	bd38      	pop	{r3, r4, r5, pc}
 800e866:	bf00      	nop
 800e868:	200085a0 	.word	0x200085a0

0800e86c <_isatty_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	2300      	movs	r3, #0
 800e870:	4d05      	ldr	r5, [pc, #20]	@ (800e888 <_isatty_r+0x1c>)
 800e872:	4604      	mov	r4, r0
 800e874:	4608      	mov	r0, r1
 800e876:	602b      	str	r3, [r5, #0]
 800e878:	f7f2 f8b9 	bl	80009ee <_isatty>
 800e87c:	1c43      	adds	r3, r0, #1
 800e87e:	d102      	bne.n	800e886 <_isatty_r+0x1a>
 800e880:	682b      	ldr	r3, [r5, #0]
 800e882:	b103      	cbz	r3, 800e886 <_isatty_r+0x1a>
 800e884:	6023      	str	r3, [r4, #0]
 800e886:	bd38      	pop	{r3, r4, r5, pc}
 800e888:	200085a0 	.word	0x200085a0

0800e88c <_init>:
 800e88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e88e:	bf00      	nop
 800e890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e892:	bc08      	pop	{r3}
 800e894:	469e      	mov	lr, r3
 800e896:	4770      	bx	lr

0800e898 <_fini>:
 800e898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e89a:	bf00      	nop
 800e89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e89e:	bc08      	pop	{r3}
 800e8a0:	469e      	mov	lr, r3
 800e8a2:	4770      	bx	lr
